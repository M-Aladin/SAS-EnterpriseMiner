*****************************************;
*** Begin Scoring Code from PROC DMVQ ***;
*****************************************;


*** Begin Class Look-up, Standardization, Replacement ;
drop _dm_bad; _dm_bad = 0;

*** Generate dummy variables for CampaignViewedEmail ;
drop CampaignViewedEmail0 CampaignViewedEmail1 ;
if missing( CampaignViewedEmail ) then do;
   CampaignViewedEmail0 = .;
   CampaignViewedEmail1 = .;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( CampaignViewedEmail , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      CampaignViewedEmail0 = 0.67983848734155;
      CampaignViewedEmail1 = -0.67983848734155;
   end;
   else if _dm12 = '1'  then do;
      CampaignViewedEmail0 = -0.73543209598014;
      CampaignViewedEmail1 = 0.73543209598014;
   end;
   else do;
      CampaignViewedEmail0 = .;
      CampaignViewedEmail1 = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for FacebookLike ;
drop FacebookLike0 FacebookLike1 ;
if missing( FacebookLike ) then do;
   FacebookLike0 = .;
   FacebookLike1 = .;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( FacebookLike , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      FacebookLike0 = 0.56920531067484;
      FacebookLike1 = -0.56920531067484;
   end;
   else if _dm12 = '1'  then do;
      FacebookLike0 = -0.87837382100458;
      FacebookLike1 = 0.87837382100458;
   end;
   else do;
      FacebookLike0 = .;
      FacebookLike1 = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for MobileApplications ;
drop MobileApplications0 MobileApplications1 ;
if missing( MobileApplications ) then do;
   MobileApplications0 = .;
   MobileApplications1 = .;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( MobileApplications , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      MobileApplications0 = 0.69508561075759;
      MobileApplications1 = -0.69508561075759;
   end;
   else if _dm12 = '1'  then do;
      MobileApplications0 = -0.71929994800011;
      MobileApplications1 = 0.71929994800011;
   end;
   else do;
      MobileApplications0 = .;
      MobileApplications1 = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for PreviousCampaign ;
drop PreviousCampaign0 PreviousCampaign1 ;
if missing( PreviousCampaign ) then do;
   PreviousCampaign0 = .;
   PreviousCampaign1 = .;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( PreviousCampaign , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      PreviousCampaign0 = 0.66569999864597;
      PreviousCampaign1 = -0.66569999864597;
   end;
   else if _dm12 = '1'  then do;
      PreviousCampaign0 = -0.75105159184394;
      PreviousCampaign1 = 0.75105159184394;
   end;
   else do;
      PreviousCampaign0 = .;
      PreviousCampaign1 = .;
      _DM_BAD = 1;
   end;
end;

*** End Class Look-up, Standardization, Replacement ;


*** Omitted Cases;
if _dm_bad then do;
   _SEGMENT_ = .; Distance = .;
   goto CLUS2vlex ;
end; *** omitted;

*** Compute Distances and Cluster Membership;
label _SEGMENT_ = 'Segment Id' ;
label Distance = 'Distance' ;
array CLUS2vads [4] _temporary_;
drop _vqclus _vqmvar _vqnvar;
_vqmvar = 0;
do _vqclus = 1 to 4; CLUS2vads [_vqclus] = 0; end;
if not missing( CampaignViewedEmail0 ) then do;
   CLUS2vads [1] + ( CampaignViewedEmail0 - -0.31066900959757 )**2;
   CLUS2vads [2] + ( CampaignViewedEmail0 - -0.39210500029563 )**2;
   CLUS2vads [3] + ( CampaignViewedEmail0 - 0.35182711894213 )**2;
   CLUS2vads [4] + ( CampaignViewedEmail0 - 0.32393359768777 )**2;
end;
else _vqmvar + 0.5;
if not missing( CampaignViewedEmail1 ) then do;
   CLUS2vads [1] + ( CampaignViewedEmail1 - 0.31066900959757 )**2;
   CLUS2vads [2] + ( CampaignViewedEmail1 - 0.39210500029563 )**2;
   CLUS2vads [3] + ( CampaignViewedEmail1 - -0.35182711894213 )**2;
   CLUS2vads [4] + ( CampaignViewedEmail1 - -0.32393359768777 )**2;
end;
else _vqmvar + 0.5;
if not missing( FacebookLike0 ) then do;
   CLUS2vads [1] + ( FacebookLike0 - 0.56920531067488 )**2;
   CLUS2vads [2] + ( FacebookLike0 - -0.87837382100454 )**2;
   CLUS2vads [3] + ( FacebookLike0 - -0.87837382100454 )**2;
   CLUS2vads [4] + ( FacebookLike0 - 0.56920531067488 )**2;
end;
else _vqmvar + 0.5;
if not missing( FacebookLike1 ) then do;
   CLUS2vads [1] + ( FacebookLike1 - -0.56920531067488 )**2;
   CLUS2vads [2] + ( FacebookLike1 - 0.87837382100454 )**2;
   CLUS2vads [3] + ( FacebookLike1 - 0.87837382100454 )**2;
   CLUS2vads [4] + ( FacebookLike1 - -0.56920531067488 )**2;
end;
else _vqmvar + 0.5;
if not missing( MobileApplications0 ) then do;
   CLUS2vads [1] + ( MobileApplications0 - -0.37774765127568 )**2;
   CLUS2vads [2] + ( MobileApplications0 - -0.33348911633896 )**2;
   CLUS2vads [3] + ( MobileApplications0 - 0.33741709373969 )**2;
   CLUS2vads [4] + ( MobileApplications0 - 0.36777204726959 )**2;
end;
else _vqmvar + 0.49999999999999;
if not missing( MobileApplications1 ) then do;
   CLUS2vads [1] + ( MobileApplications1 - 0.37774765127568 )**2;
   CLUS2vads [2] + ( MobileApplications1 - 0.33348911633896 )**2;
   CLUS2vads [3] + ( MobileApplications1 - -0.33741709373969 )**2;
   CLUS2vads [4] + ( MobileApplications1 - -0.36777204726959 )**2;
end;
else _vqmvar + 0.5;
if not missing( PreviousCampaign0 ) then do;
   CLUS2vads [1] + ( PreviousCampaign0 - 0.4018800928976 )**2;
   CLUS2vads [2] + ( PreviousCampaign0 - -0.38254342881891 )**2;
   CLUS2vads [3] + ( PreviousCampaign0 - 0.2975757250134 )**2;
   CLUS2vads [4] + ( PreviousCampaign0 - -0.39143118138077 )**2;
end;
else _vqmvar + 0.5;
if not missing( PreviousCampaign1 ) then do;
   CLUS2vads [1] + ( PreviousCampaign1 - -0.4018800928976 )**2;
   CLUS2vads [2] + ( PreviousCampaign1 - 0.38254342881891 )**2;
   CLUS2vads [3] + ( PreviousCampaign1 - -0.2975757250134 )**2;
   CLUS2vads [4] + ( PreviousCampaign1 - 0.39143118138077 )**2;
end;
else _vqmvar + 0.5;
_vqnvar = 4 - _vqmvar;
if _vqnvar <= 3.6379788070917E-12 then do;
   _SEGMENT_ = .; Distance = .;
end;
else do;
   _SEGMENT_ = 1; Distance = CLUS2vads [1];
   _vqfzdst = Distance * 0.99999999999988; drop _vqfzdst;
   do _vqclus = 2 to 4;
      if CLUS2vads [_vqclus] < _vqfzdst then do;
         _SEGMENT_ = _vqclus; Distance = CLUS2vads [_vqclus];
         _vqfzdst = Distance * 0.99999999999988;
      end;
   end;
   Distance = sqrt(Distance * (4 / _vqnvar));
end;
CLUS2vlex :;

***************************************;
*** End Scoring Code from PROC DMVQ ***;
***************************************;
