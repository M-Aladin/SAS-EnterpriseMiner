*************************************;
*** begin scoring code for regression;
*************************************;

length _WARN_ $4;
label _WARN_ = 'Warnings' ;

length I_TargetBuy $ 12;
label I_TargetBuy = 'Into: TargetBuy' ;
*** Target Values;
array REG12DRF [2] $12 _temporary_ ('1' '0' );
label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
format U_TargetBuy BEST12.;
*** Unnormalized target values;
ARRAY REG12DRU[2]  _TEMPORARY_ (1 0);

*** Generate dummy variables for TargetBuy ;
drop _Y ;
label F_TargetBuy = 'From: TargetBuy' ;
length F_TargetBuy $ 12;
F_TargetBuy = put( TargetBuy , BEST12. );
%DMNORMIP( F_TargetBuy )
if missing( TargetBuy ) then do;
   _Y = .;
end;
else do;
   if F_TargetBuy = '0'  then do;
      _Y = 1;
   end;
   else if F_TargetBuy = '1'  then do;
      _Y = 0;
   end;
   else do;
      _Y = .;
   end;
end;

drop _DM_BAD;
_DM_BAD=0;

*** Check AffluenceGrade for missing values ;
if missing( AffluenceGrade ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check CleanserProducts for missing values ;
if missing( CleanserProducts ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check DayCareProducts for missing values ;
if missing( DayCareProducts ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check LotionProducts for missing values ;
if missing( LotionProducts ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check NightRepairProducts for missing values ;
if missing( NightRepairProducts ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check REP_Age for missing values ;
if missing( REP_Age ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check REP_LoyaltyTime for missing values ;
if missing( REP_LoyaltyTime ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check TimeSinceLastPurchase for missing values ;
if missing( TimeSinceLastPurchase ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Check TotalSpend for missing values ;
if missing( TotalSpend ) then do;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;

*** Generate dummy variables for CampaignViewedEmail ;
drop _1_0 ;
if missing( CampaignViewedEmail ) then do;
   _1_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( CampaignViewedEmail , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _1_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _1_0 = -1;
   end;
   else do;
      _1_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for FacebookLike ;
drop _2_0 ;
if missing( FacebookLike ) then do;
   _2_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( FacebookLike , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _2_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _2_0 = -1;
   end;
   else do;
      _2_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for LoyaltyClass ;
drop _3_0 _3_1 _3_2 ;
if missing( LoyaltyClass ) then do;
   _3_0 = .;
   _3_1 = .;
   _3_2 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm8 $ 8; drop _dm8 ;
   _dm8 = put( LoyaltyClass , $CHAR8. );
   %DMNORMIP( _dm8 )
   if _dm8 = 'GOLD'  then do;
      _3_0 = 0;
      _3_1 = 1;
      _3_2 = 0;
   end;
   else if _dm8 = 'PLATINUM'  then do;
      _3_0 = 0;
      _3_1 = 0;
      _3_2 = 1;
   end;
   else if _dm8 = 'SILVER'  then do;
      _3_0 = -1;
      _3_1 = -1;
      _3_2 = -1;
   end;
   else if _dm8 = 'DIAMOND'  then do;
      _3_0 = 1;
      _3_1 = 0;
      _3_2 = 0;
   end;
   else do;
      _3_0 = .;
      _3_1 = .;
      _3_2 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for MobileApplications ;
drop _4_0 ;
if missing( MobileApplications ) then do;
   _4_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( MobileApplications , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _4_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _4_0 = -1;
   end;
   else do;
      _4_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for PreviousCampaign ;
drop _5_0 ;
if missing( PreviousCampaign ) then do;
   _5_0 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( PreviousCampaign , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      _5_0 = 1;
   end;
   else if _dm12 = '1'  then do;
      _5_0 = -1;
   end;
   else do;
      _5_0 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for REP_AdvertisementZone ;
drop _6_0 _6_1 _6_2 _6_3 _6_4 _6_5 _6_6 _6_7 _6_8 _6_9 _6_10 _6_11 ;
*** encoding is sparse, initialize to zero;
_6_0 = 0;
_6_1 = 0;
_6_2 = 0;
_6_3 = 0;
_6_4 = 0;
_6_5 = 0;
_6_6 = 0;
_6_7 = 0;
_6_8 = 0;
_6_9 = 0;
_6_10 = 0;
_6_11 = 0;
if missing( REP_AdvertisementZone ) then do;
   _6_0 = .;
   _6_1 = .;
   _6_2 = .;
   _6_3 = .;
   _6_4 = .;
   _6_5 = .;
   _6_6 = .;
   _6_7 = .;
   _6_8 = .;
   _6_9 = .;
   _6_10 = .;
   _6_11 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm10 $ 10; drop _dm10 ;
   _dm10 = put( REP_AdvertisementZone , $CHAR10. );
   %DMNORMIP( _dm10 )
   if _dm10 = 'E CENTRAL'  then do;
      _6_1 = 1;
   end;
   else if _dm10 = 'S CENTRAL'  then do;
      _6_8 = 1;
   end;
   else if _dm10 = 'S EAST'  then do;
      _6_9 = 1;
   end;
   else if _dm10 = 'N WEST'  then do;
      _6_4 = 1;
   end;
   else if _dm10 = 'W CENTRAL'  then do;
      _6_0 = -1;
      _6_1 = -1;
      _6_2 = -1;
      _6_3 = -1;
      _6_4 = -1;
      _6_5 = -1;
      _6_6 = -1;
      _6_7 = -1;
      _6_8 = -1;
      _6_9 = -1;
      _6_10 = -1;
      _6_11 = -1;
   end;
   else if _dm10 = 'CENTRAL Z1'  then do;
      _6_0 = 1;
   end;
   else if _dm10 = 'NE Z3'  then do;
      _6_7 = 1;
   end;
   else if _dm10 = 'N EAST'  then do;
      _6_3 = 1;
   end;
   else if _dm10 = 'NE Z1'  then do;
      _6_5 = 1;
   end;
   else if _dm10 = 'S WEST'  then do;
      _6_10 = 1;
   end;
   else if _dm10 = 'U'  then do;
      _6_11 = 1;
   end;
   else if _dm10 = 'N CENTRAL'  then do;
      _6_2 = 1;
   end;
   else if _dm10 = 'NE Z2'  then do;
      _6_6 = 1;
   end;
   else do;
      _6_0 = .;
      _6_1 = .;
      _6_2 = .;
      _6_3 = .;
      _6_4 = .;
      _6_5 = .;
      _6_6 = .;
      _6_7 = .;
      _6_8 = .;
      _6_9 = .;
      _6_10 = .;
      _6_11 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for REP_ClusterGroup ;
drop _7_0 _7_1 _7_2 _7_3 _7_4 _7_5 ;
*** encoding is sparse, initialize to zero;
_7_0 = 0;
_7_1 = 0;
_7_2 = 0;
_7_3 = 0;
_7_4 = 0;
_7_5 = 0;
if missing( REP_ClusterGroup ) then do;
   _7_0 = .;
   _7_1 = .;
   _7_2 = .;
   _7_3 = .;
   _7_4 = .;
   _7_5 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm1 $ 1; drop _dm1 ;
   _dm1 = put( REP_ClusterGroup , $CHAR1. );
   %DMNORMIP( _dm1 )
   _dm_find = 0; drop _dm_find;
   if _dm1 <= 'D'  then do;
      if _dm1 <= 'B'  then do;
         if _dm1 = 'A'  then do;
            _7_0 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm1 = 'B'  then do;
               _7_1 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm1 = 'C'  then do;
            _7_2 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm1 = 'D'  then do;
               _7_3 = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm1 <= 'F'  then do;
         if _dm1 = 'E'  then do;
            _7_4 = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm1 = 'F'  then do;
               _7_5 = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm1 = 'U'  then do;
            _7_0 = -1;
            _7_1 = -1;
            _7_2 = -1;
            _7_3 = -1;
            _7_4 = -1;
            _7_5 = -1;
            _dm_find = 1;
         end;
      end;
   end;
   if not _dm_find then do;
      _7_0 = .;
      _7_1 = .;
      _7_2 = .;
      _7_3 = .;
      _7_4 = .;
      _7_5 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for REP_Gender ;
drop _8_0 _8_1 ;
if missing( REP_Gender ) then do;
   _8_0 = .;
   _8_1 = .;
   substr(_warn_,1,1) = 'M';
   _DM_BAD = 1;
end;
else do;
   length _dm1 $ 1; drop _dm1 ;
   _dm1 = put( REP_Gender , $CHAR1. );
   %DMNORMIP( _dm1 )
   if _dm1 = 'F'  then do;
      _8_0 = 1;
      _8_1 = 0;
   end;
   else if _dm1 = 'M'  then do;
      _8_0 = 0;
      _8_1 = 1;
   end;
   else if _dm1 = 'U'  then do;
      _8_0 = -1;
      _8_1 = -1;
   end;
   else do;
      _8_0 = .;
      _8_1 = .;
      substr(_warn_,2,1) = 'U';
      _DM_BAD = 1;
   end;
end;

*** If missing inputs, use averages;
if _DM_BAD > 0 then do;
   _P0 = 0.1532172996;
   _P1 = 0.8467827004;
   goto REG12DR1;
end;

*** Compute Linear Predictor;
drop _TEMP;
drop _LP0;
_LP0 = 0;

***  Effect: AffluenceGrade ;
_TEMP = AffluenceGrade ;
_LP0 = _LP0 + (     0.2188160302235 * _TEMP);

***  Effect: CampaignViewedEmail ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.04944956003092) * _TEMP * _1_0;

***  Effect: CleanserProducts ;
_TEMP = CleanserProducts ;
_LP0 = _LP0 + (    0.05782055623393 * _TEMP);

***  Effect: DayCareProducts ;
_TEMP = DayCareProducts ;
_LP0 = _LP0 + (    0.22745913017938 * _TEMP);

***  Effect: FacebookLike ;
_TEMP = 1;
_LP0 = _LP0 + (    -0.3553136170001) * _TEMP * _2_0;

***  Effect: LotionProducts ;
_TEMP = LotionProducts ;
_LP0 = _LP0 + (   -0.00408634213851 * _TEMP);

***  Effect: LoyaltyClass ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.31569707034726) * _TEMP * _3_0;
_LP0 = _LP0 + (    0.21557762918091) * _TEMP * _3_1;
_LP0 = _LP0 + (      0.075498222111) * _TEMP * _3_2;

***  Effect: MobileApplications ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.21935023040171) * _TEMP * _4_0;

***  Effect: NightRepairProducts ;
_TEMP = NightRepairProducts ;
_LP0 = _LP0 + (    0.17427460945401 * _TEMP);

***  Effect: PreviousCampaign ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.17476987049647) * _TEMP * _5_0;

***  Effect: REP_AdvertisementZone ;
_TEMP = 1;
_LP0 = _LP0 + (   -0.07103217391934) * _TEMP * _6_0;
_LP0 = _LP0 + (     0.0104057072526) * _TEMP * _6_1;
_LP0 = _LP0 + (    -0.7074555399396) * _TEMP * _6_2;
_LP0 = _LP0 + (    0.17991437402879) * _TEMP * _6_3;
_LP0 = _LP0 + (   -0.22610893997873) * _TEMP * _6_4;
_LP0 = _LP0 + (    0.35938374181166) * _TEMP * _6_5;
_LP0 = _LP0 + (   -0.26981840118282) * _TEMP * _6_6;
_LP0 = _LP0 + (   -0.07214989690341) * _TEMP * _6_7;
_LP0 = _LP0 + (    0.02539608164534) * _TEMP * _6_8;
_LP0 = _LP0 + (   -0.07476159368656) * _TEMP * _6_9;
_LP0 = _LP0 + (    0.42326184588349) * _TEMP * _6_10;
_LP0 = _LP0 + (    0.23430489616586) * _TEMP * _6_11;

***  Effect: REP_Age ;
_TEMP = REP_Age ;
_LP0 = _LP0 + (   -0.05765423580376 * _TEMP);

***  Effect: REP_ClusterGroup ;
_TEMP = 1;
_LP0 = _LP0 + (    0.16681411147465) * _TEMP * _7_0;
_LP0 = _LP0 + (   -0.27479721838094) * _TEMP * _7_1;
_LP0 = _LP0 + (   -0.10930238704355) * _TEMP * _7_2;
_LP0 = _LP0 + (   -0.07411340978179) * _TEMP * _7_3;
_LP0 = _LP0 + (    0.04834080256324) * _TEMP * _7_4;
_LP0 = _LP0 + (   -0.13833454864779) * _TEMP * _7_5;

***  Effect: REP_Gender ;
_TEMP = 1;
_LP0 = _LP0 + (    1.09121563495379) * _TEMP * _8_0;
_LP0 = _LP0 + (    -0.2322381870769) * _TEMP * _8_1;

***  Effect: REP_LoyaltyTime ;
_TEMP = REP_LoyaltyTime ;
_LP0 = _LP0 + (    0.01441770351376 * _TEMP);

***  Effect: TimeSinceLastPurchase ;
_TEMP = TimeSinceLastPurchase ;
_LP0 = _LP0 + (   -0.03833923824133 * _TEMP);

***  Effect: TotalSpend ;
_TEMP = TotalSpend ;
_LP0 = _LP0 + (    0.00002590976206 * _TEMP);

*** Naive Posterior Probabilities;
drop _MAXP _IY _P0 _P1;
_TEMP =    -1.57133469676555 + _LP0;
if (_TEMP < 0) then do;
   _TEMP = exp(_TEMP);
   _P0 = _TEMP / (1 + _TEMP);
end;
else _P0 = 1 / (1 + exp(-_TEMP));
_P1 = 1.0 - _P0;

REG12DR1:

*** Residuals;
if (_Y = .) then do;
   R_TargetBuy1 = .;
   R_TargetBuy0 = .;
end;
else do;
    label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
    label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
   R_TargetBuy1 = - _P0;
   R_TargetBuy0 = - _P1;
   select( _Y );
      when (0)  R_TargetBuy1 = R_TargetBuy1 + 1;
      when (1)  R_TargetBuy0 = R_TargetBuy0 + 1;
   end;
end;

*** Posterior Probabilities and Predicted Level;
label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
P_TargetBuy1 = _P0;
_MAXP = _P0;
_IY = 1;
P_TargetBuy0 = _P1;
if (_P1 >  _MAXP + 1E-8) then do;
   _MAXP = _P1;
   _IY = 2;
end;
I_TargetBuy = REG12DRF[_IY];
U_TargetBuy = REG12DRU[_IY];

*************************************;
***** end scoring code for regression;
*************************************;
