*------------------------------------------------------------*
User:                Mohamed
Date:                May 13, 2018
Time:                20:57:49
Site:                12400032
Platform:            X64_10HOME
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
*------------------------------------------------------------*
* Training Log
Date:                May 13, 2018
Time:                20:57:35
*------------------------------------------------------------*
15256  proc freq data=EMWS6.Tree_VariableSet noprint;
15257  table ROLE*LEVEL/out=WORK.TreeMETA;
15258  run;
 
NOTE: There were 14 observations read from the data set EMWS6.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
15259  proc print data=WORK.TreeMETA label noobs;
15260  var ROLE LEVEL COUNT;
15261  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15262  title9 ' ';
15263  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15264  run;
 
NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
15265  title10;
 
15266  %let EMNORLEN = %DMNORLEN;
EMWS6.Part_TRAIN EMWS6.Part_TRAIN
EMWS6.Part_TRAIN EMWS6.Part_TRAIN EMWS6 Part_TRAIN
EMWS6.Part_TRAIN EMWS6.Part_TRAIN
EMWS6.Part_TRAIN EMWS6.Part_TRAIN EMWS6 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15295  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15296  length ORDER $20;
15297  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15298     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15299  set EMWS6.IDS_TARGETBUY_DM( where=(_TYPE_="TARGET"));
15300  NumLevels=2;
15301  select(upcase(ORDER));
15302  when('DESC') ORDER = 'Descending';
15303  when('ASC') ORDER = 'Ascending';
15304  when('FMTDESC') ORDER = 'Formatted Descending';
15305  when('FMTASC') ORDER = 'Formatted Ascending';
15306  otherwise ORDER = 'Descending';
15307  end;
15308  output;
15309  run;
 
NOTE: There were 1 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
15310  title9 ' ';
15311  proc print data=WORK.Tree_EVENT noobs label;
15312  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15313  title9 ' ';
15314  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15315  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15316  title10;
 
15317  proc print data = EMWS6.Ids_TargetBuy_DD noobs label;
15318  var TargetBuy
15319  TRAINPRIOR
15320  Solicit
15321  Ignore
15322  ;
15323  title9 ' ';
15324  title10 "Decision Matrix";
15325  run;
 
NOTE: There were 2 observations read from the data set EMWS6.IDS_TARGETBUY_DD.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15326  title10;
15327  proc print data = EMWS6.Ids_TargetBuy_DM noobs label;
15328  var _type_ variable label;
15329  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15330  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15331  title9 ' ';
15332  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15333  run;
 
NOTE: There were 11 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15334  title10;
 
15335  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15847  *------------------------------------------------------------*;
15848  * Tree: Generation of macros and macro variables;
15849  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15850  *------------------------------------------------------------*;
 
15851  %let EMEXCEPTIONSTRING=;
15852  *------------------------------------------------------------*;
15853  * TRAIN: Tree;
15854  *------------------------------------------------------------*;
15855  %let EM_ACTION = TRAIN;
15856  %let syscc = 0;
15857  %macro main;
15858
15859    %if %upcase(&EM_ACTION) = CREATE %then %do;
15860      filename temp catalog 'sashelp.emmodl.tree_create.source';
15861      %include temp;
15862      filename temp;
15863
15864      %em_tree_create;
15865    %end;
15866
15867     %else
15868     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15869
15870         filename temp catalog 'sashelp.emmodl.tree_train.source';
15871         %include temp;
15872         filename temp;
15873         %em_tree_train;
15874     %end;
15875
15876    %else
15877    %if %upcase(&EM_ACTION) = SCORE %then %do;
15878      filename temp catalog 'sashelp.emmodl.tree_score.source';
15879      %include temp;
15880      filename temp;
15881
15882      %em_tree_score;
15883
15884    %end;
15885
15886    %else
15887    %if %upcase(&EM_ACTION) = REPORT %then %do;
15888
15889         filename temp catalog 'sashelp.emmodl.tree_report.source';
15890         %include temp;
15891         filename temp;
15892
15893         %em_tree_report;
15894     %end;
15895
15896    %else
15897    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15898
15899         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15900         %include temp;
15901         filename temp;
15902         %EM_TREE_OPENTREEVIEWER;
15903
15904     %end;
15905
15906    %else
15907    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15908
15909         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15910         %include temp;
15911         filename temp;
15912         %EM_TREE_CLOSETREEVIEWER;
15913
15914     %end;
15915
15916
15917     %doendm:
15918  %mend main;
15919
15920  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15922 +%macro em_tree_train;
15924 +   %if &EM_IMPORT_DATA eq %then %do;
15925 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15926 +       %put &em_codebar;
15927 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15928 +       %put &errormsg;
15929 +       %put &em_codebar;
15930 +       %goto doendm;
15931 +   %end;
15932 +   %else
15933 +       %let EMEXCEPTIONSTRING =;
15935 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15936 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15937 +        %put &em_codebar;
15938 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15939 +        %put &errormsg;
15940 +        %put &em_codebar;
15941 +        %goto doendm;
15942 +   %end;
15944 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15945 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15946 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15947 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15948 +        %put &em_codebar;
15949 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15950 +        %put &errormsg;
15951 +        %put &em_codebar;
15952 +        %goto doendm;
15953 +   %end;
15955 +   /* Initialize property macro variables */
15956 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15957 +   %include temp;
15958 +   filename temp;
15960 +   %EM_SetProperties;
15962 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15963 +   %EM_GETNAME(key=EMTREE, type=DATA);
15964 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15965 +     /* if import eq Y and no importtable defined, throw an exception */
15966 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15967 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15968 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15969 +         %put &em_codebar;
15970 +         %put &errmsg;
15971 +         %put &em_codebar;
15972 +         %goto doendm;
15973 +      %end;
15974 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15975 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15976 +         %put &em_codebar;
15977 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15978 +         %put &errormsg;
15979 +         %put &em_codebar;
15980 +         %goto doendm;
15981 +      %end;
15982 +      %else %do;
15983 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15984 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15985 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15986 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15987 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15988 +         %let dsid = %sysfunc(close(&dsid));
15989 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15990 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15991 +            %put &em_codebar;
15992 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15993 +            %put &errormsg;
15994 +            %put &em_codebar;
15995 +            %goto doendm;
15996 +         %end;
15997 +      %end;
15998 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15999 +         proc delete data=&EM_USER_EMTREE;
16000 +         run;
16001 +      %end;
16002 +   %end;
16003 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
16004 +      proc delete data=&EM_USER_EMTREE;
16005 +      run;
16006 +   %end;
16008 +   /* load tree macros */
16009 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16010 +   %include temp;
16011 +   filename temp;
16013 +   /* data sets */
16014 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
16015 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
16016 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
16018 +   /* files */
16019 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
16021 +   /* check actual num of target levels */
16022 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
16023 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16024 +                              nLevel=_nTargetLevel );
16025 +      %if &_nTargetLevel  > 2 %then %do;
16026 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16027 +        %put &em_codebar;
16028 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16029 +        %put &errormsg;
16030 +        %put &em_codebar;
16031 +        %goto doendm;
16032 +      %end;
16033 +   %end;
16035 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16036 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16037 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16038 +        %let costflag=0;
16039 +        data _null_;
16040 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16041 +          if eof then call symput("costflag", _N_);
16042 +        run;
16043 +        %if &costflag gt 0 %then %do;
16044 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16045 +          %put &em_codebar;
16046 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16047 +          %put &errormsg;
16048 +          %put &em_codebar;
16049 +          %goto doendm;
16050 +       %end;
16051 +     %end;
16052 +   %end;
16054 +   /* determine if multiple targets will be processed */
16055 +   %let em_tree_multipleTargets=N;
16056 +   %let em_tree_numTarget = 1;
16057 +   %let em_tree_targetVars=;
16059 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16060 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16061 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16062 +         %let em_tree_multipleTargets=N;
16063 +      %end;
16064 +      %else %do;
16065 +         /* create macro array of targets  */
16066 +         data _null_;
16067 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16068 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16069 +           if eof then
16070 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16071 +        run;
16073 +        %if &em_tree_numTarget gt 1 %then %do;
16074 +           %let em_tree_multipleTargets=Y;
16075 +        %end;
16076 +      %end;
16077 +   %end;
16079 +   /* create view of only necessary variable for performance reasons */
16080 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16081 +   data &tempData / view=&tempData;
16082 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16083 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16084 +       %EM_TARGET
16085 +     %end;
16086 +     %else %do;
16087 +       %if &em_tree_numTarget ne 0 %then %do;
16088 +         %do i=1 %to &em_tree_numTarget;
16089 +            &&em_tree_targetVars&i
16090 +         %end;
16091 +       %end;
16092 +     %end;
16093 +     );
16094 +   run;
16096 +   /* run Tree procedure */
16097 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16099 +   /* Check return code and throw exception if error is detected */
16100 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16101 +   %if &syserr %then %do;
16102 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16103 +     %goto doendm;
16104 +   %end;
16106 +   /* add decision score code if multiple targets are processed */
16107 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16108 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16109 +   %end;
16111 +   /* create outfit dataset if multiple score statements have been executed */
16112 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16114 +   /* create English Rules */
16115 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16116 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16117 +       %em_tree_makeEnglishRules;
16119 +       /* English Rules */
16120 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16122 +     %end;
16123 +   filename x;
16125 +   %doendm:
16126 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16127 +%macro EM_SetProperties;
16129 +   /* train properties */
16130 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16131 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16132 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16133 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16134 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16135 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16148 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16149 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16150 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16153 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16154 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16155 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16163 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16165 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16166 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16167 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16168 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16169 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16170 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16172 +   /* properties for interactive sample */
16173 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16174 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16175 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16176 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16178 +   /* report properties */
16179 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16180 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16181 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16182 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16183 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16184 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16185 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16186 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16187 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16188 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16189 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16190 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16191 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16193 +   /* score properties */
16194 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16195 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16197 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16199 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16200 +  %global &nLevel;
16201 +  proc dmdb batch data=&indata
16202 +    classout=_tmp_dmdbout;
16203 +    class &target;
16204 +  run;
16205 +  data _tmp_dmdbout;
16206 +    set _tmp_dmdbout;
16207 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16208 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16209 +  run;
16210 +  data _null_;
16211 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16212 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16213 +    %let dsid = %sysfunc(close(&dsid));
16214 +     call symput("&nLevel", put(&_obs, Best12.));
16215 +  run;
16217 +  proc datasets lib=work nolist;
16218 +     delete _tmp_dmdbout;
16219 +  run;
16220 +  quit;
16221 +%Mend EM_CheckBinaryTargetLevel;
16224 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16226 +  /* determine the number of obs in training data */
16227 +  proc sql;
16228 +    reset noprint;
16229 +    select count(*) into :em_nobs from &indata;
16230 +  quit;
16232 +  /* determine the number of input variables */
16233 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16234 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16236 +  /* retrieve targetEvent from decmeta */
16237 +  %let targetEvent=;
16238 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16239 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16240 +      data _null_;
16241 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16242 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16243 +      run;
16244 +    %end;
16245 +  %end;
16247 +  /* create targetTable if multipleTar eq Y */
16248 +  data temptarget;
16249 +    set &EM_DATA_VARIABLESET;
16250 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16251 +  run;
16253 + /* data sets */
16254 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16255 + %EM_GETNAME(key=EMTREE,        type=DATA);
16256 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16257 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16258 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16259 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16260 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16261 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16262 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16263 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16265 + /* files */
16266 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16267 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16269 + /* turn on pmml if requested */
16270 + %let nnpmml=0;
16271 + %if %symexist(EM_PMML) %then %do;
16272 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16273 +       %let nnpmml=1;
16275 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16276 +   %end;
16277 +%end;
16279 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16281 +%if &nnpmml or &numClassTarget %then %do;
16283 +    /* create dmdb needed for pmml generation */
16284 +    %let tree_maxlevel = 512;
16285 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16286 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16287 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16288 +      %end;
16289 +    %end;
16290 +    %if &tree_maxlevel gt 0 %then %do;
16291 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16292 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16293 +    %end;
16295 +    %let targetOrderString =;
16296 +    %let targetString = ;
16297 +    data _null_;
16298 +       length orderString nameString $10000;
16299 +       retain orderString nameString;
16300 +       set &em_data_variableset end=eof;
16301 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16302 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16303 +       %end;
16304 +       %else %do;
16305 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16306 +       %end;          select(order);
16307 +         when('')        order ='DESC';
16308 +         when('FMTASC')  order='ASCFMT';
16309 +         when('FMTDESC') order='DESFMT';
16310 +         otherwise;
16311 +       end;
16312 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16313 +       nameString = trim(nameString)!!' '!!trim(NAME);
16315 +       if eof then do;
16316 +          call symput('targetOrderString', trim(orderString));
16317 +          call symput('targetString', trim(nameString));
16318 +       end;
16319 +    run;
16321 +    %let arborkluge= "work._treeDMDB";
16323 +    proc dmdb batch data=&indata
16324 +    %if &nnpmml %then %do;
16325 +        PMML
16326 +    %end;
16327 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16329 +      %if &nnpmml %then %do;
16330 +           %if "%EM_ID" ne "" %then %do;
16331 +             id %EM_ID;
16332 +           %end;
16333 +           %if &EM_NUM_CLASS gt 0 %then %do;
16334 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16335 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16336 +                  &targetOrderString;
16337 +           %end;
16338 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16339 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16340 +           %end;
16341 +           target &targetString %EM_INTERVAL_TARGET;
16342 +           %if "%EM_FREQ" ne "" %then %do;
16343 +             freq %EM_FREQ;
16344 +           %end;
16345 +      %end;
16346 +      %else %do;
16347 +         class  &targetOrderString;
16348 +         target &targetString %EM_INTERVAL_TARGET;
16349 +      %end;
16350 +    run;
16351 +    quit;
16353 +    proc datasets lib=work nolist;
16354 +       delete classout varout;
16355 +    run;
16356 +    quit;
16358 + %end;
16361 + /* run Arbor procedure */
16362 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16363 +  proc arbor data=&INDATA
16365 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16366 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16367 +  %end;
16369 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16370 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16371 +  %end;
16373 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16374 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16375 +  %end;
16377 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16378 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16379 +  %end;
16381 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16382 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16383 +  %end;
16385 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16386 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16387 +  %end;
16388 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16389 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16390 +  %end;
16391 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16392 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16393 +  %end;
16395 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16396 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16397 +      alpha = &EM_PROPERTY_SIGLEVEL
16398 +    %end;
16399 +  %end;
16401 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16402 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16403 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16404 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16405 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16407 +        padjust =
16408 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16409 +          &chaid
16410 +        %end;
16411 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16412 +          DEPTH
16413 +        %end;
16414 +      %end;
16415 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16416 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16417 +         pvars = &num_inputs
16418 +      %end;
16419 +    %end;
16420 +  %end;
16421 +  %else %do;
16422 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16423 +         padjust = NONE
16424 +      %end;
16425 +  %end;
16427 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16428 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16429 +    Maxrules = &num_nrules
16430 +  %end;
16432 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16433 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16434 +    Maxsurrs = &num_nsurrs
16435 +  %end;
16437 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16438 +     Missing=&EM_PROPERTY_MISSINGVALUE
16439 +  %end;
16441 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16442 +     USEVARONCE
16443 +  %end;
16445 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16446 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16447 +  %end;
16450 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16451 +    event = "&targetEvent"
16452 +  %end;
16454 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16455 +     DECSEARCH
16456 +  %end;
16458 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16459 +     PRIORSSEARCH
16460 +  %end;
16462 +  %if &arbor_1 ne %then %do;
16463 +    &arbor_1
16464 +  %end;
16466 +  %if &em_arbor ne %then %do;
16467 +     &em_arbor
16468 +  %end;
16469 +  ;
16470 + %end;
16471 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16472 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16473 +       Performance &EM_PROPERTY_PERFORMANCE
16474 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16475 +         nodesize=&EM_PROPERTY_NODESAMPLE
16476 +       %end;
16477 +       ;
16478 +       interact;
16479 + %end;
16480 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16481 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16482 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16483 +    %put &em_codebar;
16484 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16485 +    %put &errormsg;
16486 +    %put &em_codebar;
16487 +    %goto doendm;
16488 +   %end;
16489 +   %else %do;
16490 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16491 +       Performance &EM_PROPERTY_PERFORMANCE
16492 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16493 +         nodesize=&EM_PROPERTY_NODESAMPLE
16494 +       %end;
16495 +       ;
16496 +       interact;
16497 +   %end;
16498 + %end;
16500 + %else %do;
16501 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16502 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16503 +    %put &em_codebar;
16504 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16505 +    %put &errormsg;
16506 +    %put &em_codebar;
16507 +    %goto doendm;
16508 +   %end;
16509 +   %else %do;
16510 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16511 +       Performance &EM_PROPERTY_PERFORMANCE
16512 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16513 +         nodesize=&EM_PROPERTY_NODESAMPLE
16514 +       %end;
16515 +       ;
16516 +        interact;
16517 +   %end;
16518 + %end;
16520 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16521 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16522 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16523 +    %end;
16525 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16526 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16527 +    %end;
16529 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16530 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16531 +    %end;
16533 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16534 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16535 +    %end;
16537 +    %if "%EM_FREQ" ne "" %then %do;
16538 +       freq %EM_FREQ;
16539 +    %end;
16541 +    %if "&multipleTar" eq "Y" %then %do;
16542 +       /* cycle through all target vars in variableset */
16543 +       %let tdsid = %sysfunc(open(temptarget));
16544 +       %if &tdsid %then %do;
16545 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16546 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16547 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16548 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16549 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16550 +             target &var / level = &lvl
16551 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16552 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16553 +             %end;
16554 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16555 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16556 +             %end;
16557 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16558 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16559 +             %end;
16560 +          %end;
16561 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16562 +       %end;
16563 +       useTarget variable = %EM_TARGET;
16564 +    %end;
16565 +    %else %do;
16566 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16567 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16568 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16569 +      %end;
16570 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16571 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16572 +      %end;
16573 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16574 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16575 +      %end;
16576 +    %end;
16578 +    %if "&multipleTar" eq "N" %then %do;
16579 +      &EM_DEC_STATEMENT;
16580 +    %end;
16582 +    Performance &EM_PROPERTY_PERFORMANCE
16583 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16584 +      nodesize=&EM_PROPERTY_NODESAMPLE
16585 +    %end;
16586 +    ;
16588 +    %if "&intFlag" eq "Y" %then %do;
16589 +       INTERACT Largest;
16590 +       Train maxnewdepth=0;
16591 +    %end;
16593 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16594 +         Assess
16595 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16596 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16597 +              %put &em_codebar;
16598 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16599 +              %put &errormsg;
16600 +              %put &em_codebar;
16601 +            %end;
16602 +            %else %do;
16603 +               Validata=&EM_IMPORT_VALIDATE
16604 +            %end;
16605 +         %end;
16606 +         %else %do;
16607 +           NoValidata
16608 +         %end;
16609 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16610 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16611 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16612 +               %if &dsid %then %do;
16613 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16614 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16615 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16616 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16617 +                   %else %do;
16618 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16619 +                      %else %let measure= MISC;
16620 +                   %end;
16621 +                 %end;
16622 +               %end;
16623 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16624 +            %end;
16625 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16626 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16627 +                 %let measure=ASE;
16628 +              %end;
16629 +              %else %do;
16630 +                 %let measure=MISC;
16631 +              %end;
16632 +            %end;
16633 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16634 +              %let measure=ASE;
16635 +            %end;
16636 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16637 +               %let measure = LIFT;
16638 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16639 +               %if &dsid %then %do;
16640 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16641 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16642 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16643 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16644 +                 %end;
16645 +               %end;
16646 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16647 +            %end;
16648 +            measure=&measure
16649 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16650 +               event = "&targetEvent"
16651 +            %end;
16652 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16653 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16654 +            %end;
16655 +         %end;
16656 +         %if "&multipleTar" eq "N" %then %do;
16657 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16658 +               CV
16659 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16660 +                 CVNITer = &EM_PROPERTY_CVNITER
16661 +               %end;
16662 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16663 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16664 +               %end;
16665 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16666 +                 CVSeed = &EM_PROPERTY_CVSEED
16667 +               %end;
16668 +            %end;
16669 +         %end;
16670 +       %end;
16671 +      ;
16673 +      %if "&intFlag" ne "Y" %then %do;
16674 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16675 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16676 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16677 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16679 +          SUBTREE &subtree
16680 +          %if "&subtree" eq "NLEAVES" %then %do;
16681 +            =&EM_PROPERTY_NSUBTREE
16682 +          %end;
16683 +          ;
16684 +        %end;
16686 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16687 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16688 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16689 +          %end;
16690 +       %end;
16691 +      %end;
16692 + %end;
16695 + MakeMacro nleaves = nleaves;
16696 + save
16697 + %if "&EM_USER_EMTREE" ne "" %then %do;
16698 +   MODEL=&EM_USER_EMTREE
16699 + %end;
16700 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16701 +   SEQUENCE=&EM_USER_OUTSEQ
16702 + %end;
16703 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16704 +   IMPORTANCE=&EM_USER_OUTIMPORT
16705 + %end;
16706 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16707 +   NODESTAT=&EM_USER_OUTNODES
16708 + %end;
16709 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16710 +   SUMMARY=&EM_USER_OUTSUMMARY
16711 + %end;
16712 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16713 +   STATSBYNODE=&EM_USER_OUTSTATS
16714 + %end;
16715 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16716 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16717 + %end;
16718 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16719 +   Pathlistnonmissing=&EM_USER_OUTPATH
16720 + %end;
16721 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16722 +   RULES = &EM_USER_OUTRULES
16723 + %end;
16724 + ;
16726 + %if "&intFlag" ne "Y" %then %do;
16728 +   %let lookupString = ;
16729 +   %if ^%symexist(EM_OPTION) %then
16730 +      %let EM_OPTION=;
16732 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16733 +      %let lookupString = LOOKUP=SELECT;
16734 +   %end;
16736 +   %let codetext=;
16737 +   %let norescodetxt=;
16739 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16740 +     %let codetext=&codetext DUMMY;
16741 +     %let norescodetxt=&norescodetxt DUMMY;
16742 +   %end;
16743 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16744 +     %let codetext=&codetext NOLEAFID;
16745 +     %let norescodetxt=&norescodetxt NOLEAFID;
16746 +   %end;
16747 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16748 +     %let norescodetxt=&norescodetxt NOPRED;
16749 +   %end;
16751 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16752 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16754 +   %if &nnpmml %then %do;
16755 +     code pmml;
16756 +   %end;
16758 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16759 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16760 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16761 +   %end;
16762 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16763 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16764 +   %end;
16765 + %end;
16767 + run;
16768 + quit;
16770 + /*%em_checkerror(); */
16771 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16772 +   /* Delete DMDB catalog */
16773 +   proc datasets lib=work nolist;
16774 +       delete _treeDMDB / mt=cat;
16775 +  run;
16776 +  %end;
16778 + %if &nnpmml %then %do;
16779 +    ods pmml close;
16780 + %end;
16782 +  %doendm:
16784 +%mend em_tree_runTreeProcedure;
16786 +%macro em_tree_createFitStats( multipleTar= );
16789 +  /* create targetTable is multipleTar eq Y */
16790 +  data temptarget;
16791 +    set &EM_DATA_VARIABLESET;
16792 +    where ROLE="TARGET";
16793 +  run;
16795 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16796 +   data &EM_USER_EMOUTFIT;
16797 +     length target $32;
16798 +     merge work.fit_train
16799 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16800 +       work.fit_valid
16801 +     %end;
16802 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16803 +       work.fit_test
16804 +     %end;
16805 +     ;
16806 +     %if "&multipleTar" eq "N" %then %do;
16807 +       target="%EM_TARGET";
16808 +     %end;
16809 +     %else %do;
16810 +       target = _TARGET_;
16811 +     %end;
16812 +     drop _NW_ _SUMW_
16813 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16814 +        _VSUMW_
16815 +     %end;
16816 +     ;
16817 +   run;
16819 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16820 +     proc datasets library=work nolist;
16821 +       delete fit_valid;
16822 +     run;
16823 +   %end;
16824 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16825 +     proc datasets library=work nolist;
16826 +       delete fit_test;
16827 +     run;
16828 +   %end;
16830 +%mend em_tree_createFitStats;
16833 +%macro em_tree_makeEnglishRules;
16835 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16836 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16838 +  /* verify that necessary tables exist and if not, skip processing */
16839 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16840 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16841 +    %goto doendm;
16842 +  %end;
16843 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16844 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16845 +    %goto doendm;
16846 +  %end;
16848 +  /* determine length of variable in outpath dataset */
16849 +  %let vlength= ;
16850 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16851 +  %if &dsid ne %then %do;
16852 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16853 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16854 +  %end;
16855 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16857 +  data tempoutpath;
16858 +    length varname $&vlength;
16859 +    retain varname;
16860 +    set &EM_USER_OUTPATH;
16862 +    if ^missing(variable) then varname=variable;
16863 +    else if ^missing(var_name) then varname=var_name;
16864 +    output;
16865 +  run;
16867 +  /* create an array of generated predicted variable names */
16868 +  %let tree_pred_vars = ;
16869 +  %let tree_pred_label = ;
16870 +  %let numpred= 0;
16871 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16873 +    data _null_;
16874 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16875 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16876 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16877 +     if eof then
16878 +       call symput('numpred', strip(put(_N_, BEST.)));
16879 +    run;
16880 +  %end;
16882 +  /* determine if NPRIORS exists in outnodes  */
16883 +  %local nprior_flag;
16884 +  data _null_;
16885 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16886 +    if eof then do;
16887 +      call symput('nprior_flag', strip(put(npriors, best.)));
16888 +    end;
16889 +  run;
16891 +  proc sort data=tempoutpath; by node; run;
16892 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16894 +  data tempoutpath;
16895 +    merge tempoutpath(in=_a) outnodes(keep= node
16896 +    %if "&nprior_flag" ne "." %then %do;
16897 +      NPRIORS
16898 +    %end;
16899 +    %else %do;
16900 +      N
16901 +    %end;
16902 +    %if &numpred gt 0 %then %do;
16903 +      %do i=1 %to &numpred;
16904 +        &&tree_pred_vars&i
16905 +      %end;
16906 +    %end;
16907 +    );
16908 +    by node;
16909 +    if _a;
16910 +  run;
16912 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16914 +  data _null_;
16915 +    file x;
16916 +    set tempoutpath;
16917 +    by node descending varname;
16918 +    retain origvar oldnode string;
16919 +    length origvar $32 oldnode 8 string $200;
16921 +    if _N_ = 1 then do;
16922 +      origvar = varname;
16923 +      oldnode = node;
16924 +    end;
16926 +    if first.node then do;
16927 +       put "&EM_CODEBAR";
16928 +       put " Node = " node;
16929 +       put "&EM_CODEBAR";
16930 +    end;
16932 +      if first.varname then do;
16933 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16934 +            if MISSING(CHARACTER_VALUE) then do;
16935 +             if NUMERIC_VALUE ne .  then do;
16936 +              if ^first.node then do;
16937 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16938 +              end;
16939 +              else do;
16940 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16941 +              end;
16942 +             end;
16943 +            end;
16944 +            else do;
16945 +              if ^first.node then do;
16946 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16947 +              end;
16948 +              else do;
16949 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16950 +              end;
16951 +             end;
16952 +         end;
16953 +         else if RELATION in ("=") then do;
16954 +            if ^first.node then do;
16955 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16956 +            end;
16957 +            else do;
16958 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16959 +            end;
16960 +         end;
16961 +         else if RELATION in ("ISMISSING") then do;
16962 +            if ^first.node then do;
16963 +              string = " AND "|| strip(varname) || " equals Missing";
16964 +            end;
16965 +            else do;
16966 +              string = "if "|| strip(varname) ||" equals Missing";
16967 +            end;
16968 +         end;
16969 +         else if RELATION in ("ISNOTMISSING") then do;
16970 +            if ^first.node then do;
16971 +              string = " AND "|| strip(varname) || " equals All Values";
16972 +            end;
16973 +            else do;
16974 +              string = "if "|| strip(varname) ||" equals All Values";
16975 +            end;
16976 +         end;
16977 +         if ^missing(varname) then origvar = varname;
16978 +         oldnode=node;
16980 +      end;
16981 +      else do;
16982 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16983 +          if MISSING(CHARACTER_VALUE) then do;
16984 +           if  NUMERIC_VALUE ne .  then do;
16985 +            if ^MISSING(string) then
16986 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16987 +            else
16988 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16989 +           end;
16990 +          end;
16991 +          else do;
16992 +            if ^MISSING(string) then
16993 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16994 +            else
16995 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16996 +          end;
16998 +         end;
16999 +         else if RELATION in ("=") then do;
17000 +           string = strip(string)||", "||strip(character_value);
17001 +         end;
17002 +         else if RELATION in ("ISMISSING") then do;
17004 +         end;
17005 +         if ^missing(varname) then origvar = varname;
17006 +         oldnode=node;
17007 +      end;
17008 +      if last.varname then do;
17009 +         if RELATION in ("ISMISSING") then do;
17010 +           if ^first.varname then do;
17011 +             string = strip(string) || " or MISSING";
17012 +           end;
17013 +         end;
17014 +         put string;
17015 +         if ^missing(varname) then origvar = varname;
17016 +         oldnode=node;
17017 +      end;
17019 +      if last.node then do;
17020 +         put "then ";
17021 +         put " Tree Node Identifier   = " node;
17023 +         %if "&nprior_flag" ne "." %then %do;
17024 +           put " Number of Observations = " NPRIORS;
17025 +         %end;
17026 +         %else %do;
17027 +           put " Number of Observations = " N;
17028 +         %end;
17030 +         %if &numpred gt 0 %then %do;
17031 +           %do i=1 %to &numpred;
17032 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17033 +           %end;
17034 +         %end;
17036 +         put " ";
17037 +         if ^missing(varname) then origvar = varname;
17038 +         oldnode=node;
17039 +      end;
17041 +  run;
17043 +  proc datasets lib=work nolist;
17044 +    delete tempoutpath outnodes;
17045 +  run;
17047 +  %doendm:
17048 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 11112   Memory used = 511K.
NOTE: There were 11112 observations read from the data set EMWS6.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS6.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS6.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 11112 observations read from the data set EMWS6.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS6.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS6.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 11112   Memory used = 511K.
NOTE: View EMWS6.EM_TREE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
NOTE: There were 11112 observations read from the data set EMWS6.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS6.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596677 kilobytes of physical memory.
NOTE: Will use 11112 out of 11112 training cases.
NOTE: Using memory pool with 176443392 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 2853968 bytes of work memory.
NOTE: The subtree sequence contains 29 subtrees. The largest has 57 nodes and 29 leaves.
NOTE: Using subtree with 13 nodes and 7 leaves.
NOTE: Using subtree with 13 nodes and 7 leaves.
NOTE: Created macro variable NLEAVES equal to 7.
NOTE: The data set EMWS6.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS6.TREE_EMTREE has 1485 observations and 4 variables.
NOTE: The data set EMWS6.TREE_OUTNODES has 13 observations and 24 variables.
NOTE: The data set EMWS6.TREE_OUTPATH has 46 observations and 7 variables.
NOTE: The data set EMWS6.TREE_OUTRULES has 203 observations and 6 variables.
NOTE: The data set EMWS6.TREE_OUTSEQ has 29 observations and 24 variables.
NOTE: The data set EMWS6.TREE_OUTSTATS has 143 observations and 5 variables.
NOTE: The data set EMWS6.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS6.TREE_OUTTOPOLOGY has 13 observations and 5 variables.
NOTE: External file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS6\Tree\TREEFLOW.sas opened.
NOTE: External file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS6\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 12 variables.
NOTE: View EMWS6.EM_TREE.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.20 seconds
 
NOTE: There were 11112 observations read from the data set EMWS6.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 10 variables.
 
 
NOTE: View EMWS6.EM_TREE.VIEW used (Total process time):
      real time           1.35 seconds
      cpu time            1.29 seconds
 
NOTE: There were 11112 observations read from the data set EMWS6.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS6.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.37 seconds
      cpu time            1.31 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS6.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS6.TREE_EMOUTFIT has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set EMWS6.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 46 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS6.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 46 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS6.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 13 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 13 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 46 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 46 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS6\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=13May2018:20:57:39,
      Create Time=13May2018:20:57:39
 
NOTE: 81 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 64.
NOTE: There were 46 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
NOTE: Fileref X has been deassigned.
17050
17051  *------------------------------------------------------------*;
17052  * End TRAIN: Tree;
17053  *------------------------------------------------------------*;
 
17054  *------------------------------------------------------------*;
17055  * Close any missing semi colons;
17056  *------------------------------------------------------------*;
17057  ;
17058  ;
17059  ;
17060  ;
17061  quit;
17062  *------------------------------------------------------------*;
17063  * Close any unbalanced quotes;
17064  *------------------------------------------------------------*;
17065  /*; *"; *'; */
17066  ;
17067  run;
17068  quit;
17069  /* Reset EM Options */
17070  options formchar="|----|+|---+=|-/\<>*";
17071  options nocenter ls=256 ps=10000;
17072  goptions reset=all device=GIF NODISPLAY;
 
17073  proc sort data=WORK.EM_USER_REPORT;
17074  by ID VIEW;
17075  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                May 13, 2018
Time:                20:57:40
*------------------------------------------------------------*
17177  %let EMEXCEPTIONSTRING=;
17178  *------------------------------------------------------------*;
17179  * SCORE: Tree;
17180  *------------------------------------------------------------*;
17181  %let EM_ACTION = SCORE;
17182  %let syscc = 0;
17183  %macro main;
17184
17185    %if %upcase(&EM_ACTION) = CREATE %then %do;
17186      filename temp catalog 'sashelp.emmodl.tree_create.source';
17187      %include temp;
17188      filename temp;
17189
17190      %em_tree_create;
17191    %end;
17192
17193     %else
17194     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17195
17196         filename temp catalog 'sashelp.emmodl.tree_train.source';
17197         %include temp;
17198         filename temp;
17199         %em_tree_train;
17200     %end;
17201
17202    %else
17203    %if %upcase(&EM_ACTION) = SCORE %then %do;
17204      filename temp catalog 'sashelp.emmodl.tree_score.source';
17205      %include temp;
17206      filename temp;
17207
17208      %em_tree_score;
17209
17210    %end;
17211
17212    %else
17213    %if %upcase(&EM_ACTION) = REPORT %then %do;
17214
17215         filename temp catalog 'sashelp.emmodl.tree_report.source';
17216         %include temp;
17217         filename temp;
17218
17219         %em_tree_report;
17220     %end;
17221
17222    %else
17223    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17224
17225         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17226         %include temp;
17227         filename temp;
17228         %EM_TREE_OPENTREEVIEWER;
17229
17230     %end;
17231
17232    %else
17233    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17234
17235         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17236         %include temp;
17237         filename temp;
17238         %EM_TREE_CLOSETREEVIEWER;
17239
17240     %end;
17241
17242
17243     %doendm:
17244  %mend main;
17245
17246  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17248 +%macro em_tree_score;
17250 +   /* determine if multiple targets will be processed */
17251 +   %let em_tree_multipleTargets=N;
17252 +   %let em_tree_numTarget=1;
17253 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17254 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17255 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17256 +         %let em_tree_multipleTargets=N;
17257 +      %end;
17258 +      %else %do;
17259 +         /* create macro array of targets  */
17260 +         data _null_;
17261 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17262 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17263 +           if eof then
17264 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17265 +        run;
17267 +        %if &em_tree_numTarget gt 1 %then %do;
17268 +           %let em_tree_multipleTargets=Y;
17269 +        %end;
17270 +      %end;
17271 +   %end;
17273 +   /* build flow and publish scoring code */
17274 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17275 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17277 +   filename treeflow "&EM_USER_TREEFLOW";
17278 +   filename treepub "&EM_USER_TREEPUBLISH";
17280 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17281 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17283 +   %em_copyfile(infref=treeflow, outfref=flowref);
17284 +   %em_copyfile(infref=treepub, outfref=pubref);
17286 +   filename treeflow;
17287 +   filename treepub;
17289 +   /* if priors are used, add code to generate unadjusted residuals in export */
17290 +   %let useAdjPriors = N;
17291 +   data _null_;
17292 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17293 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17294 +   run;
17295 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17296 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17297 +      %include temp;
17298 +      filename temp;
17300 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17301 +      filename adjref "&EM_USER_adjResidualCode";
17302 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17304 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17306 +      filename adjref;
17307 +   %end;
17309 +   /* LEAF */
17310 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17311 +      data _null_;
17312 +        file flowref mod;
17313 +        put 'drop _LEAF_;';
17314 +      run;
17316 +      data _null_;
17317 +        file pubref mod;
17318 +        put 'drop _LEAF_;';
17319 +      run;
17321 +   %end;
17323 +   filename flowref;
17324 +   filename pubref;
17326 +   /* em_metachange code */
17327 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17328 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17329 +   %end;
17331 +   /* variable selection based on importance stat    */
17332 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17333 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17334 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17335 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17336 +     %let obs = %sysfunc(fetch(&dsid));
17337 +     %do %while(&obs=0);
17338 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17339 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17340 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17341 +       %let obs = %sysfunc(fetch(&dsid));
17342 +     %end;
17343 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17344 +   %end;
17346 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17347 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17348 +    %let tree_pred_vars = ;
17349 +    %let tree_pred_lvl =;
17350 +    %let numpred= 0;
17352 +    data _null_;
17353 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17354 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17355 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17356 +     if eof then
17357 +       call symput('numpred', strip(put(_N_, BEST.)));
17358 +    run;
17359 +   %end;
17361 +   %if &numpred ne 0 %then %do;
17362 +    %do i=1 %to &numpred;
17363 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17364 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17365 +    %end;
17366 +   %end;
17368 +   /* determine if multiple targets will be processed */
17369 +   %let em_tree_multipleTargets=N;
17370 +   %let em_tree_numTarget=1;
17371 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17372 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17373 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17374 +         %let em_tree_multipleTargets=N;
17375 +      %end;
17376 +      %else %do;
17377 +        data _null_;
17378 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17379 +          if eof then
17380 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17381 +        run;
17383 +        %if &em_tree_numTarget gt 1 %then %do;
17384 +           %let em_tree_multipleTargets=Y;
17385 +        %end;
17386 +     %end;
17387 +   %end;
17389 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17390 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17392 +      /* variable importance */
17393 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17394 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17396 +         %let validexist=0;
17397 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17398 +           %let validexist=1;
17399 +         %end;
17401 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17402 +         /* and the columns may not be generated                                                                                 */
17403 +         %let em_tree_cvexists=;
17404 +         %let em_tree_surrexists=.;
17405 +         data _null_;
17406 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17407 +            if eof then do ;
17408 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17409 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17410 +            end;
17411 +         run;
17413 +         data &EM_USER_OUTIMPORT;
17414 +            set &EM_USER_OUTIMPORT;
17416 +            /* format columns based on Precison value specified */
17417 +            format importance 15.&EM_PROPERTY_PRECISION
17418 +                 %if &validexist %then %do;
17419 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17420 +                 %end;
17421 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17422 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17423 +                 %end;
17424 +            ;
17425 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17426 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17427 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17428 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17429 +                 %if "&em_tree_surrexists" ne "" %then %do;
17430 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17431 +                 %end;
17432 +                 %if &validexist %then %do;
17433 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17434 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17435 +                 %end;
17436 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17437 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17438 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17439 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17440 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17441 +                 %end;
17442 +            ;
17443 +         run;
17445 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17446 +      %end;
17447 +   %end;
17449 +   %doendm:
17450 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS6\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=13May2018:20:57:40,
      Create Time=13May2018:20:57:40
 
NOTE: 211 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS6\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=13May2018:20:57:40,
      Create Time=13May2018:20:57:40
 
NOTE: 162 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS6\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=7237,
      Last Modified=13May2018:20:57:40,
      Create Time=13May2018:20:57:40
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS6\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5867,
      Last Modified=13May2018:20:57:40,
      Create Time=13May2018:20:57:40
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS6.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS6.TREE_OUTIMPORT.
NOTE: The data set EMWS6.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
17451
17452  *------------------------------------------------------------*;
17453  * End SCORE: Tree;
17454  *------------------------------------------------------------*;
 
17455  proc sort data=WORK.EM_METACHANGE;
17456  by key uname;
17457  run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17458  filename x "D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS6\Tree\CDELTA_TRAIN.sas";
17459  data _null_;
17460  file x;
17461  put 'if upcase(NAME) = "DEMCLUSTERGROUP" then do;';
17462  put 'ROLE = "REJECTED";';
17463  put 'end;';
17464  put 'else ';
17465  put 'if upcase(NAME) = "DEMREG" then do;';
17466  put 'ROLE = "REJECTED";';
17467  put 'end;';
17468  put 'else ';
17469  put 'if upcase(NAME) = "DEMTVREG" then do;';
17470  put 'ROLE = "REJECTED";';
17471  put 'end;';
17472  put 'else ';
17473  put 'if upcase(NAME) = "PROMCLASS" then do;';
17474  put 'ROLE = "REJECTED";';
17475  put 'end;';
17476  put 'else ';
17477  put 'if upcase(NAME) = "PROMSPEND" then do;';
17478  put 'ROLE = "REJECTED";';
17479  put 'end;';
17480  put 'else ';
17481  put 'if upcase(NAME) = "PROMTIME" then do;';
17482  put 'ROLE = "REJECTED";';
17483  put 'end;';
17484  put 'else ';
17485  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
17486  put 'ROLE = "ASSESS";';
17487  put 'end;';
17488  put 'else ';
17489  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
17490  put 'ROLE = "ASSESS";';
17491  put 'end;';
17492  put 'else ';
17493  put 'if upcase(NAME) = "_NODE_" then do;';
17494  put 'ROLE = "SEGMENT";';
17495  put 'LEVEL = "NOMINAL";';
17496  put 'end;';
17497  run;
 
NOTE: The file X is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS6\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=13May2018:20:57:40,
      Create Time=13May2018:20:49:08
 
NOTE: 36 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 44.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17498  filename x;
NOTE: Fileref X has been deassigned.
 
17499  filename emflow "D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS6\Tree\EMFLOWSCORE.sas";
17500  *------------------------------------------------------------*;
17501  * Tree: Scoring DATA data;
17502  *------------------------------------------------------------*;
17503  data EMWS6.Tree_TRAIN
17504  / view=EMWS6.Tree_TRAIN
17505  ;
17506  set EMWS6.Part_TRAIN
17507  ;
17508  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS6\Tree\EMFLOWSCORE.sas.
17509 +****************************************************************;
17510 +******             DECISION TREE SCORING CODE             ******;
17511 +****************************************************************;
17512 +
17513 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17514 +LENGTH F_TargetBuy  $   12;
17515 +LENGTH I_TargetBuy  $   12;
17516 +LENGTH _WARN_  $    4;
17517 +
17518 +******              LABELS FOR NEW VARIABLES              ******;
17519 +label _NODE_ = 'Node' ;
17520 +label _LEAF_ = 'Leaf' ;
17521 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17522 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17523 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17524 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17525 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17526 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17527 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17528 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17529 +label F_TargetBuy = 'From: TargetBuy' ;
17530 +label I_TargetBuy = 'Into: TargetBuy' ;
17531 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17532 +label _WARN_ = 'Warnings' ;
17533 +
17534 +
17535 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17536 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17537 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17538 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17539 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17540 +
17541 +
17542 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17543 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17544 +
17545 +******             ASSIGN OBSERVATION TO NODE             ******;
17546 +IF  NOT MISSING(DemAge ) AND
17547 +  DemAge  <                 44.5 THEN DO;
17548 +  _NODE_  =                    2;
17549 +  _LEAF_  =                    1;
17550 +  P_TargetBuy1  =      0.5251560778553;
17551 +  P_TargetBuy0  =     0.47484392214469;
17552 +  Q_TargetBuy1  =      0.5251560778553;
17553 +  Q_TargetBuy0  =     0.47484392214469;
17554 +  V_TargetBuy1  =     0.51843817787418;
17555 +  V_TargetBuy0  =     0.48156182212581;
17556 +  I_TargetBuy  = '1' ;
17557 +  U_TargetBuy  =                    1;
17558 +  END;
17559 +ELSE DO;
17560 +  IF  NOT MISSING(DemAffl ) AND
17561 +                    12.5 <= DemAffl  THEN DO;
17562 +    _NODE_  =                    7;
17563 +    _LEAF_  =                    7;
17564 +    P_TargetBuy1  =     0.43688118811881;
17565 +    P_TargetBuy0  =     0.56311881188118;
17566 +    Q_TargetBuy1  =     0.43688118811881;
17567 +    Q_TargetBuy0  =     0.56311881188118;
17568 +    V_TargetBuy1  =     0.44949494949494;
17569 +    V_TargetBuy0  =     0.55050505050505;
17570 +    I_TargetBuy  = '0' ;
17571 +    U_TargetBuy  =                    0;
17572 +    END;
17573 +  ELSE DO;
17574 +    _ARBFMT_1 = PUT( DemGender , $1.);
17575 +     %DMNORMIP( _ARBFMT_1);
17576 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17577 +      _NODE_  =                   12;
17578 +      _LEAF_  =                    2;
17579 +      P_TargetBuy1  =     0.18772470467385;
17580 +      P_TargetBuy0  =     0.81227529532614;
17581 +      Q_TargetBuy1  =     0.18772470467385;
17582 +      Q_TargetBuy0  =     0.81227529532614;
17583 +      V_TargetBuy1  =     0.19157288667887;
17584 +      V_TargetBuy0  =     0.80842711332112;
17585 +      I_TargetBuy  = '0' ;
17586 +      U_TargetBuy  =                    0;
17587 +      END;
17588 +    ELSE DO;
17589 +      IF  NOT MISSING(DemAffl ) AND
17590 +        DemAffl  <                  8.5 THEN DO;
17591 +        IF  NOT MISSING(DemAge ) AND
17592 +          DemAge  <                 76.5 THEN DO;
17593 +          IF  NOT MISSING(DemAffl ) AND
17594 +            DemAffl  <                  5.5 THEN DO;
17595 +            _NODE_  =                   56;
17596 +            _LEAF_  =                    3;
17597 +            P_TargetBuy1  =     0.01213960546282;
17598 +            P_TargetBuy0  =     0.98786039453717;
17599 +            Q_TargetBuy1  =     0.01213960546282;
17600 +            Q_TargetBuy0  =     0.98786039453717;
17601 +            V_TargetBuy1  =     0.01904761904761;
17602 +            V_TargetBuy0  =     0.98095238095238;
17603 +            I_TargetBuy  = '0' ;
17604 +            U_TargetBuy  =                    0;
17605 +            END;
17606 +          ELSE DO;
17607 +            _NODE_  =                   57;
17608 +            _LEAF_  =                    4;
17609 +            P_TargetBuy1  =      0.0456333595594;
17610 +            P_TargetBuy0  =     0.95436664044059;
17611 +            Q_TargetBuy1  =      0.0456333595594;
17612 +            Q_TargetBuy0  =     0.95436664044059;
17613 +            V_TargetBuy1  =     0.03894080996884;
17614 +            V_TargetBuy0  =     0.96105919003115;
17615 +            I_TargetBuy  = '0' ;
17616 +            U_TargetBuy  =                    0;
17617 +            END;
17618 +          END;
17619 +        ELSE DO;
17620 +          _NODE_  =                   47;
17621 +          _LEAF_  =                    5;
17622 +          P_TargetBuy1  =     0.09881422924901;
17623 +          P_TargetBuy0  =     0.90118577075098;
17624 +          Q_TargetBuy1  =     0.09881422924901;
17625 +          Q_TargetBuy0  =     0.90118577075098;
17626 +          V_TargetBuy1  =      0.0813953488372;
17627 +          V_TargetBuy0  =     0.91860465116279;
17628 +          I_TargetBuy  = '0' ;
17629 +          U_TargetBuy  =                    0;
17630 +          END;
17631 +        END;
17632 +      ELSE DO;
17633 +        _NODE_  =                   27;
17634 +        _LEAF_  =                    6;
17635 +        P_TargetBuy1  =     0.09840425531914;
17636 +        P_TargetBuy0  =     0.90159574468085;
17637 +        Q_TargetBuy1  =     0.09840425531914;
17638 +        Q_TargetBuy0  =     0.90159574468085;
17639 +        V_TargetBuy1  =     0.09423076923076;
17640 +        V_TargetBuy0  =     0.90576923076923;
17641 +        I_TargetBuy  = '0' ;
17642 +        U_TargetBuy  =                    0;
17643 +        END;
17644 +      END;
17645 +    END;
17646 +  END;
17647 +
17648 +*****  RESIDUALS R_ *************;
17649 +IF  F_TargetBuy  NE '1'
17650 +AND F_TargetBuy  NE '0'  THEN DO;
17651 +        R_TargetBuy1  = .;
17652 +        R_TargetBuy0  = .;
17653 + END;
17654 + ELSE DO;
17655 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17656 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17657 +       SELECT( F_TargetBuy  );
17658 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17659 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17660 +       END;
17661 + END;
17662 +
17663 +*****  DECISION VARIABLES *******;
17664 +
17665 +*** Decision Processing;
17666 +label D_TARGETBUY = 'Decision: TargetBuy' ;
17667 +label EP_TARGETBUY = 'Expected Profit: TargetBuy' ;
17668 +label BP_TARGETBUY = 'Best Profit: TargetBuy' ;
17669 +label CP_TARGETBUY = 'Computed Profit: TargetBuy' ;
17670 +
17671 +length D_TARGETBUY $ 7;
17672 +
17673 +D_TARGETBUY = ' ';
17674 +EP_TARGETBUY = .;
17675 +BP_TARGETBUY = .;
17676 +CP_TARGETBUY = .;
17677 +
17678 +*** Compute Expected Consequences and Choose Decision;
17679 +_decnum = 1; drop _decnum;
17680 +
17681 +D_TARGETBUY = '1' ;
17682 +EP_TARGETBUY = P_TargetBuy1 * 15 + P_TargetBuy0 * -0.5;
17683 +drop _sum;
17684 +_sum = P_TargetBuy1 * 0 + P_TargetBuy0 * 0;
17685 +if _sum > EP_TARGETBUY + 6.82121E-12 then do;
17686 +   EP_TARGETBUY = _sum; _decnum = 2;
17687 +   D_TARGETBUY = '0' ;
17688 +end;
17689 +
17690 +*** Decision Matrix;
17691 +array TREEdema [2,2] _temporary_ (
17692 +/* row 1 */  15 0
17693 +/* row 2 */  -0.5 0
17694 +);
17695 +
17696 +*** Find Index of Target Category;
17697 +drop _tarnum; select( F_TargetBuy );
17698 +   when('1' ) _tarnum = 1;
17699 +   when('0' ) _tarnum = 2;
17700 +   otherwise _tarnum = 0;
17701 +end;
17702 +if _tarnum <= 0 then goto TREEdeex;
17703 +
17704 +*** Computed Consequence of Chosen Decision;
17705 +CP_TARGETBUY = TREEdema [_tarnum,_decnum];
17706 +
17707 +*** Best Possible Consequence of Any Decision without Cost;
17708 +array TREEdebe [2] _temporary_ ( 15 0);
17709 +BP_TARGETBUY = TREEdebe [_tarnum];
17710 +
17711 +
17712 +TREEdeex:;
17713 +
17714 +*** End Decision Processing ;
17715 +
17716 +****************************************************************;
17717 +******          END OF DECISION TREE SCORING CODE         ******;
17718 +****************************************************************;
17719 +
17720 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17721  run;
 
NOTE: DATA STEP view saved on file EMWS6.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
17722  quit;
17723  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17724  filename emflow "D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS6\Tree\EMFLOWSCORE.sas";
17725  *------------------------------------------------------------*;
17726  * Tree: Scoring VALIDATE data;
17727  *------------------------------------------------------------*;
17728  data EMWS6.Tree_VALIDATE
17729  / view=EMWS6.Tree_VALIDATE
17730  ;
17731  set EMWS6.Part_VALIDATE
17732  ;
17733  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS6\Tree\EMFLOWSCORE.sas.
17734 +****************************************************************;
17735 +******             DECISION TREE SCORING CODE             ******;
17736 +****************************************************************;
17737 +
17738 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17739 +LENGTH F_TargetBuy  $   12;
17740 +LENGTH I_TargetBuy  $   12;
17741 +LENGTH _WARN_  $    4;
17742 +
17743 +******              LABELS FOR NEW VARIABLES              ******;
17744 +label _NODE_ = 'Node' ;
17745 +label _LEAF_ = 'Leaf' ;
17746 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17747 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17748 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17749 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17750 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17751 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17752 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17753 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17754 +label F_TargetBuy = 'From: TargetBuy' ;
17755 +label I_TargetBuy = 'Into: TargetBuy' ;
17756 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17757 +label _WARN_ = 'Warnings' ;
17758 +
17759 +
17760 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17761 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17762 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17763 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17764 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17765 +
17766 +
17767 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17768 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17769 +
17770 +******             ASSIGN OBSERVATION TO NODE             ******;
17771 +IF  NOT MISSING(DemAge ) AND
17772 +  DemAge  <                 44.5 THEN DO;
17773 +  _NODE_  =                    2;
17774 +  _LEAF_  =                    1;
17775 +  P_TargetBuy1  =      0.5251560778553;
17776 +  P_TargetBuy0  =     0.47484392214469;
17777 +  Q_TargetBuy1  =      0.5251560778553;
17778 +  Q_TargetBuy0  =     0.47484392214469;
17779 +  V_TargetBuy1  =     0.51843817787418;
17780 +  V_TargetBuy0  =     0.48156182212581;
17781 +  I_TargetBuy  = '1' ;
17782 +  U_TargetBuy  =                    1;
17783 +  END;
17784 +ELSE DO;
17785 +  IF  NOT MISSING(DemAffl ) AND
17786 +                    12.5 <= DemAffl  THEN DO;
17787 +    _NODE_  =                    7;
17788 +    _LEAF_  =                    7;
17789 +    P_TargetBuy1  =     0.43688118811881;
17790 +    P_TargetBuy0  =     0.56311881188118;
17791 +    Q_TargetBuy1  =     0.43688118811881;
17792 +    Q_TargetBuy0  =     0.56311881188118;
17793 +    V_TargetBuy1  =     0.44949494949494;
17794 +    V_TargetBuy0  =     0.55050505050505;
17795 +    I_TargetBuy  = '0' ;
17796 +    U_TargetBuy  =                    0;
17797 +    END;
17798 +  ELSE DO;
17799 +    _ARBFMT_1 = PUT( DemGender , $1.);
17800 +     %DMNORMIP( _ARBFMT_1);
17801 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17802 +      _NODE_  =                   12;
17803 +      _LEAF_  =                    2;
17804 +      P_TargetBuy1  =     0.18772470467385;
17805 +      P_TargetBuy0  =     0.81227529532614;
17806 +      Q_TargetBuy1  =     0.18772470467385;
17807 +      Q_TargetBuy0  =     0.81227529532614;
17808 +      V_TargetBuy1  =     0.19157288667887;
17809 +      V_TargetBuy0  =     0.80842711332112;
17810 +      I_TargetBuy  = '0' ;
17811 +      U_TargetBuy  =                    0;
17812 +      END;
17813 +    ELSE DO;
17814 +      IF  NOT MISSING(DemAffl ) AND
17815 +        DemAffl  <                  8.5 THEN DO;
17816 +        IF  NOT MISSING(DemAge ) AND
17817 +          DemAge  <                 76.5 THEN DO;
17818 +          IF  NOT MISSING(DemAffl ) AND
17819 +            DemAffl  <                  5.5 THEN DO;
17820 +            _NODE_  =                   56;
17821 +            _LEAF_  =                    3;
17822 +            P_TargetBuy1  =     0.01213960546282;
17823 +            P_TargetBuy0  =     0.98786039453717;
17824 +            Q_TargetBuy1  =     0.01213960546282;
17825 +            Q_TargetBuy0  =     0.98786039453717;
17826 +            V_TargetBuy1  =     0.01904761904761;
17827 +            V_TargetBuy0  =     0.98095238095238;
17828 +            I_TargetBuy  = '0' ;
17829 +            U_TargetBuy  =                    0;
17830 +            END;
17831 +          ELSE DO;
17832 +            _NODE_  =                   57;
17833 +            _LEAF_  =                    4;
17834 +            P_TargetBuy1  =      0.0456333595594;
17835 +            P_TargetBuy0  =     0.95436664044059;
17836 +            Q_TargetBuy1  =      0.0456333595594;
17837 +            Q_TargetBuy0  =     0.95436664044059;
17838 +            V_TargetBuy1  =     0.03894080996884;
17839 +            V_TargetBuy0  =     0.96105919003115;
17840 +            I_TargetBuy  = '0' ;
17841 +            U_TargetBuy  =                    0;
17842 +            END;
17843 +          END;
17844 +        ELSE DO;
17845 +          _NODE_  =                   47;
17846 +          _LEAF_  =                    5;
17847 +          P_TargetBuy1  =     0.09881422924901;
17848 +          P_TargetBuy0  =     0.90118577075098;
17849 +          Q_TargetBuy1  =     0.09881422924901;
17850 +          Q_TargetBuy0  =     0.90118577075098;
17851 +          V_TargetBuy1  =      0.0813953488372;
17852 +          V_TargetBuy0  =     0.91860465116279;
17853 +          I_TargetBuy  = '0' ;
17854 +          U_TargetBuy  =                    0;
17855 +          END;
17856 +        END;
17857 +      ELSE DO;
17858 +        _NODE_  =                   27;
17859 +        _LEAF_  =                    6;
17860 +        P_TargetBuy1  =     0.09840425531914;
17861 +        P_TargetBuy0  =     0.90159574468085;
17862 +        Q_TargetBuy1  =     0.09840425531914;
17863 +        Q_TargetBuy0  =     0.90159574468085;
17864 +        V_TargetBuy1  =     0.09423076923076;
17865 +        V_TargetBuy0  =     0.90576923076923;
17866 +        I_TargetBuy  = '0' ;
17867 +        U_TargetBuy  =                    0;
17868 +        END;
17869 +      END;
17870 +    END;
17871 +  END;
17872 +
17873 +*****  RESIDUALS R_ *************;
17874 +IF  F_TargetBuy  NE '1'
17875 +AND F_TargetBuy  NE '0'  THEN DO;
17876 +        R_TargetBuy1  = .;
17877 +        R_TargetBuy0  = .;
17878 + END;
17879 + ELSE DO;
17880 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17881 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17882 +       SELECT( F_TargetBuy  );
17883 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17884 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17885 +       END;
17886 + END;
17887 +
17888 +*****  DECISION VARIABLES *******;
17889 +
17890 +*** Decision Processing;
17891 +label D_TARGETBUY = 'Decision: TargetBuy' ;
17892 +label EP_TARGETBUY = 'Expected Profit: TargetBuy' ;
17893 +label BP_TARGETBUY = 'Best Profit: TargetBuy' ;
17894 +label CP_TARGETBUY = 'Computed Profit: TargetBuy' ;
17895 +
17896 +length D_TARGETBUY $ 7;
17897 +
17898 +D_TARGETBUY = ' ';
17899 +EP_TARGETBUY = .;
17900 +BP_TARGETBUY = .;
17901 +CP_TARGETBUY = .;
17902 +
17903 +*** Compute Expected Consequences and Choose Decision;
17904 +_decnum = 1; drop _decnum;
17905 +
17906 +D_TARGETBUY = '1' ;
17907 +EP_TARGETBUY = P_TargetBuy1 * 15 + P_TargetBuy0 * -0.5;
17908 +drop _sum;
17909 +_sum = P_TargetBuy1 * 0 + P_TargetBuy0 * 0;
17910 +if _sum > EP_TARGETBUY + 6.82121E-12 then do;
17911 +   EP_TARGETBUY = _sum; _decnum = 2;
17912 +   D_TARGETBUY = '0' ;
17913 +end;
17914 +
17915 +*** Decision Matrix;
17916 +array TREEdema [2,2] _temporary_ (
17917 +/* row 1 */  15 0
17918 +/* row 2 */  -0.5 0
17919 +);
17920 +
17921 +*** Find Index of Target Category;
17922 +drop _tarnum; select( F_TargetBuy );
17923 +   when('1' ) _tarnum = 1;
17924 +   when('0' ) _tarnum = 2;
17925 +   otherwise _tarnum = 0;
17926 +end;
17927 +if _tarnum <= 0 then goto TREEdeex;
17928 +
17929 +*** Computed Consequence of Chosen Decision;
17930 +CP_TARGETBUY = TREEdema [_tarnum,_decnum];
17931 +
17932 +*** Best Possible Consequence of Any Decision without Cost;
17933 +array TREEdebe [2] _temporary_ ( 15 0);
17934 +BP_TARGETBUY = TREEdebe [_tarnum];
17935 +
17936 +
17937 +TREEdeex:;
17938 +
17939 +*** End Decision Processing ;
17940 +
17941 +****************************************************************;
17942 +******          END OF DECISION TREE SCORING CODE         ******;
17943 +****************************************************************;
17944 +
17945 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17946  run;
 
NOTE: DATA STEP view saved on file EMWS6.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17947  quit;
17948  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS6.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
17950  proc sort data=WORK.EM_USER_REPORT;
17951  by ID VIEW;
17952  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17953  *------------------------------------------------------------*;
17954  * Tree: Computing metadata for TRAIN data;
17955  *------------------------------------------------------------*;
 
NOTE: View EMWS6.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18336  data EMWS6.Tree_EMINFO;
18337  length TARGET KEY $32 DATA $43;
18338  input TARGET KEY DATA $;
18339  cards;
 
NOTE: The data set EMWS6.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18343  run;
18344  proc sort data = EMWS6.Tree_EMINFO NOTHREADS;
18345  by TARGET KEY;
18346  run;
 
NOTE: There were 3 observations read from the data set EMWS6.TREE_EMINFO.
NOTE: The data set EMWS6.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18347  proc sort data = EMWS6.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18348  by TARGET KEY;
18349  run;
 
NOTE: There were 3 observations read from the data set EMWS6.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
18350  proc sort data = EMWS6.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18351  by TARGET KEY;
18352  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS6.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18353  data EMWS6.Tree_EMINFO;
18354  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18355  by TARGET KEY;
18356  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS6.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18357  proc datasets lib=work nolist;
18358  delete TEMP_INFO SORTEDEMINFO;
18359  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18360  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS6.TREE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS6.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                May 13, 2018
Time:                20:57:42
*------------------------------------------------------------*
18384  data EMWS6.Tree_EMOUTFIT;
18385  set EMWS6.Tree_EMOUTFIT;
18386  length TargetLabel $200;
18387  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18388  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
18389  run;
 
NOTE: There were 1 observations read from the data set EMWS6.TREE_EMOUTFIT.
NOTE: The data set EMWS6.TREE_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18390  proc sort data=EMWS6.Tree_EMREPORTFIT nothreads;
18391  by TARGET;
18392  run;
 
NOTE: There were 10 observations read from the data set EMWS6.TREE_EMREPORTFIT.
NOTE: The data set EMWS6.TREE_EMREPORTFIT has 10 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18393  %let _EMwarndup = 0;
18394  %let _EMtargetdup =;
18395  %let _EMASEtargetdup =;
18396  data _null_;
18397  set EMWS6.Tree_EMOUTFIT;
18398  if .<_ASE_<0.000001 then do;
18399  call symput('_EMwarndup', '1');
18400  call symput('_EMtargetdup', target);
18401  call symput('_EMASEtargetdup', put(_ASE_, best.));
18402  end;
18403  run;
 
NOTE: There were 1 observations read from the data set EMWS6.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18404  %let EMEXCEPTIONSTRING=;
18405  *------------------------------------------------------------*;
18406  * REPORT: Tree;
18407  *------------------------------------------------------------*;
18408  %let EM_ACTION = REPORT;
18409  %let syscc = 0;
18410  %macro main;
18411
18412    %if %upcase(&EM_ACTION) = CREATE %then %do;
18413      filename temp catalog 'sashelp.emmodl.tree_create.source';
18414      %include temp;
18415      filename temp;
18416
18417      %em_tree_create;
18418    %end;
18419
18420     %else
18421     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18422
18423         filename temp catalog 'sashelp.emmodl.tree_train.source';
18424         %include temp;
18425         filename temp;
18426         %em_tree_train;
18427     %end;
18428
18429    %else
18430    %if %upcase(&EM_ACTION) = SCORE %then %do;
18431      filename temp catalog 'sashelp.emmodl.tree_score.source';
18432      %include temp;
18433      filename temp;
18434
18435      %em_tree_score;
18436
18437    %end;
18438
18439    %else
18440    %if %upcase(&EM_ACTION) = REPORT %then %do;
18441
18442         filename temp catalog 'sashelp.emmodl.tree_report.source';
18443         %include temp;
18444         filename temp;
18445
18446         %em_tree_report;
18447     %end;
18448
18449    %else
18450    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18451
18452         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18453         %include temp;
18454         filename temp;
18455         %EM_TREE_OPENTREEVIEWER;
18456
18457     %end;
18458
18459    %else
18460    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18461
18462         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18463         %include temp;
18464         filename temp;
18465         %EM_TREE_CLOSETREEVIEWER;
18466
18467     %end;
18468
18469
18470     %doendm:
18471  %mend main;
18472
18473  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18475 +%macro em_tree_makePlotDs( multipleTar= );
18477 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18478 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18479 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18480 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18482 +  /* determine if validation statistics will be displayed */
18483 +  %let validflag=N;
18484 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18485 +    /* determine if validation data exists */
18486 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18487 +      %let validflag=Y;
18488 +    %end;
18489 +  %end;
18491 +   /* retrieve name of decmeta even in presence of multiple targets */
18492 +   %let decmeta = ;
18493 +   %if &EM_DEC_DECMETA eq %then %do;
18494 +     data _Target;
18495 +       set &em_data_variableset;
18496 +       where ROLE='TARGET' and USE in('D', 'Y');
18497 +       keep NAME;
18498 +     run;
18499 +     proc sort data=_Target;
18500 +       by NAME;
18501 +     run;
18502 +     proc sort data=EM_TARGETDECINFO;
18503 +       by TARGET;
18504 +     run;
18505 +     data _Target;
18506 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18507 +       by NAME;
18508 +       if _a then do;
18509 +         call symput('decmeta', trim(DECMETA));
18510 +       end;
18511 +     run;
18512 +     proc delete data=_Target;run;
18513 +   %end;
18514 +   %else %let decmeta = &EM_DEC_DECMETA;
18517 +  /* retrieve targetEvent from decmeta */
18518 +  %let targetEvent=;
18519 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18520 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18521 +      data _null_;
18522 +       set &DECMETA(where=(_TYPE_="TARGET"));
18523 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18524 +      run;
18525 +    %end;
18526 +  %end;
18528 +  /* retrieve predicted var for targetEvent from decmeta */
18529 +  %let predTarget=;
18530 +  %let predLvl=;
18531 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18532 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18533 +      data _null_;
18534 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18535 +       call symput('predTarget', strip(VARIABLE));
18536 +       call symput('predLvl', strip(LEVEL));
18537 +      run;
18538 +    %end;
18539 +  %end;
18540 +  %else %do;
18541 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18542 +      data _null_;
18543 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18544 +       call symput('predTarget', strip(VARIABLE));
18545 +      run;
18546 +    %end;
18547 +  %end;
18549 +  /* create BelowText value */
18550 +  data belowtext;
18551 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18552 +    keep node belowtext;
18553 +  run;
18555 +  /* replace belowtext with variable label if it exists */
18556 +  data belowtext2;
18557 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18558 +    keep node belowtextlbl;
18559 +  run;
18561 +  proc sort data=belowtext; by node; run;
18562 +  proc sort data=belowtext2; by node; run;
18564 +  data belowtext;
18565 +    merge belowtext belowtext2(in=_a);
18566 +    by node;
18567 +    if _a then belowtext=belowtextlbl;
18568 +    keep node belowtext;
18569 +  run;
18571 +  /* create AboveText value */
18572 +  data abovetext;
18573 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18574 +  run;
18575 +  proc sort data=abovetext; by node numeric_value; run;
18577 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18578 +  data abovetext;
18579 +    set abovetext(rename=(node=parent));
18580 +    by parent numeric_value;
18581 +    retain abovetext tempstring flag branch origval origchar ;
18582 +    length abovetext $256;
18583 +    length tempstring origchar $64;
18585 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18586 +      if first.parent then do;
18587 +        if missing(character_value) then do;
18588 +          numeric_value = round(numeric_value, &sp_precision);
18589 +          abovetext = "< "||strip(NUMERIC_VALUE);
18590 +          branch = 1;
18591 +          origval = numeric_value;
18592 +          output;
18593 +        end;
18594 +        else do;
18595 +          abovetext = "< "||strip(CHARACTER_VALUE);
18596 +          branch = 1;
18597 +          origchar = character_value;
18598 +          output;
18599 +        end;
18601 +        if first.parent AND last.parent then do;
18602 +          if missing(character_value) then do;
18603 +            numeric_value = round(numeric_value, &sp_precision);
18604 +            branch = branch + 1;
18605 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18606 +            output;
18607 +          end;
18608 +          else do;
18609 +            branch = branch + 1;
18610 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18611 +            output;
18612 +          end;
18613 +        end;
18614 +      end;
18615 +      else if last.parent then do;
18616 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18617 +          if missing(character_value) then do;
18618 +            numeric_value = round(numeric_value, &sp_precision);
18619 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18620 +          end;
18621 +          else do;
18622 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18623 +          end;
18624 +          branch = branch + 1;
18625 +          output;
18627 +          if missing(character_value) then do;
18628 +            numeric_value = round(numeric_value, &sp_precision);
18629 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18630 +          end;
18631 +          else do;
18632 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18633 +          end;
18634 +          branch = branch + 1;
18635 +          output;
18636 +        end;
18637 +        else do;
18638 +          if missing(character_value) then do;
18639 +            numeric_value = round(numeric_value, &sp_precision);
18640 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18641 +          end;
18642 +          else do;
18643 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18644 +          end;
18645 +          branch = branch + 1;
18646 +          output;
18647 +        end;
18648 +      end;
18649 +      else do;
18650 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18651 +          if missing(character_value) then do;
18652 +            numeric_value = round(numeric_value,&sp_precision);
18653 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18654 +            origval = numeric_value;
18655 +          end;
18656 +          else do;
18657 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18658 +            origchar = character_value;
18659 +          end;
18660 +          branch = branch + 1;
18661 +          output;
18663 +        end;
18664 +        else do;
18665 +          if missing(character_value) then do;
18666 +            numeric_value = round(numeric_value, &sp_precision);
18667 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18668 +            origval = numeric_value;
18669 +          end;
18670 +          else do;
18671 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18672 +            origval = character_value;
18673 +          end;
18674 +          branch = branch + 1;
18675 +          output;
18676 +        end;
18677 +      end;
18678 +    end;
18679 +    else do;
18680 +       if first.numeric_value then do;
18681 +         flag = 0;
18682 +         abovetext = strip(CHARACTER_VALUE);
18683 +         branch = numeric_value;
18684 +         if first.numeric_value AND last.numeric_value then do;
18685 +           output;
18686 +         end;
18687 +       end;
18688 +       else if last.numeric_value then do;
18689 +         if flag=0 then do;
18690 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18691 +           length = length(strip(tempstring));
18692 +           if length < 32 then do;
18693 +             abovetext = strip(tempstring);
18694 +           end;
18695 +           else do;
18696 +             abovetext = strip(abovetext)||", ...";
18697 +             flag = 1;
18698 +           end;
18699 +         end;
18700 +         branch = numeric_value;
18701 +         output;
18702 +       end;
18703 +       else do;
18704 +         if flag=0 then do;
18705 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18706 +           length = length(strip(tempstring));
18707 +           if length < 32 then do;
18708 +             abovetext = strip(tempstring);
18709 +           end;
18710 +           else do;
18711 +             abovetext = strip(abovetext)||", ...";
18712 +             flag=1;
18713 +           end;
18714 +         end;
18715 +         branch = numeric_value;
18716 +       end;
18717 +    end;
18718 +    keep parent branch abovetext;
18719 +  run;
18721 +  /* Missing value to abovetext */
18722 +  data tempmissing;
18723 +    set &EM_USER_OUTRULES;
18724 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18725 +    rename node=parent numeric_value=branch character_value=misschar;
18726 +  run;
18729 +  proc sort data=abovetext; by parent branch; run;
18730 +  proc sort data=tempmissing; by parent branch; run;
18731 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18733 +  data tempoutnodes;
18734 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18735 +    by parent branch;
18736 +    length traintotal validtotal 8;
18737 +    retain traintotal validtotal;
18739 +    if _a then do;
18740 +      if ^MISSING(abovetext) then do;
18741 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18742 +      end;
18743 +      else do;
18744 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18745 +      end;
18746 +    end;
18747 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18749 +    if node=1 then do;
18750 +      traintotal = N;
18751 +      validtotal=VN;
18752 +    end;
18754 +    drop role rank stat misschar belowtext;
18755 +  run;
18756 +  proc sort data=tempoutnodes; by node; run;
18757 +  proc sort data=belowtext; by node; run;
18759 +  data tempoutnodes;
18760 +    merge tempoutnodes belowtext;
18761 +    by node;
18763 +  run;
18765 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18766 +  %let adjusted = N;
18767 +  %let npriors = 0;
18768 +  data _null_ ;
18769 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18770 +    if eof then do ;
18771 +      call symput("npriors" , strip(put(_N_,best.))) ;
18772 +    end;
18773 +  run;
18774 +  %if &npriors gt 0 %then %let adjusted=Y;
18777 +  /* create a table with targetUsed and targetLevel columns for each node */
18778 +  data temptarmeta;
18779 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18780 +    %if &multipleTar eq N %then %do;
18781 +      AND USE in ('D', 'Y')
18782 +    %end;
18783 +    ));
18784 +    length TARGET $32;
18785 +    Target=name;
18786 +    keep target level;
18787 +  run;
18789 +  %if &multipleTar eq Y %then %do;
18790 +    data temptargetused;
18791 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18792 +      keep node target;
18793 +    run;
18794 +    proc sort data=temptargetused; by target; run;
18795 +    proc sort data=temptarmeta; by target; run;
18796 +    data temptargetused;
18797 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18798 +      by target;
18799 +      if _a and _b;
18800 +    run;
18801 +  %end;
18802 +  %else %do;
18803 +    data temptargetused;
18804 +      set &EM_USER_OUTSTATS;
18805 +      length target $32 tarlevel $10;
18806 +      target="%EM_TARGET";
18807 +      tarlevel="%EM_TARGET_LEVEL";
18808 +      keep node target tarlevel;
18809 +    run;
18810 +    proc sort data=temptargetused nodupkey; by node; run;
18811 +  %end;
18813 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
18814 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18815 +  proc sort data=temptargetused; by node; run;
18818 +  /* create tables for all interval targets as well as all class targets */
18819 +  data tempinterval tempclass;
18820 +    merge tempoutstats temptargetused( rename=(target=targetused));
18821 +    by node;
18822 +    %if "&multipleTar" eq "Y" %then %do;
18823 +      if ((missing(Target)) OR (target=targetused ));
18824 +    %end;
18826 +    if tarlevel="INTERVAL" then output tempinterval;
18827 +    else output tempclass;
18828 +  run;
18830 +  /* initialize intTarget and classTarget flags */
18831 +  %let em_intNobs =0;
18832 +  %let em_classNobs = 0;
18833 +  %let em_intTarget= N;
18834 +  %let em_classTarget= N;
18836 +  proc sql;
18837 +    reset noprint;
18838 +    select count(*) into :em_intNobs from tempinterval;
18839 +  quit;
18840 +  proc sql;
18841 +    reset noprint;
18842 +    select count(*) into :em_classNobs from tempclass;
18843 +  quit;
18845 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18846 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18848 +  /* retrieve all information for interval targets */
18849 +  %if &em_intTarget eq Y %then %do;
18851 +    /* determine if leaf variable exists */
18852 +    %let dsid=%sysfunc(open(tempinterval,i));
18853 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18854 +    %let rc=%sysfunc(close(&dsid));
18856 +    proc transpose data=tempinterval
18857 +      %if &leafexists %then %do;
18858 +        (drop=leaf)
18859 +      %end;
18860 +      %if &validexist %then %do;
18861 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18862 +      %end;
18863 +      %else %do;
18864 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18865 +      %end;
18866 +      by node;
18867 +      id statname;
18868 +    run;
18869 +    data tempinterval;
18870 +      set tempinterval;
18871 +      if missing(N) then delete;
18872 +    run;
18873 +  %end;
18875 +  /* retrieve all information for class targets */
18876 +  %if &em_classTarget eq Y %then %do;
18877 +    proc sort data=tempclass; by node category; run;
18878 +    %if &validflag eq N %then %do;
18879 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18880 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18881 +    %end;
18882 +    %else %do;
18883 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18884 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18885 +    %end;
18886 +      set tempclass;
18888 +      %if &validflag eq N %then %do;
18889 +        %if "&adjusted" eq "N" %then %do;
18890 +          if statname="N" then output tempn;
18891 +        %end;
18892 +        %else %do;
18893 +          if statname="NPRIORS" then output tempn;
18894 +        %end;
18895 +        else if statname="PREDICTION" then output temppredict;
18896 +        else if statname="PROBABILITY" then output tempprob;
18897 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18898 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18899 +      %end;
18900 +      %else %do;
18901 +        %if "&adjusted" eq "N" %then %do;
18902 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18903 +        %end;
18904 +        %else %do;
18905 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18906 +        %end;
18907 +        else if statname="PREDICTION" then output temppredict;
18908 +        else if statname="PROBABILITY" then output tempprob;
18909 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18910 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18911 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18912 +      %end;
18913 +    run;
18916 +    /* determine if profit/loss exists in tempprofit */
18917 +    %let em_profitflag=0;
18918 +    %let em_lossflag=0;
18919 +    proc sql;
18920 +      reset noprint;
18921 +      select count(*) into :em_profitflag from tempprofit;
18922 +    quit;
18923 +    proc sql;
18924 +      reset noprint;
18925 +      select count(*) into :em_lossflag from temploss;
18926 +    quit;
18928 +    %if &validFlag eq Y %then %do;
18929 +      proc transpose data=tempn
18930 +        %if "&adjusted" eq "N" %then %do;
18931 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18932 +        %end;
18933 +        %else %do;
18934 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18935 +        %end;
18936 +        by node;
18937 +        id statname;
18938 +      run;
18939 +      %if &em_profitflag ne 0 %then %do;
18940 +        proc transpose data=tempprofit out=tempprofit;
18941 +          by node category;
18942 +          id statname ;
18943 +        run;
18944 +      %end;
18945 +      %if &em_lossflag ne 0 %then %do;
18946 +        proc transpose data=temploss out=temploss;
18947 +          by node category;
18948 +          id statname ;
18949 +        run;
18950 +      %end;
18951 +      data tempprob;
18952 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18953 +        by node
18954 +        %if &multipleTar eq Y %then %do;
18955 +          target
18956 +        %end;
18957 +        category;
18958 +      run;
18959 +    %end;
18961 +    /* store percentcorrect value */
18962 +    data temppredict;
18963 +      merge tempprob temppredict(in=_a);
18964 +      by node category;
18965 +      if _a then do;
18966 +        percentCorrect = statvalue;
18967 +        %if &validFlag eq Y %then %do;
18968 +          vpercentCorrect= vstatvalue;
18969 +        %end;
18970 +      end;
18971 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18972 +      %if &validFlag eq Y %then %do;
18973 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18974 +      %end;
18975 +      ;
18976 +      if missing(percentCorrect) then delete;
18977 +      drop target;
18978 +    run;
18980 +    /* build profittext */
18981 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18982 +      data tempprofittext(keep= node profittext profitloss);
18983 +        length profittext $800 profitloss 8.;
18984 +        retain profittext profitloss;
18986 +        merge tempprob
18987 +        %if &em_profitflag ne 0 %then %do;
18988 +          tempprofit
18989 +        %end;
18990 +        %else %if &em_lossflag ne 0 %then %do;
18991 +          temploss
18992 +        %end;
18993 +        ;
18994 +        by node category;
18996 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18997 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18998 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18999 +          %let profittype = ALL;
19000 +        %end;
19002 +        /* create the profitloss variable for nodecolor if selected */
19003 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19005 +        %if "&profittype" eq "ALL" %then %do;
19006 +          if strip(CATEGORY)="&targetEvent" then do;
19007 +            profitloss=statvalue;
19008 +          end;
19009 +          if first.node then do;
19010 +            %if &validFlag eq N %then %do;
19011 +             %if &em_profitflag ne 0 %then %do;
19012 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19013 +             %end;
19014 +             %if &em_lossflag ne 0 %then %do;
19015 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19016 +             %end;
19017 +            %end;
19018 +            %else %do;
19019 +             %if &em_profitflag ne 0 %then %do;
19020 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19020!+;
19021 +             %end;
19022 +             %if &em_lossflag ne 0 %then %do;
19023 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19024 +             %end;
19025 +            %end;
19026 +          end;
19027 +          else if last.node then do;
19028 +            %if &validFlag eq N %then %do;
19029 +             %if &em_profitflag ne 0 %then %do;
19030 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19031 +             %end;
19032 +             %if &em_lossflag ne 0 %then %do;
19033 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19034 +             %end;
19035 +             /*if CATEGORY="&targetEvent" then do;
19036 +               profitloss=statvalue;
19037 +             end;*/
19038 +            %end;
19039 +            %else %do;
19040 +             %if &em_profitflag ne 0 %then %do;
19041 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19041!+14.&EM_PROPERTY_SPLITPRECISION);
19042 +                if CATEGORY="&targetEvent" then do;
19043 +                 profitloss=ALTERNATIVE_PROFIT;
19044 +                end;
19045 +             %end;
19046 +             %if &em_lossflag ne 0 %then %do;
19047 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19047!+14.&EM_PROPERTY_SPLITPRECISION);
19048 +                if CATEGORY="&targetEvent" then do;
19049 +                  profitloss=ALTERNATIVE_LOSS;
19050 +                end;
19051 +             %end;
19052 +            %end;
19053 +            output;
19054 +          end;
19055 +          else do;
19056 +            %if &validFlag eq N %then %do;
19057 +             %if &em_profitflag ne 0 %then %do;
19058 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19059 +             %end;
19060 +             %if &em_lossflag ne 0 %then %do;
19061 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19062 +             %end;
19063 +            %end;
19064 +            %else %do;
19065 +             %if &em_profitflag ne 0 %then %do;
19066 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19066!+14.&EM_PROPERTY_SPLITPRECISION);
19067 +             %end;
19068 +             %if &em_lossflag ne 0 %then %do;
19069 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19069!+14.&EM_PROPERTY_SPLITPRECISION);
19070 +             %end;
19071 +            %end;
19072 +          end;
19073 +        %end;
19074 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19075 +          if strip(CATEGORY) = "&targetevent" then do;
19076 +            %if &validFlag eq N %then %do;
19077 +             %if &em_profitflag ne 0 %then %do;
19078 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19079 +             %end;
19080 +             %if &em_lossflag ne 0 %then %do;
19081 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19082 +             %end;
19083 +             profitloss=statvalue;
19084 +            %end;
19085 +            %else %do;
19086 +             %if &em_profitflag ne 0 %then %do;
19087 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19087!+;
19088 +                profitloss=ALTERNATIVE_PROFIT;
19089 +             %end;
19090 +             %if &em_lossflag ne 0 %then %do;
19091 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19092 +                profitloss=ALTERNATIVE_LOSS;
19093 +             %end;
19094 +            %end;
19095 +            output;
19096 +          end;
19097 +        %end;
19098 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19099 +          if strip(CATEGORY) = "&targetevent" then do;
19100 +            %if &validFlag eq N %then %do;
19101 +             profitloss=statvalue;
19102 +            %end;
19103 +            %else %do;
19104 +             %if &em_profitflag ne 0 %then %do;
19105 +                profitloss=ALTERNATIVE_PROFIT;
19106 +             %end;
19107 +             %if &em_lossflag ne 0 %then %do;
19108 +                profitloss=ALTERNATIVE_LOSS;
19109 +             %end;
19110 +            %end;
19111 +            output;
19112 +          end;
19113 +        %end;
19114 +      run;
19115 +    %end;
19117 +    data tempprob(keep= node probtext);
19118 +      length probtext $800;
19119 +      retain probtext;
19120 +      set tempprob ;
19121 +      by node;
19123 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19124 +      %let probtype = &EM_PROPERTY_TARGET;
19125 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19126 +        %let probtype = ALL;
19127 +      %end;
19129 +      %if "&probtype" eq "ALL" %then %do;
19130 +        if first.node then do;
19131 +          %if &validFlag eq N %then %do;
19132 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19133 +          %end;
19134 +          %else %do;
19135 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19136 +          %end;
19137 +        end;
19138 +        else if last.node then do;
19139 +          %if &validFlag eq N %then %do;
19140 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19141 +          %end;
19142 +          %else %do;
19143 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19144 +          %end;
19145 +          output;
19146 +        end;
19147 +        else do;
19148 +          %if &validFlag eq N %then %do;
19149 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19150 +          %end;
19151 +          %else %do;
19152 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19153 +          %end;
19154 +        end;
19155 +      %end;
19156 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19157 +        if strip(CATEGORY) = "&targetevent" then do;
19158 +          %if &validFlag eq N %then %do;
19159 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19160 +          %end;
19161 +          %else %do;
19162 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19163 +          %end;
19164 +          output;
19165 +        end;
19166 +      %end;
19167 +      %else %if "&probtype" eq "NONE" %then %do;
19168 +        if last.node then do;
19169 +          output;
19170 +        end;
19171 +      %end;
19172 +    run;
19173 +  %end;
19175 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19177 +  %let oldexists=0;
19178 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19179 +     data old_tree_plot;
19180 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19181 +        rename nodecolor=oldnodecolor;
19182 +     run;
19184 +     proc sort data=old_tree_plot;
19185 +        by node;
19186 +     run;
19188 +     %let oldexists=1;
19189 +  %end;
19191 +  data &EM_USER_TREE_PLOT;
19192 +    length textall $800;
19193 +    merge tempoutnodes temptargetused
19195 +    %if &em_intTarget eq Y %then %do;
19196 +      tempinterval
19197 +    %end;
19199 +    %if &em_classTarget eq Y %then %do;
19201 +      %if &validFlag eq N %then %do;
19202 +        tempn(rename=(statvalue=N))
19203 +      %end;
19204 +      %else %do;
19205 +        tempn
19206 +      %end;
19208 +      temppredict tempprob
19210 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19211 +        tempprofittext
19212 +      %end;
19213 +    %end;
19214 +    ;
19215 +    by node;
19217 +    /* build nodetext based on user selection */
19218 +    textall="";
19220 +    %if &em_intTarget eq Y %then %do;
19221 +    if tarlevel="INTERVAL" then do;
19222 +      /* Nodeid */
19223 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19224 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19225 +      %end;
19227 +      /* Target identifier if multiple targets are used */
19228 +      %if "&multipleTar" eq "Y" %then %do;
19229 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19230 +      %end;
19232 +      %if &validFlag eq Y %then %do;
19233 +         /* Column labels displayed in validflag eq Y only */
19234 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19235 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19235!+noquote ))";
19236 +         %end;
19238 +         /* Average values */
19239 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19240 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19241 +         %end;
19243 +         /* RASE */
19244 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19245 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19246 +         %end;
19248 +         /* Count */
19249 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19250 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19251 +         %end;
19252 +      %end;
19253 +      %else %do;
19254 +         /* Average values */
19255 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19256 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19257 +         %end;
19259 +         /* RASE */
19260 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19261 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19262 +         %end;
19264 +         /* Count */
19265 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19266 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19267 +         %end;
19268 +      %end;
19270 +      /* nodecolor */
19271 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19272 +        nodecolor=PREDICTION;
19273 +      %end;
19274 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19275 +        nodecolor=RASE;
19276 +      %end;
19277 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19278 +        nodecolor=1;
19279 +      %end;
19281 +    end;
19282 +    %end;
19283 +    %if &em_classTarget eq Y %then %do;
19284 +    if tarlevel^="INTERVAL" then  do;
19286 +      /* Nodeid */
19287 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19288 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19289 +      %end;
19290 +      /* Target identifier if multiple targets are used */
19291 +      %if "&multipleTar" eq "Y" %then %do;
19292 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19293 +      %end;
19295 +      /* Predicted values */
19296 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19297 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19298 +      %end;
19300 +      /* Column labels displayed in validflag eq Y only */
19301 +      %if "&ValidFlag" eq "Y" %then %do;
19302 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19303 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19303!+noquote ))";
19304 +        %end;
19305 +      %end;
19307 +      /* Target Values */
19308 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19309 +        textall=strip(textall)||"0A"x||strip(probtext);
19310 +      %end;
19312 +      /* include profit or loss for all target levels */
19313 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19314 +        textall=strip(textall)||"0A"x||strip(profittext);
19315 +      %end;
19317 +      %if &validFlag eq N %then %do;
19318 +        /* Percent Correct */
19319 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19320 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19321 +        %end;
19323 +         /* Count */
19324 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19325 +          %if "&adjusted" eq "N" %then %do;
19326 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19327 +          %end;
19328 +          %else %do;
19329 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19330 +          %end;
19331 +         %end;
19332 +      %end;
19333 +      %else %do;
19334 +        /* Percent Correct */
19335 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19336 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19337 +        %end;
19339 +         /* Count */
19340 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19341 +          %if "&adjusted" eq "N" %then %do;
19342 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19343 +          %end;
19344 +          %else %do;
19345 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19346 +          %end;
19347 +         %end;
19348 +      %end;
19350 +      /* nodecolor */
19351 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19352 +       %if &multipleTar ne Y %then %do;
19353 +        nodecolor=&predTarget;
19354 +       %end;
19355 +       %else %do;
19356 +         nodecolor=percentcorrect;
19357 +       %end;
19358 +      %end;
19359 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19360 +        nodecolor=percentcorrect;
19361 +      %end;
19362 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19363 +        nodecolor=1;
19364 +      %end;
19365 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19366 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19367 +          nodecolor=percentcorrect;
19368 +        %end;
19369 +        %else %do;
19370 +          nodecolor=profitloss;
19371 +        %end;
19372 +      %end;
19374 +    end;
19375 +    %end;
19376 +    %if &em_intTarget eq Y %then %do;
19377 +     drop  PREDICTION  TARGET TARLEVEL
19378 +     %if &ValidFlag eq Y %then %do;
19379 +         VPREDICTION
19380 +     %end;
19381 +     ;
19382 +    %end;
19383 +    %if &em_classTarget eq Y %then %do;
19384 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19385 +     %if &ValidFlag eq Y %then %do;
19386 +         VSTATVALUE
19387 +     %end;
19388 +     ;
19389 +    %end;
19391 +  run;
19393 +  /* add leaf index information to plotds - based on primary target only*/
19394 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19395 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19396 +      set &EM_USER_OUTSTATS;
19397 +      if ((statname="PROBABILITY"
19398 +      %if &validexist %then %do;
19399 +       or statname="VALID: PROBABILITY"
19400 +      %end;
19401 +      ) AND (CATEGORY="&TARGETEVENT")
19402 +      %if "&multipleTar" eq "Y" %then %do;
19403 +        AND (Target="%EM_TARGET")
19404 +      %end;
19405 +      );
19406 +    run;
19408 +    %if &validexist %then %do;
19409 +      proc sort data=tempprob; by node; run;
19410 +      %let vpredTarget = V%substr(&predTarget, 2);
19411 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19412 +         by node;
19413 +         id statname;
19414 +      run;
19415 +    %end;
19416 +  %end;
19417 +  %else %do;
19418 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19419 +      set &EM_USER_OUTSTATS;
19420 +      if ((statname="PREDICTION"
19421 +      %if &validexist %then %do;
19422 +       or statname="VALID: PREDICTION"
19423 +      %end;
19424 +      )
19425 +      %if "&multipleTar" eq "Y" %then %do;
19426 +        AND (Target="%EM_TARGET")
19427 +      %end;
19428 +      );
19429 +    run;
19430 +    %if &validexist %then %do;
19431 +      proc sort data=tempprob; by node; run;
19432 +      %let vpredTarget = V%substr(&predTarget, 2);
19433 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19434 +         by node;
19435 +         id statname;
19436 +      run;
19437 +    %end;
19438 +  %end;
19440 +  proc sort data=tempprob; by node; run;
19441 +  data tempoutnodes;
19442 +    merge tempoutnodes tempprob;
19443 +    by node;
19444 +  run;
19446 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19447 +  data tempnodes;
19448 +    retain traintotal validtotal;
19449 +    set tempnodes(where=(leaf ne . ));
19450 +    tprob=round(&predTarget, .01);
19451 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19452 +      percevent_train=round(tprob*100, .01);
19453 +    %end;
19454 +    %else %do;
19455 +      percevent_train=tprob;
19456 +    %end;
19458 +    perc_train=round((n/traintotal)*100, 0.01);
19459 +    /* leafwidth already has a *10 multiplier */
19460 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19462 +    %if &validexist %then %do;
19463 +      %let vpredTarget = V%substr(&predTarget,2);
19464 +      vprob=round(&vpredTarget, .01);
19465 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19466 +        percevent_valid=round(vprob*100, .01);
19467 +      %end;
19468 +      %else %do;
19469 +        percevent_valid=vprob;
19470 +      %end;
19471 +      perc_valid=round((vn/validtotal)*100, .01);
19472 +    %end;
19474 +    index=_N_;
19475 +    keep node index tprob perc_train percevent_train
19476 +    %if &validexist %then %do;
19477 +        vprob percevent_valid perc_valid
19478 +    %end;
19479 +    ;
19480 +  run;
19481 +  proc sort data=tempnodes; by node; run;
19482 +  data &EM_USER_TREE_PLOT;
19483 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19484 +    by node;
19485 +    if missing(node) then delete;
19486 +    %if &oldexists %then %do;
19487 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19488 +      drop oldnodecolor;
19489 +    %end;
19490 +    abovetext = compbl(abovetext);
19492 +    /* add variable labels */
19493 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19494 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19495 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19496 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19497 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19498 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19500 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19501 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19502 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19503 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19504 +          %end;
19505 +          %else %do;
19506 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19507 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19508 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19509 +          %end;
19510 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19512 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19513 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19514 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19515 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19516 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19517 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19518 +          %end;
19519 +          %else %do;
19520 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19521 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19522 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19523 +          %end;
19524 +    ;
19525 +  run;
19527 +  /* delete temporary tables */
19528 +  proc datasets lib=work nolist;
19529 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19530 +  run;
19532 +%mend em_tree_makePlotDs;
19536 +%macro em_tree_report;
19538 +   /* report properties */
19539 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19540 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19541 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19542 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19543 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19544 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19545 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19546 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19547 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19548 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19549 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19550 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19551 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19553 +   %let validexist=0;
19554 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19555 +     %let validexist=1;
19556 +   %end;
19558 +   /* determine if multiple targets will be processed */
19559 +   %let em_tree_multipleTargets=N;
19560 +   %let em_tree_numTarget=1;
19561 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19562 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19563 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19564 +         %let em_tree_multipleTargets=N;
19565 +      %end;
19566 +      %else %do;
19567 +        data _null_;
19568 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19569 +          if eof then
19570 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19571 +        run;
19573 +        %if &em_tree_numTarget gt 1 %then %do;
19574 +           %let em_tree_multipleTargets=Y;
19575 +        %end;
19576 +     %end;
19577 +   %end;
19579 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19581 +   /* variable importance */
19582 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19583 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19585 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19586 +     /* and the columns may not be generated                                                                                 */
19587 +     %let em_tree_cvexists=;
19588 +     %let em_tree_surrexists=.;
19589 +     data _null_;
19590 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19591 +       if eof then do ;
19592 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19593 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19594 +       end;
19595 +     run;
19597 +     data &EM_USER_OUTIMPORT;
19598 +         set &EM_USER_OUTIMPORT;
19599 +         /* format columns based on Precison value specified */
19600 +         format importance 15.&EM_PROPERTY_PRECISION
19601 +              %if &validexist %then %do;
19602 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19603 +              %end;
19604 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19605 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19606 +              %end;
19607 +         ;
19608 +     run;
19610 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19611 +     proc print data=&EM_USER_OUTIMPORT
19612 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19613 +          (where=((nrules>0) OR (nsurrogates>0)))
19614 +        %end;
19615 +        %else %do;
19616 +           (where=(nrules>0))
19617 +        %end;
19618 +        label noobs
19619 +        ;
19620 +     run;
19621 +     title10;
19623 +   %end;
19625 +   /* Sequence */
19626 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19627 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19628 +   data _null_ ;
19629 +      set &EM_USER_outseq (obs=2) end=eof ;
19630 +      if eof then do ;
19631 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19632 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19633 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19634 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19635 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19636 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19637 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19638 +      end;
19639 +    run;
19641 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19642 +      data &EM_USER_OUTSEQ;
19643 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19644 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19645 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19646 +           _XMISC_=_VMISC_
19647 +        %end;
19648 +        %if "&em_tree_aprof" ne "."  %then %do;
19649 +           _XAPROF_=_VAPROF_
19650 +           _XPROF_ = _VPROF_
19651 +        %end;
19652 +        %if "&em_tree_aloss" ne "."  %then %do;
19653 +           _XALOSS_=_VALOSS_
19654 +        %end;
19655 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19656 +           _XPASE_ = _VPASE_
19657 +           _XPMISC_ = _VPMISC_
19658 +        %end;
19660 +        ));
19661 +     %end;
19662 +     %else %do;
19663 +        set &EM_USER_OUTSEQ;
19664 +     %end;
19666 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19667 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19668 +            _MISC_   15.&EM_PROPERTY_PRECISION
19669 +         %end;
19670 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19671 +            _PASE_  15.&EM_PROPERTY_PRECISION
19672 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19673 +         %end;
19674 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19675 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19676 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19677 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19678 +            %end;
19679 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19680 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19681 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19682 +            %end;
19683 +         %end;
19684 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19685 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19686 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19687 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19688 +            %end;
19689 +         %end;
19690 +         %if "&em_tree_seq" ne "." %then %do;
19691 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19692 +         %end;
19693 +         %if "&em_tree_vseq" ne "." %then %do;
19694 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19695 +         %end;
19696 +         %if "&em_tree_aprof" ne "." %then %do;
19697 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19698 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19699 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19700 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19701 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19702 +           %end;
19703 +         %end;
19704 +         %else %if "&em_tree_aloss" ne "." %then %do;
19705 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19706 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19707 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19708 +           %end;
19709 +         %end;
19710 +      ;
19711 +    run;
19712 +   %end;
19714 +   /* Observation Based Importance */
19715 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19717 +      /* need to check for 0 obs */
19718 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19719 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19720 +      %let rc=%sysfunc(close(&dsid));
19722 +      %if &onobs %then %do;
19723 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19724 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19726 +         data &EM_USER_OUTOBSIMP;
19727 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19728 +           if _a;
19729 +           by _INPUT1_;
19730 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19731 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19732 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19733 +                   %end;
19734 +                   ;
19735 +         run;
19736 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19737 +      %end;
19738 +   %end;
19740 +  %end;
19742 +  /* create dataset to support tree diagram and icicle plot */
19743 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19744 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19746 +  /* display tree diagram */
19747 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19748 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19750 +  /* display icicle diagram */
19751 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19752 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19754 +  /* Leaf Statistics Plot */
19755 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19757 +  /* print leaf information to output window */
19758 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19760 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19761 +       by descending N;
19762 +     run;
19764 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19765 +     %local vn;
19766 +     data _null_;
19767 +       set t (obs=2) end=eof;
19768 +       if eof then do;
19769 +         call symput("vn", strip(put(vn, best.)));
19770 +       end;
19771 +     run;
19773 +     data t;
19774 +       set t;
19775 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19776 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19777 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19778 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19779 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19780 +       %end;
19781 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19782 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19783 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19784 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19785 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19786 +          %end;
19787 +       %end;
19788 +       ;
19789 +     run;
19791 +     /* determine if rase is found in t */
19792 +    %let dsid=%sysfunc(open(t,i));
19793 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19794 +    %let rc=%sysfunc(close(&dsid));
19796 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19797 +     proc print data=t noobs label;
19798 +       where tprob ne .;
19799 +       var node depth N tprob
19800 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19801 +         %if "&vn" ne "." %then %do;
19802 +           VN
19803 +         %end;
19804 +         vprob
19805 +       %end;
19806 +       %if &raseexists %then %do;
19807 +            RASE
19808 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19809 +              VRASE
19810 +            %end;
19811 +       %end;
19812 +       ;
19813 +     run;
19814 +     title10;
19815 +  %end;
19817 +  /* create plots that are done during training of node */
19818 +  /* display iterative plot, including reference line */
19819 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19820 +   /* %if &nleaves eq  %then %do; */
19821 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19822 +      data _null_;
19823 +        set &EM_USER_OUTTOPOLOGY end=eof;
19824 +        if eof then do;
19825 +          call symput('nleaves', LEAF);
19826 +        end;
19827 +      run;
19828 +   /* %end; */
19830 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19831 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19832 +  %end;
19834 +  /* display leaf statistics */
19835 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19837 +  /* stats by node if multiple targets = Y */
19838 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19839 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19840 +    data &EM_USER_OUTSTATS;
19841 +      set &EM_USER_OUTSTATS;
19843 +     * if STATNAME="TARGET" then delete;
19844 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19845 +      drop leaf;
19846 +    run;
19847 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19849 +  %end;
19850 +  %else %do;
19851 +    /* add outstats and outdescribe to spk but not results */
19852 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19853 +  %end;
19855 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS6.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS6.TREE_OUTIMPORT.
NOTE: The data set EMWS6.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS6.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS6.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 29 observations read from the data set EMWS6.TREE_OUTSEQ.
NOTE: The data set EMWS6.TREE_OUTSEQ has 29 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS6.IDS_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set EMWS6.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set EMWS6.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS6.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 8 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 8 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 8 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 203 observations read from the data set EMWS6.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 12 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS6.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS6.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS6.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 143 observations read from the data set EMWS6.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 143 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 143 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 130 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 13 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 143 observations read from the data set EMWS6.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 143 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 143 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 13 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 143 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 143 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 143 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 143 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 26 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 13 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 26 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 26 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 52 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 13 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.TEMPPROFIT.
NOTE: The data set WORK.TEMPPROFIT has 26 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: There were 26 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 26 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: There were 13 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable profittext is uninitialized.
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: There were 26 observations read from the data set WORK.TEMPPROFIT.
NOTE: The data set WORK.TEMPPROFITTEXT has 13 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1213:196
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 13 observations read from the data set WORK.TEMPN.
NOTE: There were 13 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: There were 13 observations read from the data set WORK.TEMPPROFITTEXT.
NOTE: The data set EMWS6.TREE_TREE_PLOT has 13 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 143 observations read from the data set EMWS6.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 26 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 13 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 7 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS6.TREE_TREE_PLOT.
NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS6.TREE_TREE_PLOT has 13 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS6.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 13 observations and 39 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 13 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      320:141
NOTE: There were 13 observations read from the data set EMWS6.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
 
19856
19857  *------------------------------------------------------------*;
19858  * End REPORT: Tree;
19859  *------------------------------------------------------------*;
 
19860  /* Reset EM Options */
19861  options formchar="|----|+|---+=|-/\<>*";
19862  options nocenter ls=256 ps=10000;
19863  goptions reset=all device=GIF NODISPLAY;
 
19864  proc sort data=WORK.EM_USER_REPORT;
19865  by ID VIEW;
19866  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19867  proc sort data=EMWS6.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19868  by NAME;
19869  run;
 
NOTE: There were 14 observations read from the data set EMWS6.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19870  proc sort data=EMWS6.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19871  by NAME;
19872  run;
 
NOTE: There were 14 observations read from the data set EMWS6.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19873  data WORK.ASSESS_META;
19874  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19875  by NAME;
19876  run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19877  data EM_temp_assessMeta;
19878  set EMWS6.Tree_CMeta_TRAIN;
19879  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19880  run;
 
NOTE: There were 16 observations read from the data set EMWS6.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19881  data EM_temp_assessdata;
19882  set EMWS6.Tree_TRAIN(keep=
19883  BP_TARGETBUY
19884  CP_TARGETBUY
19885  D_TARGETBUY
19886  EP_TARGETBUY
19887  F_TargetBuy
19888  I_TargetBuy
19889  P_TargetBuy0
19890  P_TargetBuy1
19891  Q_TargetBuy0
19892  Q_TargetBuy1
19893  R_TargetBuy0
19894  R_TargetBuy1
19895  U_TargetBuy
19896  V_TargetBuy0
19897  V_TargetBuy1
19898  _WARN_
19899  TargetBuy
19900  );
19901  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS6.TREE_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
NOTE: There were 11112 observations read from the data set EMWS6.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS6.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 11112 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24218   data EM_temp_assessMeta;
24219   set EMWS6.Tree_CMeta_TRAIN;
24220   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24221   run;
 
NOTE: There were 16 observations read from the data set EMWS6.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24222   data EM_temp_assessdata;
24223   set EMWS6.Tree_VALIDATE(keep=
24224   BP_TARGETBUY
24225   CP_TARGETBUY
24226   D_TARGETBUY
24227   EP_TARGETBUY
24228   F_TargetBuy
24229   I_TargetBuy
24230   P_TargetBuy0
24231   P_TargetBuy1
24232   Q_TargetBuy0
24233   Q_TargetBuy1
24234   R_TargetBuy0
24235   R_TargetBuy1
24236   U_TargetBuy
24237   V_TargetBuy0
24238   V_TargetBuy1
24239   _WARN_
24240   TargetBuy
24241   );
24242   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS6.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: There were 11111 observations read from the data set EMWS6.PART_VALIDATE.
NOTE: There were 11111 observations read from the data set EMWS6.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 11111 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28568   %let _cn = %sysfunc(getoption(CENTER));
28569   options nocenter;
28570   proc print data=EMWS6.Tree_EMREPORTFIT noobs label;
28571   var STAT LABEL TRAIN
28572   VALIDATE
28573   ;
28574   by TARGET TARGETLABEL;
28575   title9 ' ';
28576   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28577   run;
 
NOTE: There were 10 observations read from the data set EMWS6.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28578   title10;
28579   options &_cn;
 
28580   proc sort data=EMWS6.Tree_EMCLASSIFICATION nothreads;
28581   by DATAROLE TARGET TARGETLABEL;
28582   run;
 
NOTE: There were 16 observations read from the data set EMWS6.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS6.TREE_EMCLASSIFICATION has 16 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
28583   %let _cn = %sysfunc(getoption(CENTER));
28584   options nocenter;
28585   proc print data=EMWS6.Tree_EMCLASSIFICATION noobs label;
28586   var from into pct_row pct_col count percent
28587   ;
28588   by DATAROLE TARGET TARGETLABEL;
28589   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28590   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28591   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28592   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28593   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28594   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28595   where _TYPE_='PREDICTION';
28596   title9 ' ';
28597   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28598   run;
 
NOTE: There were 8 observations read from the data set EMWS6.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
28599   proc print data=EMWS6.Tree_EMCLASSIFICATION noobs label;
28600   var from into pct_row pct_col count percent
28601   ;
28602   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28603   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28604   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28605   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28606   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28607   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28608   where _TYPE_='DECISION';
28609   by DATAROLE TARGET TARGETLABEL;
28610   title9 ' ';
28611   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_decisiontable_title    , NOQUOTE))";
28612   run;
 
NOTE: There were 8 observations read from the data set EMWS6.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='DECISION';
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
28613   title9;
28614   title10;
28615   options &_cn;
 
28616   %let _cn = %sysfunc(getoption(CENTER));
28617   options nocenter;
28618   data EMWS6.Tree_EMEVENTREPORT;
28619   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28619 !  8;
28620   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28620 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28620 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28620 ! FALSEEVENT
28621   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28621 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28621 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28622      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28623   FALSEEVENT=0;
28624   FALSENEVENT=0;
28625   TRUEEVENT=0;
28626   TRUENEVENT=0;
28627   set EMWS6.Tree_EMEVENTREPORT;
28628   run;
 
NOTE: There were 2 observations read from the data set EMWS6.TREE_EMEVENTREPORT.
NOTE: The data set EMWS6.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
28629   proc print data=EMWS6.Tree_EMEVENTREPORT noobs label;
28630   title9 ' ';
28631   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28632   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28633   run;
 
NOTE: There were 2 observations read from the data set EMWS6.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 10.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28634   title10;
28635   options &_cn;
 
28636   proc datasets library=EMWS6 nolist;
28637   modify Tree_EMRANK;
28638   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28639   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28640   run;
 
NOTE: MODIFY was successful for EMWS6.TREE_EMRANK.DATA.
28641   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
28642   %let _cn = %sysfunc(getoption(CENTER));
28643   options nocenter;
28644   proc print data=EMWS6.Tree_EMRANK label noobs;
28645   var
28646   decile gain lift liftc resp respc N _meanP_;
28647   by
28648   notsorted DATAROLE
28649   notsorted TARGET
28650   notsorted TARGETLABEL
28651   ;
28652   title9 ' ';
28653   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28654   run;
 
NOTE: There were 40 observations read from the data set EMWS6.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 11.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28655   title10;
28656   options &_cn;
 
28657   proc datasets library=EMWS6 nolist;
28658   modify Tree_EMSCOREDIST;
28659   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28660   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28661   run;
 
NOTE: MODIFY was successful for EMWS6.TREE_EMSCOREDIST.DATA.
28662   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
