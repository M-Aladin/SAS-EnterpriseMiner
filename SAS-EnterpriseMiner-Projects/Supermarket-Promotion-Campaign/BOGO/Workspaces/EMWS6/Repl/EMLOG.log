*------------------------------------------------------------*
User:                Mohamed
Date:                May 13, 2018
Time:                20:45:06
Site:                12400032
Platform:            X64_10HOME
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
*------------------------------------------------------------*
* Training Log
Date:                May 13, 2018
Time:                20:45:02
*------------------------------------------------------------*
15255  proc freq data=EMWS6.Repl_VariableSet noprint;
15256  table ROLE*LEVEL/out=WORK.ReplMETA;
15257  run;
 
NOTE: There were 12 observations read from the data set EMWS6.REPL_VARIABLESET.
NOTE: The data set WORK.REPLMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
15258  proc print data=WORK.ReplMETA label noobs;
15259  var ROLE LEVEL COUNT;
15260  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15261  title9 ' ';
15262  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15263  run;
 
NOTE: There were 5 observations read from the data set WORK.REPLMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
15264  title10;
 
15265  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15597  *------------------------------------------------------------*;
15598  * Repl: Generation of macros and macro variables;
15599  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15600  *------------------------------------------------------------*;
 
15601  %let EMEXCEPTIONSTRING=;
15602  *------------------------------------------------------------*;
15603  * TRAIN: Repl;
15604  *------------------------------------------------------------*;
15605  %let EM_ACTION = TRAIN;
15606  %let syscc = 0;
15607  filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
15608  %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
15610 +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
15612 +   filename macFile catalog 'work.emutil.macro.source';
15613 +   %let _METAOBS = 0;
15614 +   %let _maxvar = &maxvar;
15615 +   %if "&_maxvar" eq "" %then %let maxvar = -1;
15617 +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
15618 +                   or (&metadata eq ) %then %do;
15619 +       %put * No metadata data set defined;
15620 +       %goto doend;
15621 +   %end;
15623 +   data _null_;
15624 +      length _STRING_ $80;
15625 +      retain _STRING_ '' maxvar 0;
15626 +      set &metadata end=eof;
15627 +      file macFile;
15628 +      %if %nrbquote(&where) ne %then %do;
15629 +          %let whereClause = where (%nrbquote(&where));
15630 +          %unquote(&whereClause);
15631 +      %end;
15632 +      if _N_=1 then do;
15633 +         string = "%"!!"macro &name;";
15634 +         put string;
15635 +      end;
15636 +      maxvar +1;
15637 +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
15638 +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
15639 +         if eof
15640 +            %if  %sysevalf(&_maxvar > 0) %then %do;
15641 +                or maxvar >= &maxvar
15642 +            %end;
15643 +            then do;
15644 +            put _STRING_;
15645 +            string = "%"!!"mend &name;";
15646 +            put string;
15647 +            string = strip(put(_N_, best.));
15648 +            call symput('_METAOBS', string);
15649 +            %if (&nummacro ne ) %then %do;
15650 +                put "%" "global &nummacro;";
15651 +                put "%" "let &nummacro = " string ";";
15652 +            %end;
15653 +            stop;
15654 +         end;
15655 +      end;
15656 +      else do;
15657 +         put _STRING_;
15658 +         _string_ = TRIM(&key);
15659 +         if eof
15660 +            %if  %sysevalf(&_maxvar > 0) %then %do;
15661 +              or maxvar >= &maxvar
15662 +           %end;
15663 +            then do;
15664 +            put _STRING_;
15665 +            string = "%"!!"mend &name;";
15666 +            put string;
15667 +        end;
15668 +      end;
15669 +      if eof
15670 +         %if  %sysevalf(&_maxvar > 0) %then %do;
15671 +             or maxvar >= &maxvar
15672 +         %end;
15673 +         then do;
15674 +         string = strip(put(_N_, best.));
15675 +         call symput('_METAOBS', string);
15676 +         %if (&nummacro ne ) %then %do;
15677 +             put "%" "global &nummacro;";
15678 +             put "%" "let &nummacro = " string ";";
15679 +         %end;
15680 +         stop;
15681 +      end;
15682 +   run;
15684 +   %doend:
15685 +   %if ^&_METAOBS %then %do;
15686 +       data _null_;
15687 +          file macFile;
15688 +          put "%" "macro &name;";
15689 +          put "%" "mend &name;";
15690 +          %if (&nummacro ne ) %then %do;
15691 +              put "%" "global &nummacro;";
15692 +              put "%" "let &nummacro = 0;";
15693 +          %end;
15694 +      run;
15695 +   %end;
15696 +   %inc macFile;
15697 +   filename macFile;
15698 +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
15699  filename X;
NOTE: Fileref X has been deassigned.
15700   %macro main;
15701
15702     filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
15703     %include temp;
15704     filename temp;
15705
15706     %if %upcase(&EM_ACTION) = CREATE %then %do;
15707
15708         filename temp catalog 'sashelp.emmdfy.Replace_create.source';
15709         %include temp;
15710         filename temp;
15711         %create;
15712     %end;
15713     %else
15714     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15715
15716         filename temp catalog 'sashelp.emmdfy.Replace_train.source';
15717         %include temp;
15718         filename temp;
15719         %train;
15720     %end;
15721     %else
15722     %if %upcase(&EM_ACTION) = SCORE %then %do;
15723
15724         filename temp catalog 'sashelp.emmdfy.Replace_score.source';
15725         %include temp;
15726         filename temp;
15727         %score;
15728     %end;
15729     %if %upcase(&EM_ACTION) = REPORT %then %do;
15730
15731         filename temp catalog 'sashelp.emmdfy.Replace_report.source';
15732         %include temp;
15733         filename temp;
15734         %report;
15735     %end;
15736     %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
15737         filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
15738         %include temp;
15739         filename temp;
15740         %em_replace_openoutclass;
15741     %end;
15742     %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
15743         filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
15744         %include temp;
15745         filename temp;
15746         %em_replace_closeoutclass;
15747     %end;
15748  %mend main;
15749
15750  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
15751 +%macro SetProperties;
15752 +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
15753 +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
15754 +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
15755 +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
15756 +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
15757 +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
15758 +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
15759 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
15760 +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
15761 +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
15762 +
15763 +%mend SetProperties;
15764 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_TRAIN.SOURCE.
15765 +%macro getLevels(outData=);
15766 +   %if (%EM_BINARY_TARGET %EM_ORDINAL_TARGET %EM_NOMINAL_TARGET
15767 +       %EM_BINARY_INPUT %EM_ORDINAL_INPUT %EM_NOMINAL_INPUT
15768 +       %EM_BINARY_REJECTED %EM_ORDINAL_REJECTED %EM_NOMINAL_REJECTED) eq %then %do;
15769 +       data &outData;
15770 +          length NAME $32 LEVEL $8 FREQUENCY 8 TYPE $1 CRAW $8 NRAW 8 REPLACE_VALUE $200;
15771 +          label NAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
15772 +                LEVEL=     "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel, NOQUOTE))"
15773 +                FREQUENCY= "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))"
15774 +                TYPE=      "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
15775 +                CRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_craw_vlabel, NOQUOTE))"
15776 +                NRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_nraw_vlabel, NOQUOTE))"
15777 +                REPLACE_VALUE= "%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
15778 +          stop;
15779 +       run;
15780 +   %end;
15781 +   %else %do;
15782 +       %em_checkmacro(name=EM_TRAIN_MAXLEVELS, global=Y, value=512);
15783 +        %if "&EM_TRAIN_MAXLEVELS" = "" or "&EM_TRAIN_MAXLEVELS" = "." %then
15784 +            %let EM_TRAIN_MAXLEVELS= 512;
15785 +
15786 +        proc dmdb data=&EM_IMPORT_DATA dmdbcat=emdmdb maxlevel=&EM_TRAIN_MAXLEVELS nonorm CLASSOUT=&outData(drop=CODE FREQPERCENT NMISSPERCENT);
15787 +          class
15788 +            %EM_BINARY_TARGET
15789 +            %EM_ORDINAL_TARGET
15790 +            %EM_NOMINAL_TARGET
15791 +            %EM_BINARY_INPUT
15792 +            %EM_ORDINAL_INPUT
15793 +            %EM_NOMINAL_INPUT
15794 +            %EM_BINARY_REJECTED
15795 +            %EM_ORDINAL_REJECTED
15796 +            %EM_NOMINAL_REJECTED;
15797 +          %if (%EM_FREQ ne ) %then %do;
15798 +             freq %EM_FREQ;
15799 +         %end;
15800 +       run;
15801 +   %end;
15802 +%mend getLevels;
15803 +
15804 +%macro makeOutCLass;
15805 +   %em_getname(key=OUTCLASS,  type=DATA);
15806 +   %em_getname(key=NEWVALUES, type=DATA);
15807 +
15808 +   %let data= REPLACE_DATA;
15809 +   %if %sysfunc(exist(&EM_USER_OUTCLASS)) %then %do;
15810 +       data &data(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
15811 +          set &EM_USER_OUTCLASS;
15812 +          keep NAME TYPE LEVEL REPLACE_VALUE;
15813 +          where REPLACE_VALUE ne '';
15814 +       run;
15815 +       proc sort data=&Data;
15816 +          by NAME TYPE LEVEL;
15817 +       run;
15818 +   %end;
15819 +
15820 +   %getLevels(outdata=&EM_USER_OUTCLASS);
15821 +
15822 +   /* Determine Mode */
15823 +   proc sort data=&EM_USER_OUTCLASS;
15824 +      by NAME DESCENDING FREQUENCY;
15825 +   run;
15826 +   data _null_;
15827 +      dsid = open("&EM_USER_OUTCLASS");
15828 +      levelLen = varlen(dsid, varnum(dsid, "LEVEL"));
15829 +      dsid = close(dsid);
15830 +      call symput("levelLen", put(max(levelLen, 9), BEST.));
15831 +   run;
15832 +
15833 +   data &EM_USER_OUTCLASS;
15834 +      length Name $32 LEVEL $&levelLen;
15835 +      set &EM_USER_OUTCLASS;
15836 +      length REPLACE_VALUE $200;
15837 +      label REPLACE_VALUE="%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
15838 +      by NAME;
15839 +      output;
15840 +      if last.name then do;
15841 +         LEVEL="_UNKNOWN_";
15842 +         Frequency=.;
15843 +         CRAW='';
15844 +         NRAW=.;
15845 +         REPLACE_VALUE="_DEFAULT_";
15846 +         output;
15847 +      end;
15848 +   run;
15849 +
15850 +   /* If the file is a copy of an existing one.  Merge previously specified values */
15851 +   %if %sysfunc(exist(&EM_USER_NEWVALUES)) and (&EM_USER_NEWVALUES ne ) %then %do;
15852 +       proc sort data=&EM_USER_NEWVALUES(rename=(REPLACE_VALUE=NEW_REPLACE_VALUE));
15853 +          by NAME TYPE LEVEL;
15854 +       run;
15855 +       proc sort data=&EM_USER_OUTCLASS;
15856 +          by NAME TYPE LEVEL;
15857 +       run;
15858 +       data &EM_USER_OUTCLASS(drop=NEW_REPLACE_VALUE);
15859 +          merge &EM_USER_OUTCLASS(in=_a) &EM_USER_NEWVALUES(in=_b);
15860 +          by NAME TYPE LEVEL;
15861 +          if _a then do;
15862 +             if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
15863 +             output;
15864 +          end;
15865 +       run;
15866 +       %let lib    = %scan(&EM_USER_NEWVALUES, 1, .);
15867 +       %let member = %scan(&EM_USER_NEWVALUES, 2, .);
15868 +       proc datasets lib=&lib nolist;
15869 +          delete &member;
15870 +       run;
15871 +
15872 +   %end;
15873 +
15874 +   /*  Update the OUTCLASS data using REPLACEMENT values previously specified */
15875 +   %if %sysfunc(exist(&Data)) %then %do;
15876 +       proc sort data=&EM_USER_OUTCLASS;
15877 +          by NAME TYPE LEVEL;
15878 +       run;
15879 +       proc sort data=&data;
15880 +          by NAME TYPE LEVEL;
15881 +       run;
15882 +       data &EM_USER_OUTCLASS(drop=NEW_REPLACE_VALUE);
15883 +          merge &EM_USER_OUTCLASS(in=_a) &Data(in=_b);
15884 +          by NAME TYPE LEVEL;
15885 +          if _a then do;
15886 +             if _b then REPLACE_VALUE=NEW_REPLACE_VALUE;
15887 +             output;
15888 +          end;
15889 +       run;
15890 +   %end;
15891 +   proc sort data=&EM_USER_OUTCLASS;
15892 +      by NAME DESCENDING FREQUENCY;
15893 +   run;
15894 +
15895 +   %let lib = WORK;
15896 +   %if %index(&EM_USER_OUTCLASS, .) %then %do;
15897 +       %let lib    = %scan(&EM_USER_OUTCLASS, 1, .);
15898 +       %let member = %scan(&EM_USER_OUTCLASS, 2, .);
15899 +   %end;
15900 +   %else
15901 +       %let member = &EM_USER_OUTCLASS;
15902 +
15903 +   proc datasets lib=&lib nolist;
15904 +      modify &member;
15905 +      label NAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
15906 +            LEVEL=     "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel, NOQUOTE))"
15907 +            FREQUENCY= "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))"
15908 +            TYPE=      "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
15909 +            CRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_craw_vlabel, NOQUOTE))"
15910 +            NRAW=      "%sysfunc(sasmsg(sashelp.dmine, rpt_nraw_vlabel, NOQUOTE))"
15911 +            REPLACE_VALUE= "%sysfunc(sasmsg(sashelp.dmine, rpt_replace_vlabel, NOQUOTE))";
15912 +     %if %sysfunc(exist(&data)) %then %do;
15913 +          delete &data;
15914 +     %end;
15915 +   run;
15916 +
15917 +   /* Create property file.  Only the records with non-missing REPLACE_VALUE */
15918 +   data &EM_USER_NEWVALUES / view=&EM_USER_NEWVALUES;
15919 +      set &EM_USER_OUTCLASS(in=_a);
15920 +      where REPLACE_VALUE ne '';
15921 +      keep NAME TYPE LEVEL REPLACE_VALUE;
15922 +   run;
15923 +%mend makeOutClass;
15924 +
15925 +%macro makeVarLimits;
15926 +     %let madsString =;
15927 +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=MADS,     outStat=work.MADS);
15928 +     %if %sysfunc(exist(work.MADS)) %then %do;
15929 +         %makeLimits(StatsDs=work.MADS, cutoff=&EM_PROPERTY_MADSCUTOFF, method=MADS);
15930 +         %let madsString = MADS;
15931 +         proc append base=work.LIMITS data=work.MADS force;
15932 +         run;
15933 +     %end;
15934 +
15935 +     %let spacingString = ;
15936 +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=SPACINGS, outStat=work.SPACINGS);
15937 +     %if %sysfunc(exist(work.SPACINGS)) %then %do;
15938 +         %makeLimits(StatsDs=work.SPACINGS, cutoff=&EM_PROPERTY_SPACINGSCUTOFF, method=SPACINGS);
15939 +         %let spacingString = SPACING;
15940 +         proc append base=work.LIMITS data=work.SPACINGS force;
15941 +         run;
15942 +     %end;
15943 +
15944 +     %let percentString = ;
15945 +     %stdize(data=&em_import_data, metadata=VARIABLESET, method=PERCENTS, outStat=work.PERCENTS);
15946 +     %if %sysfunc(exist(work.PERCENTS)) %then %do;
15947 +         %makePctLimits(StatsDs=work.PERCENTS);
15948 +         %let percentString = PERCENTS;
15949 +         proc append base=work.LIMITS data=work.PERCENTS(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
15950 +         run;
15951 +     %end;
15952 +
15953 +     %makeFixedLimits(StatsDs=work.FIXED);
15954 +     %if %sysfunc(exist(work.FIXED)) %then %do;
15955 +         proc append base=work.LIMITS data=work.FIXED(keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT LABEL) force ;
15956 +         run;
15957 +     %end;
15958 +
15959 +     %if %sysfunc(exist(work.LIMITS)) %then %do;
15960 +         proc sort data=work.LIMITS;
15961 +            by NAME;
15962 +         run;
15963 +         %em_getName(key=LIMITS, type=DATA);
15964 +         data &EM_USER_LIMITS;
15965 +              merge work.limits(in=_a) variableSet(keep=NAME ROLE LEVEL LABEL REPLACEMETHOD REPLACEMIN REPLACEMAX LABEL);
15966 +              by NAME;
15967 +              if _a then output;
15968 +         run;
15969 +     %end;
15970 +
15971 +
15972 +
15973 +     %if %upcase(&EM_DEBUG)=_ALL_ %then %do;
15974 +          proc print data=&EM_USER_OUTCLASS;run;
15975 +          proc print data=MADS;run;
15976 +          proc print data=spacings;run;
15977 +          proc print data=percents;run;
15978 +          proc print data=limits;run;
15979 +     %end;
15980 +     proc datasets lib=work nolist;
15981 +        delete &madsString &spacingString &percentString limits;
15982 +     run;
15983 +%mend makeVarLimits;
15984 +
15985 +%macro stdize(data=, metadata=, method=, outStat=work.StdizeStat);
15986 +
15987 +    %if &method ne PERCENTS %then %do;
15988 +        %em_varmacro(Name=&method, metadata=&metadata,
15989 +                  where=%nrbquote(CALCMETHOD="&method"));
15990 +    %end;
15991 +    %else %do;
15992 +        %em_varmacro(Name=&method, metadata=&metadata,
15993 +        where=%nrbquote(CALCMETHOD in("STDDEV", "PERCENTS")));
15994 +    %end;
15995 +    %if %&method eq %then %goto doend;
15996 +
15997 +    %let optionString=&method;
15998 +
15999 +    %if &method=MADS %then %let optionString = %nrbquote(method=MAD NORM);
16000 +    %else
16001 +        %if &method=SPACINGS %then %let optionString = %nrbquote(method=spacing(50) NORM);
16002 +        %else
16003 +           %if &method=PERCENTS %then %do;
16004 +               %let uCutoff = %sysevalf(100-&em_property_percentsCutoff);
16005 +               %let optionString = pctlpts=&em_property_PercentsCutoff &uCutoff;
16006 +           %end;
16007 +
16008 +    &em_codebar;
16009 +    * &EM_NODEID: Method &em_property_method;
16010 +    &EM_codebar;
16011 +    proc stdize data=&data outstat=&outstat out=_null_
16012 +       &optionString
16013 +       ;
16014 +       var  %&method;
16015 +       %if %em_freq ne %then %do;
16016 +           freq %em_freq;
16017 +       %end;
16018 +    run;
16019 +
16020 +    %if &method=MADS or &method=SPACINGS %then %do;
16021 +        proc transpose data=&outStat out=&outStat(drop=_LABEL_ rename=(_NAME_=NAME col1=LOCATION col2=SCALE));
16022 +           where _TYPE_ in('LOCATION', 'SCALE');
16023 +        run;
16024 +    %end;
16025 +    %else
16026 +        %if &method=PERCENTS %then %do;
16027 +            proc transpose data=&outStat out=&outStat(drop=_LABEL_ rename=(_NAME_=NAME col1=LOCATION col2=SCALE col3=PMin col4=PMax));
16028 +               where _TYPE_ ^in ('ADD', 'MULT', 'N', 'SumFreqsRead', 'SumFreqsUsed', 'NObsRead', 'NObsUsed', 'NObsMiss');
16029 +           run;
16030 +       %end;
16031 +   %doend:
16032 +%mend stdize;
16033 +
16034 +%macro makeLimits(StatsDs=, cutoff=, method=);
16035 +    %if ^%sysfunc(exist(&StatSDs)) %then %goto doendm;
16036 +    data &StatsDs;
16037 +       set &StatsDs;
16038 +       length CALCMETHOD $10;
16039 +       retain CALCMETHOD "&METHOD";
16040 +       LowerLimit = location - &cutoff*scale;
16041 +       UpperLimit = location + &cutoff*scale;
16042 +       drop location scale;
16043 +       Label LowerLimit =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
16044 +             UpperLimit =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))";
16045 +    run;
16046 +
16047 +    %doendm:
16048 +%mend makeLimits;
16049 +
16050 +%macro makeFixedLimits(statsDs=);
16051 +    data &statsDs;
16052 +       set VARIABLESET(where=(CALCMETHOD in('MANUAL', 'METALIMIT')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
16053 +       by NAME;
16054 +       select(CALCMETHOD);
16055 +          when('METALIMIT') do;
16056 +             if UPPERLIMIT eq . and LOWERLIMIT eq . then delete;
16057 +          end;
16058 +          when('MANUAL') do;
16059 +             if INTERVALMIN eq . and INTERVALMAX eq . then delete;
16060 +             else do;
16061 +                LOWERLIMIT = INTERVALMIN;
16062 +                UPPERLIMIT = INTERVALMAX;
16063 +             end;
16064 +          end;
16065 +          otherwise;
16066 +       end;
16067 +    run;
16068 +    %let nobs=0;
16069 +    %let dsid = %sysfunc(open(&statsDs));
16070 +    %if &dsid>0 %then %do;
16071 +        %let nobs = %sysfunc(attrn(&dsid, NOBS));
16072 +        %let dsid = %sysfunc(close(&dsid));
16073 +    %end;
16074 +    %if ^&nobs %then %do;
16075 +        %let nameDs = %scan(&statsDs, 2, .);
16076 +        proc datasets lib=WORK nolist;
16077 +           delete &nameDs;
16078 +         run;
16079 +    %end;
16080 +
16081 +%mend makeFixedLimits;
16082 +
16083 +%macro makePctLimits(StatsDs=);
16084 +    %if ^%sysfunc(exist(&StatSDs)) %then %goto doendp;
16085 +    data &statsDs;
16086 +       merge &statsDs VARIABLESET(where=(CALCMETHOD in('PERCENTS', 'STDDEV')) keep=NAME CALCMETHOD UPPERLIMIT LOWERLIMIT INTERVALMIN INTERVALMAX LABEL);
16087 +       by NAME;
16088 +       select(CALCMETHOD);
16089 +          when('PERCENTS') do;
16090 +             if PMIN eq . and PMAX eq . then delete;
16091 +             else do;
16092 +                LOWERLIMIT = PMIN;
16093 +                UPPERLIMIT = PMAX;
16094 +             end;
16095 +          end;
16096 +          when('STDDEV') do;
16097 +              LOWERLIMIT = LOCATION - (&EM_PROPERTY_STDDEVCUTOFF*SCALE);
16098 +              UPPERLIMIT = LOCATION + (&EM_PROPERTY_STDDEVCUTOFF*SCALE);
16099 +          end;
16100 +          otherwise;
16101 +       end;
16102 +    run;
16103 +   %doendp:
16104 +%mend makePctLimits;
16105 +
16106 +%macro train;
16107 +
16108 +   %if "&em_import_data" eq "" %then %do;
16109 +       %let emexceptionString = exception.server.IMPORT.NOTRAIN,1;
16110 +       %goto doendm;
16111 +   %end;
16112 +
16113 +    /* Process Class variables */
16114 +    %makeOutClass;
16115 +
16116 +    /* Interval Variables */
16117 +     data VARIABLESET;
16118 +        set &EM_DATA_VARIABLESET(where=(LEVEL="INTERVAL" and ((ROLE in("REJECTED", "TARGET") and USE="Y")
16119 +             or (ROLE="INPUT" and USE in("Y", "D")) )));
16120 +        if CALCMETHOD eq "DEFAULT" then CALCMETHOD="&EM_PROPERTY_CALCMETHOD";
16121 +        if CALCMETHOD ^in("NONE", "METALIMIT") or (CALCMETHOD eq "METALIMIT" and ^(LOWERLIMIT eq . and UPPERLIMIT eq .)) then output;
16122 +     run;
16123 +     proc sort data=VARIABLESET out=VARIABLESET;
16124 +        by NAME;
16125 +     run;
16126 +
16127 +     %let varnum=0;
16128 +     %let dsid = %sysfunc(open(VARIABLESET));
16129 +     %if &dsid>0 %then %do;
16130 +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
16131 +         %let dsid = %sysfunc(close(&dsid));
16132 +     %end;
16133 +     %if ^&varnum %then %do;
16134 +          %em_getName(key=LIMITS, type=DATA);
16135 +          %let limitDs = %scan(&em_user_limits, 2, .);
16136 +          proc datasets lib=&em_lib nolist;
16137 +             delete &limitDs;
16138 +          run;
16139 +     %end;
16140 +     %else %do;
16141 +         %makeVarLimits;
16142 +     %end;
16143 +
16144 +   %doendm:
16145 +
16146 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 0 observations read from the data set EMWS6.REPL_OUTCLASS.
      WHERE REPLACE_VALUE not = ' ';
NOTE: The data set WORK.REPLACE_DATA has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.REPLACE_DATA has 0 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 21966   Memory used = 511K.
NOTE: There were 22223 observations read from the data set HW2.HW2_BA8880_SUPERMARKETDATASET.
NOTE: View EMWS6.FILTER_TRAIN.VIEW used (Total process time):
      real time           0.19 seconds
      cpu time            0.18 seconds
 
NOTE: There were 22223 observations read from the data set EMWS6.IDS_DATA.
NOTE: There were 21966 observations read from the data set EMWS6.FILTER_TRAIN.
NOTE: The data set EMWS6.REPL_OUTCLASS has 36 observations and 6 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.24 seconds
      cpu time            0.22 seconds
 
 
 
NOTE: There were 36 observations read from the data set EMWS6.REPL_OUTCLASS.
NOTE: The data set EMWS6.REPL_OUTCLASS has 36 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 36 observations read from the data set EMWS6.REPL_OUTCLASS.
NOTE: The data set EMWS6.REPL_OUTCLASS has 42 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 42 observations read from the data set EMWS6.REPL_OUTCLASS.
NOTE: The data set EMWS6.REPL_OUTCLASS has 42 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 42 observations read from the data set EMWS6.REPL_OUTCLASS.
NOTE: There were 0 observations read from the data set WORK.REPLACE_DATA.
NOTE: The data set EMWS6.REPL_OUTCLASS has 42 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set EMWS6.REPL_OUTCLASS.
NOTE: The data set EMWS6.REPL_OUTCLASS has 42 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: MODIFY was successful for EMWS6.REPL_OUTCLASS.DATA.
 
NOTE: The file EMWS6.REPLACE_DATA (memtype=DATA) was not found, but appears on a DELETE statement.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS6.REPL_NEWVALUES.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS6.REPL_VARIABLESET.
      WHERE (LEVEL='INTERVAL') and ((ROLE in ('REJECTED', 'TARGET') and (USE='Y')) or ((ROLE='INPUT') and USE in ('D', 'Y')));
NOTE: The data set WORK.VARIABLESET has 0 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.VARIABLESET has 0 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file EMWS6.REPL_LIMITS (memtype=DATA) was not found, but appears on a DELETE statement.
16147  *------------------------------------------------------------*;
16148  * End TRAIN: Repl;
16149  *------------------------------------------------------------*;
16150
16151  *------------------------------------------------------------*;
16152  * Close any missing semi colons;
16153  *------------------------------------------------------------*;
16154  ;
16155  ;
16156  ;
16157  ;
16158  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
16159  *------------------------------------------------------------*;
16160  * Close any unbalanced quotes;
16161  *------------------------------------------------------------*;
16162  /*; *"; *'; */
16163  ;
16164  run;
16165  quit;
16166  /* Reset EM Options */
16167  options formchar="|----|+|---+=|-/\<>*";
16168  options nocenter ls=256 ps=10000;
16169  goptions reset=all device=GIF NODISPLAY;
 
*------------------------------------------------------------*
* Score Log
Date:                May 13, 2018
Time:                20:45:04
*------------------------------------------------------------*
16271  %let EMEXCEPTIONSTRING=;
16272  *------------------------------------------------------------*;
16273  * SCORE: Repl;
16274  *------------------------------------------------------------*;
16275  %let EM_ACTION = SCORE;
16276  %let syscc = 0;
16277  filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
16278  %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
16280 +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
16282 +   filename macFile catalog 'work.emutil.macro.source';
16283 +   %let _METAOBS = 0;
16284 +   %let _maxvar = &maxvar;
16285 +   %if "&_maxvar" eq "" %then %let maxvar = -1;
16287 +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
16288 +                   or (&metadata eq ) %then %do;
16289 +       %put * No metadata data set defined;
16290 +       %goto doend;
16291 +   %end;
16293 +   data _null_;
16294 +      length _STRING_ $80;
16295 +      retain _STRING_ '' maxvar 0;
16296 +      set &metadata end=eof;
16297 +      file macFile;
16298 +      %if %nrbquote(&where) ne %then %do;
16299 +          %let whereClause = where (%nrbquote(&where));
16300 +          %unquote(&whereClause);
16301 +      %end;
16302 +      if _N_=1 then do;
16303 +         string = "%"!!"macro &name;";
16304 +         put string;
16305 +      end;
16306 +      maxvar +1;
16307 +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
16308 +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
16309 +         if eof
16310 +            %if  %sysevalf(&_maxvar > 0) %then %do;
16311 +                or maxvar >= &maxvar
16312 +            %end;
16313 +            then do;
16314 +            put _STRING_;
16315 +            string = "%"!!"mend &name;";
16316 +            put string;
16317 +            string = strip(put(_N_, best.));
16318 +            call symput('_METAOBS', string);
16319 +            %if (&nummacro ne ) %then %do;
16320 +                put "%" "global &nummacro;";
16321 +                put "%" "let &nummacro = " string ";";
16322 +            %end;
16323 +            stop;
16324 +         end;
16325 +      end;
16326 +      else do;
16327 +         put _STRING_;
16328 +         _string_ = TRIM(&key);
16329 +         if eof
16330 +            %if  %sysevalf(&_maxvar > 0) %then %do;
16331 +              or maxvar >= &maxvar
16332 +           %end;
16333 +            then do;
16334 +            put _STRING_;
16335 +            string = "%"!!"mend &name;";
16336 +            put string;
16337 +        end;
16338 +      end;
16339 +      if eof
16340 +         %if  %sysevalf(&_maxvar > 0) %then %do;
16341 +             or maxvar >= &maxvar
16342 +         %end;
16343 +         then do;
16344 +         string = strip(put(_N_, best.));
16345 +         call symput('_METAOBS', string);
16346 +         %if (&nummacro ne ) %then %do;
16347 +             put "%" "global &nummacro;";
16348 +             put "%" "let &nummacro = " string ";";
16349 +         %end;
16350 +         stop;
16351 +      end;
16352 +   run;
16354 +   %doend:
16355 +   %if ^&_METAOBS %then %do;
16356 +       data _null_;
16357 +          file macFile;
16358 +          put "%" "macro &name;";
16359 +          put "%" "mend &name;";
16360 +          %if (&nummacro ne ) %then %do;
16361 +              put "%" "global &nummacro;";
16362 +              put "%" "let &nummacro = 0;";
16363 +          %end;
16364 +      run;
16365 +   %end;
16366 +   %inc macFile;
16367 +   filename macFile;
16368 +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
16369  filename X;
NOTE: Fileref X has been deassigned.
16370   %macro main;
16371
16372     filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
16373     %include temp;
16374     filename temp;
16375
16376     %if %upcase(&EM_ACTION) = CREATE %then %do;
16377
16378         filename temp catalog 'sashelp.emmdfy.Replace_create.source';
16379         %include temp;
16380         filename temp;
16381         %create;
16382     %end;
16383     %else
16384     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16385
16386         filename temp catalog 'sashelp.emmdfy.Replace_train.source';
16387         %include temp;
16388         filename temp;
16389         %train;
16390     %end;
16391     %else
16392     %if %upcase(&EM_ACTION) = SCORE %then %do;
16393
16394         filename temp catalog 'sashelp.emmdfy.Replace_score.source';
16395         %include temp;
16396         filename temp;
16397         %score;
16398     %end;
16399     %if %upcase(&EM_ACTION) = REPORT %then %do;
16400
16401         filename temp catalog 'sashelp.emmdfy.Replace_report.source';
16402         %include temp;
16403         filename temp;
16404         %report;
16405     %end;
16406     %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
16407         filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
16408         %include temp;
16409         filename temp;
16410         %em_replace_openoutclass;
16411     %end;
16412     %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
16413         filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
16414         %include temp;
16415         filename temp;
16416         %em_replace_closeoutclass;
16417     %end;
16418  %mend main;
16419
16420  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
16421 +%macro SetProperties;
16422 +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
16423 +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
16424 +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
16425 +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
16426 +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
16427 +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
16428 +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
16429 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
16430 +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
16431 +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
16432 +
16433 +%mend SetProperties;
16434 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_SCORE.SOURCE.
16435 +%macro makeLevelData(data=, outclass=);
16436 +   data REPLACE_MODE;
16437 +      set &OUTCLASS;
16438 +      by NAME;
16439 +      if first.name then do;
16440 +         MODEC    = CRAW;
16441 +         MODEN    = NRAW;
16442 +         NORMMODE = LEVEL;
16443 +         output;
16444 +      end;
16445 +      keep NAME MODEC MODEN NORMMODE UNKWOWNDEFAULT;
16446 +   run;
16448 +   proc sort data=&EM_DATA_VARIABLESET;
16449 +      by NAME;
16450 +   run;
16451 +   data &data;
16452 +      length UNKWOWNDEFAULT $8;
16453 +      merge &OUTCLASS(in=_a) REPLACE_MODE &EM_DATA_VARIABLESET(keep=LABEL LENGTH NAME ROLE LEVEL LABEL FORMAT RENAME=(LEVEL=MLEVEL) where=(MLEVEL ne 'INTERVAL'));
16454 +      by NAME;
16455 +      if LEVEL = '_UNKNOWN_' then UNKWOWNDEFAULT = "&EM_PROPERTY_UNKNOWNLEVEL";
16456 +      if _a then output;
16457 +   run;
16458 +   proc datasets lib=work nolist;
16459 +      delete REPLACE_MODE;
16460 +   run;
16461 +   quit;
16462 +%mend makeLevelData;
16464 +%macro makeNewNames(limitDs=, classValue=, className=);
16465 +     %let varname = invarname;
16466 +     %let newname = outname;
16467 +     proc sort data=&classValue out=&varname nodupkey;
16468 +        by NAME;
16469 +        where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
16470 +     run;
16471 +     %let classnum=0;
16472 +     %let dsid = %sysfunc(open(&varname));
16473 +     %if &dsid>0 %then %do;
16474 +         %let classnum = %sysfunc(attrn(&dsid, NOBS));
16475 +         %let dsid = %sysfunc(close(&dsid));
16476 +     %end;
16478 +     %let varnum=0;
16479 +     %let dsid = %sysfunc(open(&LimitDs));
16480 +     %if &dsid>0 %then %do;
16481 +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
16482 +         %let dsid = %sysfunc(close(&dsid));
16483 +     %end;
16485 +     %if ^&classnum and ^&varnum and ^%sysfunc(exist(&classname)) %then %do;
16486 +         %let lib    = %scan(&classname, 1, .);
16487 +         %let member = %scan(&classname, 2, .);
16488 +          proc datasets lib=&lib nolist;
16489 +             delete &member;
16490 +          run;
16491 +          quit;
16492 +         %goto doendmn;
16493 +     %end;
16495 +     data &varname;
16496 +        set
16497 +        %if &classnum %then %do;
16498 +            &varname(keep=NAME)
16499 +        %end;
16500 +        %if &varnum %then %do;
16501 +            &limitDs(keep=NAME)
16502 +        %end;
16503 +        ;
16504 +     run;
16505 +     proc dmdb data=&varname outtable=&newname(rename=(REP=NEWNAME)) nameserver;
16506 +        names NAME;
16507 +        prefix REP_;
16508 +     run;
16509 +     proc sort data=&newname;
16510 +        by NAME;
16511 +     run;
16513 +     /* Merge the new names with the limits data set */
16514 +     %if %sysfunc(exist(&limitDs)) %then %do;
16515 +         data &limitDs;
16516 +            merge &newname &limitDs(in=a);
16517 +            by NAME;
16518 +            if a then output;
16519 +         run;
16521 +         %let lib    = %scan(&limitDs, 1, .);
16522 +         %let member = %scan(&limitDs, 2, .);
16523 +          proc datasets lib=&lib nolist;
16524 +             modify &member;
16525 +             label NAME    =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
16526 +              NEWNAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_replacevar_vlabel, NOQUOTE))"
16527 +              CALCMETHOD =  "%sysfunc(sasmsg(sashelp.dmine, rpt_calcmethod_vlabel , NOQUOTE))"
16528 +              REPLACEMETHODUSED =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethodused_vlabel, NOQUOTE))"
16529 +              LOWERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
16530 +              REPLACEMINUSED    =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
16531 +              UPPERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))"
16532 +              REPLACEDMAXUSED   =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))"
16533 +              REPLACEMETHOD     =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethod_vlabel, NOQUOTE))"
16534 +              REPLACEMIN =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemin_vlabel, NOQUOTE))"
16535 +              REPLACEMAX =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemax_vlabel, NOQUOTE))"
16536 +              ROLE       =  "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
16537 +              LEVEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))"
16538 +              LABEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
16539 +         run;
16540 +         quit;
16541 +     %end;
16543 +     /* Merge the new names with the Class Value data set */
16544 +     %if %sysfunc(exist(&classValue)) %then %do;
16545 +         data length;
16546 +            retain newlen 0;
16547 +            set &classValue;
16548 +            by NAME;
16549 +            if type eq 'C' then do;
16550 +               if first.name then do;
16551 +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
16552 +                     newlen = max(length, length(strip(replace_value)));
16553 +                  else
16554 +                     newlen = length;
16555 +               end;
16556 +               else do;
16557 +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
16558 +                     newlen = max(newlen, length(strip(replace_value)));
16559 +               end;
16560 +            end;
16561 +            else newlen = length;
16562 +            len=length;
16563 +            if last.name then output;
16564 +            keep name len newlen role format type label mlevel;
16565 +         run;
16566 +         data &className;
16567 +            length rformat formatroot $32;
16568 +            merge &newname(in=a) length(in=b);
16569 +            by NAME;
16570 +            length=len;
16571 +            if newlen > len then do;
16572 +               if type eq 'C' and format ne '' then do;
16573 +                  rformat = strip(reverse(format));
16574 +                  do while(indexc(rformat, '.0123456789')=1);
16575 +                     rformat = substr(rformat, 2);
16576 +                  end;
16577 +                  formatroot= upcase(reverse(rformat));
16578 +                  if strip(formatRoot) in('$','$F','$UPCASE','$CHAR') then do;
16579 +                     format = strip(formatroot)!!strip(put(newlen, best.))!!'.';
16580 +                  end;
16581 +               end;
16582 +               length = newlen;
16583 +            end;
16584 +            if a and b then output;
16585 +            KEEP name newname role format mlevel type label length;
16586 +         run;
16587 +     %end;
16589 +     proc datasets lib=work nolist;
16590 +        delete length &varname &newname;
16591 +     run;
16592 +     quit;
16594 +     %doendmn:
16596 +%mend makeNewNames;
16598 +%macro makeVarDeltaCode(LimitDs=);
16599 +    %if ^%sysfunc(exist(&LimitDs)) %then %goto doendd;
16601 +    filename _F1 "&EM_FILE_CDELTA_TRAIN";
16602 +     data _null_;
16603 +        set &LimitDs end=eof;
16604 +        length string $400;
16605 +        file _F1;
16606 +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
16607 +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
16608 +        %end;
16609 +        %else %do;
16610 +            string = 'if NAME="'!!strip(NAME)!!'" then do;';        put string;
16611 +            string = '   ROLE="REJECTED";';                         put string;
16612 +            string = '   COMMENT= "Replaced by '!!"&EM_NODEID"!!'";'; put string;
16613 +            string = 'end;';                                        put string;
16614 +        %end;
16615 +        put 'else';
16616 +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
16617 +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
16618 +        string = '      LEVEL="'!!strip(LEVEL)!!'";';          put string;
16619 +        put      'end;';
16620 +        if ^eof then
16621 +           put 'else';
16622 +   run;
16623 +   filename _F1;
16625 +    %doendd:
16626 +%mend makeVarDeltaCode;
16628 +%macro makeVarScoreCode(LimitDs=, File=);
16629 +    %if ^%sysfunc(exist(&LimitDs)) or "&File" eq "" %then %goto doendm;
16631 +     filename sFile "&file";
16632 +     data &LimitDs;
16633 +        set &LimitDs end=eof;
16634 +        length REPLACEMETHODUSED $8 string $400;
16635 +        file sFile;
16636 +        put'* ;';
16637 +        put'* Variable: ' name ';';
16638 +        put '* ;';
16639 +        if strip(label) = '' then label = name;
16640 +        string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
16641 +        put string;
16642 +        string= 'Length '!!strip(newname)!!' 8;';
16643 +        put string;
16644 +        put newname '=' name ';';
16645 +        REPLACEMETHODUSED = REPLACEMETHOD;
16646 +        if REPLACEMETHOD = 'DEFAULT' then
16647 +            %if "&EM_PROPERTY_REPLACEMETHOD" = "COMPUTED" %then %do;
16648 +                REPLACEMETHODUSED = 'COMPUTED';
16649 +            %end;
16650 +            %else
16651 +            %if "&EM_PROPERTY_REPLACEMETHOD" = "MISSING" %then %do;
16652 +                REPLACEMETHODUSED = 'MISSING';
16653 +            %end;
16654 +            %else %do;
16655 +                REPLACEMETHODUSED = 'MANUAL';
16656 +            %end;
16658 +        put 'if ' name ' eq . then ' newname  '= . ;';
16659 +        if LowerLimit ne . then do;
16660 +           select(REPLACEMETHODUSED);
16661 +              when('COMPUTED') REPLACEMINUSED = lowerLimit;
16662 +              when('MISSING')  REPLACEMINUSED = .;
16663 +              when('MANUAL')   REPLACEMINUSED = replaceMin;
16664 +              otherwise;
16665 +           end;
16666 +           put 'else';
16667 +           put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
16668 +        end;
16669 +        if upperLimit ne . then do;
16670 +           select(REPLACEMETHODUSED);
16671 +              when('COMPUTED') REPLACEMAXUSED = upperLimit;
16672 +              when('MISSING')  REPLACEMAXUSED = .;
16673 +              when('MANUAL')   REPLACEMAXUSED = replaceMax;
16674 +              otherwise;
16675 +           end;
16676 +           put 'else';
16677 +           put 'if ' name '>' upperLimit  ' then ' newname ' = ' REPLACEMAXUSED ';';
16678 +        end;
16679 +        drop string;
16680 +    run;
16681 +    filename sfile;
16682 +    %doendm:
16683 +%mend makeVarScoreCode;
16686 +%macro makeUnknownOptCode(Folder=, Data=);
16687 +    %if ^%sysfunc(exist(&Data)) %then %goto doendu;
16689 +    %let dsid = %sysfunc(open(&data));
16690 +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
16691 +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
16693 +    %let oldname=;
16694 +    %do %while(^%sysfunc(fetch(&dsid)));
16695 +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
16696 +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
16698 +        %if &name ne &oldname %then %do;
16699 +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
16700 +            data _null_;
16701 +               set &Data end=eof;
16702 +               where NAME ="&name";
16703 +               length string $400;
16704 +               length newlevel replaceLevel $400;
16705 +               retain string missingFlag;
16706 +               file _F1;
16707 +               if _N_=1 then do;
16708 +                  put '*;';
16709 +                  if format ne '' then do;
16710 +                     string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
16711 +                     put string;
16712 +                     put 'if ^(_UFORMAT200 in(';
16713 +                  end;
16714 +                  else do;
16715 +                     if type eq 'C' then do;
16716 +                        string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
16717 +                        put string;
16718 +                        put 'if ^(_UFORMAT200 in(';
16719 +                     end;
16720 +                     else
16721 +                        put 'if (';
16722 +                  end;
16723 +                  string='';
16724 +                  missingFlag = 0;
16725 +               end;
16727 +               if ^eof and LEVEL ne '_UNKNOWN_' then do;
16728 +                  if format ne '' or type eq 'C' then do;
16729 +                     newlevel = tranwrd(strip(LEVEL),'"','""');
16730 +                     if strip(newLevel) = '' then missingFlag = 1;
16731 +                     if length(strip(newlevel))+length(strip(string))+4<80 then do;
16732 +                        if string='' then
16733 +                           string = strip(string)!!' "'!!strip(newlevel)!!'" ';
16734 +                        else
16735 +                           string = strip(string)!!', "'!!strip(newlevel)!!'" ';
16736 +                     end;
16737 +                     else do;
16738 +                        put string;
16739 +                        string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
16740 +                     end;
16741 +                  end;
16742 +                  else do;
16743 +                     string = strip(name)!!' ne '!!strip(level)!!' and ';
16744 +                     put string;
16745 +                  end;
16746 +                  newlevel = ' ';
16747 +               end;
16748 +               else do;
16749 +                  if format ne '' or type eq 'C' then do;
16750 +                     put string;
16751 +                     if ^missingFlag then
16752 +                        string = ', "" )) then ';
16753 +                     else
16754 +                        string = ')) then ';
16755 +                  end;
16756 +                  else
16757 +                     string = strip(name)!!' ne . ) then ';
16758 +                  put string;
16760 +                 select(REPLACE_VALUE);
16761 +                 when('_MODE_') do;
16762 +                    if type eq 'C' then
16763 +                       replaceLevel = NORMMODE;
16764 +                    else
16765 +                       replaceLevel =strip(put(MODEN,BEST.));
16766 +                 end;
16767 +                 when('_MISSING_') do;
16768 +                    if type eq 'C' then replaceLevel = '';
16769 +                    else replaceLevel = '.';
16770 +                 end;
16771 +                 when('_DEFAULT_') do;
16772 +                    %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
16773 +                        if type eq 'C' then
16774 +                           replaceLevel = NORMMODE;
16775 +                        else
16776 +                           replaceLevel = strip(put(MODEN,BEST.));
16777 +                    %end;
16778 +                    %else %do;
16779 +                        if type eq 'C' then replaceLevel = '';
16780 +                         else replaceLevel = '.';
16781 +                    %end;
16782 +                  end;
16783 +                  when('') do;
16784 +                  end;
16785 +                  otherwise do;
16786 +                     if type eq 'C' then replaceLevel= replace_Value;
16787 +                     else replaceLevel = replace_Value;
16788 +                  end;
16789 +               end;
16790 +               if type eq 'C' then do;
16791 +                  string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
16792 +               end;
16793 +               else do;
16794 +                  string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
16795 +               end;
16796 +               put string;
16797 +            end;
16799 +           run;
16800 +           filename _F1;
16801 +           proc datasets lib=work nolist;
16802 +              delete _temp;
16803 +           run;
16804 +           quit;
16806 +           %let oldname = &name;
16807 +        %end;
16808 +    %end;
16809 +    %let dsid = %sysfunc(close(&dsid));
16811 +    %doendu:
16812 +%mend makeUnknownOptCode;
16814 +%macro makeUnknownCode(ScoreFile=, Data=);
16815 +   %if ^%sysfunc(exist(&Data)) %then %goto doendm;
16817 +   filename _F1 "&ScoreFile" MOD;
16818 +   data _null_;
16819 +      set &Data;
16820 +      length string $400;
16821 +      length newlevel replaceLevel $200;
16822 +      retain string missingFlag;
16823 +      file _F1;
16824 +      by NAME;
16826 +      if _N_=1 then do;
16827 +         put '* ;';
16828 +         put '* Replace Unknown Class Levels ;';
16829 +         put '* ;';
16830 +         put 'length _UFORMAT200 $200;';
16831 +         put 'drop   _UFORMAT200;';
16832 +         put '_UFORMAT200 = " ";';
16833 +      end;
16835 +      if first.name then do;
16836 +         missingFlag = 0;
16837 +         put '*;';
16839 +         if format ne '' then do;
16840 +            call symput('UFormatFlag', '1');
16841 +            string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
16842 +            put string;
16843 +            put 'if ^(_UFORMAT200 in(';
16844 +         end;
16845 +         else do;
16846 +            if type eq 'C' then do;
16847 +               call symput('UFormatFlag', '1');
16848 +               string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
16849 +               put string;
16850 +               put 'if ^(_UFORMAT200 in(';
16851 +            end;
16852 +            else
16853 +               put 'if (';
16854 +         end;
16855 +         string='';
16856 +      end;
16858 +      if ^last.name and LEVEL ne '_UNKNOWN_' then do;
16859 +        if format ne '' or type eq 'C' then do;
16860 +           newlevel = tranwrd(strip(LEVEL),'"','""');
16861 +           if strip(newLevel) = '' then missingFlag = 1;
16862 +           if length(strip(newlevel))+length(strip(string))+4<80 then do;
16863 +              if string='' then
16864 +                 string = strip(string)!!' "'!!strip(newlevel)!!'" ';
16865 +              else
16866 +                 string = strip(string)!!', "'!!strip(newlevel)!!'" ';
16867 +           end;
16868 +           else do;
16869 +              put string;
16870 +              string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
16871 +           end;
16872 +        end;
16873 +        else do;
16874 +           string = strip(name)!!' ne '!!strip(level)!!' and ';
16875 +           put string;
16876 +        end;
16877 +        newlevel = ' ';
16878 +     end;
16879 +     else do;
16880 +        if format ne '' or type eq 'C' then do;
16881 +           put string;
16882 +           if ^missingFlag then
16883 +              string = ', "" )) then ';
16884 +           else
16885 +              string = ')) then ';
16886 +        end;
16887 +        else
16888 +           string = strip(name)!!' ne . ) then ';
16889 +        put string;
16891 +        select(REPLACE_VALUE);
16892 +           when('_MODE_') do;
16893 +              if type eq 'C' then
16894 +                 replaceLevel = NORMMODE;
16895 +              else
16896 +                 replaceLevel =strip(put(MODEN,BEST.));
16897 +           end;
16898 +           when('_MISSING_') do;
16899 +              if type eq 'C' then replaceLevel = '';
16900 +              else replaceLevel = '.';
16901 +           end;
16902 +           when('_DEFAULT_') do;
16903 +              %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
16904 +                  if type eq 'C' then
16905 +                     replaceLevel = NORMMODE;
16906 +                  else
16907 +                     replaceLevel = strip(put(MODEN,BEST.));
16908 +              %end;
16909 +              %else %do;
16910 +                  if type eq 'C' then replaceLevel = '';
16911 +                  else replaceLevel = '.';
16912 +              %end;
16913 +           end;
16914 +           when('') do;
16915 +           end;
16916 +           otherwise do;
16917 +               if type eq 'C' then replaceLevel= replace_Value;
16918 +               else replaceLevel = replace_Value;
16919 +           end;
16920 +        end;
16921 +        if type eq 'C' then do;
16922 +           string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
16923 +        end;
16924 +        else do;
16925 +           string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
16926 +        end;
16927 +        put string;
16928 +     end;
16930 +     run;
16931 +     filename _F1;
16932 +    %doendm:
16933 +%mend makeUnknownCode;
16935 +%macro makeReplaceCode(ScoreFile=, Data=);
16936 +   filename _F1 "&ScoreFile"  MOD;
16937 +   data _null_;
16938 +      length string $400;
16939 +      set &data end=eof;
16940 +      file _F1;
16941 +      by NAME;
16942 +      if _N_=1 then do;
16943 +         put '   ';
16944 +         put '* ;';
16945 +         put '* Replace Specific Class Levels ;';
16946 +         put '* ;';
16947 +         put 'length _UFormat200 $200;';
16948 +         put 'drop   _UFORMAT200;';
16949 +         put '_UFORMAT200 = " ";';
16950 +      end;
16951 +      if first.name then do;
16952 +         put '* ;';
16953 +         string = '* Variable: '!!strip(NAME)!!';';
16954 +         put string;
16955 +         put '* ;';
16956 +         if format ne '' then do;
16957 +            call symput('UFormatFlag', '1');
16958 +            string = "_UFORMAT200 = strip("; put string;
16959 +            string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
16960 +            put string;
16961 +         end;
16962 +         else
16963 +           if type eq 'C' then do;
16964 +              call symput('UFormatFlag', '1');
16965 +              string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
16966 +              put string;
16967 +           end;
16968 +      end;
16969 +      if ^first.name then
16970 +         put 'else';
16971 +      if format ne '' then do;
16972 +         string = tranwrd(strip(LEVEL),'"','""');
16973 +         string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
16974 +         put string;
16975 +      end;
16976 +      else do;
16977 +         if type eq 'N' then do;
16978 +            string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
16979 +            put string;
16980 +         end;
16981 +         else do;
16982 +            string = tranwrd(strip(craw),'"','""');
16983 +            string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
16984 +            put string;
16985 +         end;
16986 +      end;
16987 +      string = strip(newname)!!'=';
16988 +      if type eq 'C' then do;
16989 +         if upcase(replace_value) eq '_MISSING_' or
16990 +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
16991 +         else
16992 +           if upcase(replace_value) eq '_MODE_' or
16993 +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
16994 +            then replace_Value =modec;
16995 +           string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
16996 +      end;
16997 +      else do;
16998 +         if upcase(replace_value) eq '_MISSING_' or
16999 +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
17000 +         else
17001 +           if upcase(replace_value) eq '_MODE_' or
17002 +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
17003 +                  replace_Value =strip(put(moden, BEST.));
17005 +         string = strip(string)!!''!!strip(replace_value)!!';';
17006 +      end;
17007 +      put string;
17008 +    run;
17009 +    filename _F1;
17011 +%mend makeReplaceCode;
17013 +%macro makeReplaceOptCode(Folder=, Data=);
17014 +    %if ^%sysfunc(exist(&Data)) %then %goto doendr;
17016 +    %let dsid = %sysfunc(open(&data));
17017 +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
17018 +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
17020 +    %let oldname=;
17021 +    %do %while(^%sysfunc(fetch(&dsid)));
17022 +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
17023 +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
17025 +        %if &name ne &oldname %then %do;
17026 +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
17027 +            data _null_;
17028 +               length string $400;
17029 +               set &Data end=eof;
17030 +               by NAME;
17031 +               where NAME ="&name";
17032 +               file _F1;
17033 +               if _N_=1 then do;
17034 +                  put '* ;';
17035 +                  string = '* Variable: '!!strip(NAME)!!';';
17036 +                  put string;
17037 +                  put '* ;';
17038 +                  if format ne '' then do;
17039 +                     string = "_UFORMAT200 = strip("; put string;
17040 +                     string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
17041 +                     put string;
17042 +                  end;
17043 +                  else
17044 +                     if type eq 'C' then do;
17045 +                        call symput('UFormatFlag', '1');
17046 +                        string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
17047 +                        put string;
17048 +                    end;
17049 +               end;
17050 +               if ^first.name then
17051 +                  put 'else';
17052 +               if format ne '' then do;
17053 +                  string = tranwrd(strip(LEVEL),'"','""');
17054 +                  string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
17055 +                  put string;
17056 +               end;
17057 +               else do;
17058 +                  if type eq 'N' then do;
17059 +                     string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
17060 +                     put string;
17061 +                  end;
17062 +                  else do;
17063 +                     string = tranwrd(strip(craw),'"','""');
17064 +                     string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
17065 +                     put string;
17066 +                  end;
17067 +               end;
17068 +               string = strip(newname)!!'=';
17069 +               if type eq 'C' then do;
17070 +                  if upcase(replace_value) eq '_MISSING_' or
17071 +                     (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
17072 +                  else
17073 +                     if upcase(replace_value) eq '_MODE_' or
17074 +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
17075 +                       then replace_Value =modec;
17076 +                          string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
17077 +               end;
17078 +              else do;
17079 +                 if upcase(replace_value) eq '_MISSING_' or
17080 +                    (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
17081 +                 else
17082 +                    if upcase(replace_value) eq '_MODE_' or
17083 +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
17084 +                        replace_Value =strip(put(moden, BEST.));
17086 +                 string = strip(string)!!''!!strip(replace_value)!!';';
17087 +              end;
17088 +             put string;
17089 +          run;
17090 +          filename _F1;
17092 +           %let oldname = &name;
17093 +        %end;
17094 +    %end;
17095 +    %let dsid = %sysfunc(close(&dsid));
17097 +    %doendr:
17099 +%mend makeReplaceOptCode;
17102 +%macro makeNewVarCode(ScoreFile=, Data=);
17103 +   filename _F1 "&ScoreFile"  MOD;
17104 +   data _null_;
17105 +     length string $400;
17106 +      set &data end=eof;
17107 +      file _F1;
17108 +      if _N_=1 then do;
17109 +         put '   ';
17110 +         put '* ;';
17111 +         put '* Defining New Variables;';
17112 +         put '* ;';
17113 +      end;
17114 +      if type eq 'C' then do;
17115 +         string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
17116 +         put string;
17117 +      end;
17118 +      else do;
17119 +         string = 'Length '!!strip(newname)!!' 8;';
17120 +         put string;
17121 +      end;
17123 +      if strip(label) = '' then label = name;
17124 +      string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
17125 +      put string;
17127 +      if format ne '' then do;
17128 +         string ='format '!!strip(newname)!!' '!!strip(format)!!';';
17129 +         put string;
17130 +      end;
17131 +      string = strip(newname)!!'= '!!strip(NAME)!!';';
17132 +      put string;
17133 +   run;
17134 +%mend makeNewVarCode;
17136 +%macro makeNewVarOptCode(Folder=, Data=);
17137 +    %if ^%sysfunc(exist(&data)) or "&Folder" eq "" %then %goto doendo;
17138 +    data _temp_;set &data;run;
17139 +    %let dsid = %sysfunc(open(_temp_));
17140 +    %let nobs  = %sysfunc(attrn(&dsid, NLOBS));
17141 +    %do %while(^%sysfunc(fetch(&dsid)));
17142 +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
17143 +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
17145 +        filename _F1 "&Folder.&em_dsep.&newname..sas";
17146 +        data _null_;
17147 +           length string $400;
17148 +           set &data;
17149 +           where NEWNAME="&newname";
17150 +           file _F1;
17151 +           put '   ';
17152 +           put '* ;';
17153 +           put "* Defining: &newname;";
17154 +           put '* ;';
17155 +           if type eq 'C' then  do;
17156 +              string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
17157 +              put string;
17158 +           end;
17159 +           else do;
17160 +              string = 'Length '!!strip(newname)!!' 8;';
17161 +              put string;
17162 +           end;
17163 +           if strip(label) = '' then label = name;
17164 +           string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
17165 +           put string;
17166 +           if format ne '' then do;
17167 +              string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
17168 +              put string;
17169 +           end;
17170 +           string = strip(newname)!!'='!!strip(name)!!';';
17171 +           put string;
17172 +        run;
17173 +    %end;
17174 +    %let dsid = %sysfunc(close(&dsid));
17175 +   %doendo:
17176 +%mend makeNewVarOptCode;
17178 +%macro makeClassScoreCode(LevelData=, nameData=_newNames);
17179 +   %let UFormatFlag = 0;
17181 +   %em_register(key=REPLACECODE, type=FOLDER);
17183 +   /* Generating New Variable Score Code */
17184 +   %makeNewVarCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE,  Data=&nameData);
17186 +   data _tempNewVars;
17187 +      set &nameData;
17188 +      where ROLE ne 'TARGET';
17189 +   run;
17190 +   %makeNewVarCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_tempNewVars);
17191 +   %makeNewVarOptCode(Folder=&em_user_replacecode, Data=_tempNewVars);
17193 +   proc datasets lib=WORK nolist;
17194 +      delete _tempNewVars;
17195 +   run;
17196 +   quit;
17198 +   /* Generating Publish Score Code */
17199 +   data _temp;
17200 +      set &LevelData;
17201 +      where ROLE ne 'TARGET' and LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
17202 +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
17203 +      keep NAME;
17204 +   run;
17206 +   data _temp;
17207 +      merge _temp(in=_a) &Leveldata &nameData;
17208 +      by NAME;
17209 +      if _a then output;
17210 +   run;
17212 +   %makeUnknownCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
17213 +   %makeUnknownOptCode(Folder=&em_user_replacecode,        Data=_temp);
17214 +   proc datasets lib=work nolist;
17215 +      delete _temp;
17216 +   run;
17217 +   quit;
17219 +   data _temp;
17220 +      merge &LevelData(in=_a where=( ROLE ne 'TARGET' and LEVEL ne '_UNKNOWN_' and
17221 +        (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) ))  &nameData;
17222 +      by NAME;
17223 +      if _a then output;
17224 +   run;
17226 +   %makeReplaceCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
17227 +   %makeReplaceOptCode(Folder=&em_user_replacecode,        Data=_temp);
17229 +   /* Generating Flow Score Code */
17230 +   data _temp;
17231 +      set &LevelData;
17232 +      where LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
17233 +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
17234 +      keep NAME;
17235 +   run;
17237 +   data _temp;
17238 +      merge _temp(in=_a) &Leveldata &nameData;
17239 +      by NAME;
17240 +      if _a then output;
17241 +   run;
17242 +   %makeUnknownCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
17244 +   data _temp;
17245 +      merge &LevelData(in=_a where=(LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
17246 +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) &nameData;
17247 +      by NAME;
17248 +      if _a then output;
17249 +   run;
17251 +   %makeReplaceCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
17253 +   %if "&UFormatFlag" = "1" %then %do;
17254 +       filename _F1 "&em_user_replacecode&em_dsep._ALL_.sas" MOD;
17255 +       data _null_;
17256 +          file _F1;
17257 +          put 'length _UFormat200 $200;';
17258 +          put 'drop   _UFORMAT200;';
17259 +          put '_UFORMAT200 = " ";';
17260 +       run;
17261 +       filename _F1;
17262 +   %end;
17264 +%mend makeClassScoreCode;
17266 +%macro makeClassDeltaCode(nameData=_newNames);
17267 +   %if ^%sysfunc(exist(&nameData)) %then %goto doendm;
17269 +   filename _F1 "&EM_FILE_CDELTA_TRAIN" MOD;
17270 +   data _null_;
17271 +        set &nameData end=eof;
17272 +        length string $400;
17273 +        file _F1;
17274 +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
17275 +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
17276 +        %end;
17277 +        %else %do;
17278 +            string = 'if NAME="'!!strip(NAME)!!'" then ROLE="REJECTED";'; put string;
17279 +        %end;
17280 +        put 'else';
17281 +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
17282 +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
17283 +        string = '      LEVEL="'!!strip(MLEVEL)!!'";';         put string;
17284 +        put      'end;';
17285 +        if ^eof then
17286 +           put 'else';
17287 +   run;
17288 +   %doendm:
17289 +   filename _F1;
17290 +%mend makeClassDeltaCode;
17292 +%macro makeValueReport(Data=, outData=);
17293 +   data &outData;
17294 +      set &data;
17295 +      where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
17296 +      if LEVEL = '_UNKNOWN_' then do;
17297 +         LEVEL='Unknown';
17298 +         %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
17299 +         if REPLACE_VALUE in('_MODE_', '_DEFAULT_') then REPLACE_VALUE = strip(NORMMODE);
17300 +         else
17301 +            if REPLACE_VALUE ='_MISSING_' then do;
17302 +               if type eq 'N' then REPLACE_VALUE='.';
17303 +               else REPLACE_VALUE='_blank_';
17304 +            end;
17305 +         %end;
17306 +         %else  %do;
17307 +         if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
17308 +         else
17309 +            if REPLACE_VALUE in('_MISSING_', '_DEFAULT_') then do;
17310 +               if type eq 'N' then REPLACE_VALUE='.';
17311 +               else REPLACE_VALUE='_blank_';
17312 +            end;
17313 +         %end;
17314 +      end;
17315 +      else do;
17316 +         if REPLACE_VALUE ='_MISSING_' then do;
17317 +            if type eq 'N' then REPLACE_VALUE='.';
17318 +            else REPLACE_VALUE='_blank_';
17319 +         end;
17320 +         else
17321 +            if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
17322 +      end;
17323 +      keep NAME LEVEL CRAW NRAW REPLACE_VALUE TYPE LABEL ;
17324 +   run;
17325 +%mend makeValueReport;
17327 +%macro makeVarOptCode(LimitDs=, Folder=);
17328 +    %if ^%sysfunc(exist(&LimitDs)) or "&Folder" eq "" %then %goto doendo;
17330 +    %let dsid = %sysfunc(open(&limitDs));
17331 +    %do %while(^%sysfunc(fetch(&dsid)));
17332 +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
17333 +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
17335 +    filename sfile "&Folder.&em_dsep.&newname..sas";
17336 +    data _null_;
17337 +       length string $400;
17338 +       set &LimitDs;
17339 +       where NEWNAME="&newname";
17340 +       file sfile;
17341 +       put '* ;';
17342 +       string = '*Variable: '!!strip(name)!!';';
17343 +       put string;
17344 +       put '* ;';
17345 +       if label eq '' then
17346 +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
17347 +       else
17348 +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
17349 +       put string;
17350 +       string = 'length '!!strip(newname)!!' 8;';
17351 +       put string;
17352 +       string = strip(newname)!!'= '!!strip(NAME)!!';';
17353 +       put string;
17354 +       replacemin = .;
17355 +       string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
17356 +       put string;
17357 +       if LowerLimit ne . then do;
17358 +          if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
17359 +          if ReplaceMethodUsed="MANUAL"   then replaceMin = ReplaceMinUsed;
17360 +          put 'else';
17361 +          string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.))
17362 +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
17363 +          put string;
17364 +       end;
17365 +       if UpperLimit ne . then do;
17366 +          if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
17367 +          if ReplaceMethodUsed="MANUAL"   then replaceMax = ReplaceMaxUsed;
17368 +          put 'else';
17369 +          string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.))
17370 +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
17371 +          put string;
17372 +       end;
17373 +        run;
17374 +        filename sfile;
17375 +    %end;
17376 +    %let dsid = %sysfunc(close(&dsid));
17378 +    %doendo:
17379 +%mend makeVarOptCode;
17381 +%macro score;
17382 +   %em_register(key=REPLACECODE, type=FOLDER);
17384 +   filename x catalog 'sashelp.emutil.em_deldir.source';
17385 +   %inc x;
17386 +   filename x;
17387 +   %delDir(folder=%nrbquote(&em_user_replacecode));
17389 +   data _null_; length rc $200;
17390 +      rc = dcreate('REPLACECODE', "&EM_NODEDIR");
17391 +   run;
17393 +   filename _F1 "&EM_FILE_EMFLOWSCORECODE";
17394 +   filename _F2 "&EM_FILE_EMPUBLISHSCORECODE";
17395 +   filename _F3 "&EM_FILE_CDELTA_TRAIN";
17396 +   data _null_;
17397 +      rc=fdelete('_F1');
17398 +      rc=fdelete('_F2');
17399 +      rc=fdelete('_F3');
17400 +   run;
17401 +   filename _F1;
17402 +   filename _F2;
17403 +   filename _F3;
17405 +   %em_getname(key=OUTCLASS,  type=DATA);
17406 +   %em_getname(key=LIMITS, type=DATA);
17407 +   %em_getname(key=CLASSINFO, type=DATA);
17409 +   /* Retrieve Replacement Values for Class Variables */
17410 +   %makeLevelData(outclass=&em_user_outclass, data=CLASSTEMP);
17412 +   /* Generate Names for Replaced Variables */
17413 +   %makeNewNames(limitDs =&em_user_limits, classValue=CLASSTEMP, classname=&em_user_classinfo);
17415 +   /* Generate score and delta code for Var Variables */
17416 +   %if %sysfunc(exist(&EM_USER_LIMITS)) %then %do;
17417 +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMFLOWSCORECODE);
17418 +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMPUBLISHSCORECODE);
17419 +       %makeVarOptCode(LimitDs= &EM_USER_LIMITS,    Folder=&em_user_replacecode);
17420 +       %makeVarDeltaCode(LimitDs = &EM_USER_LIMITS);
17422 +       proc print data=&EM_USER_LIMITS label noobs;
17423 +          var Name newname lowerLimit REPLACEMINUSED UpperLimit REPLACEMAXUSED;
17424 +          label REPLACEMINUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
17425 +                REPLACEMAXUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))";
17426 +          title9  ' ';
17427 +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varlimits_title, NOQUOTE))";
17428 +       run;
17429 +       title10;
17430 +  %end;
17432 +   %if %sysfunc(exist(&EM_USER_CLASSINFO)) %then %do;
17433 +       %makeClassScoreCode(LevelData=CLASSTEMP, nameData=&em_user_classinfo);
17434 +       %makeClassDeltaCode(nameData=&em_user_classinfo);
17435 +   %end;
17437 +   %em_getname(key=VALUES, type=DATA);
17438 +   %makeValueReport(data=CLASSTEMP, outData=&EM_USER_VALUES);
17439 +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
17440 +       %let nobs = 0;
17441 +       %let dsid = %sysfunc(open(&EM_USER_VALUES));
17442 +       %if &dsid %then %do;
17443 +           %let nobs =  %sysfunc(attrn(&dsid, NOBS));
17444 +           %let dsid = %sysfunc(close(&dsid));
17445 +       %end;
17446 +       %if &nobs %then
17447 +           %EM_REPORT(key=VALUES, viewtype=DATA, block=MODEL, description=ReplaceLevels,autoDisplay=N);
17448 +   %end;
17450 +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
17451 +       proc print data=&EM_USER_VALUES label noobs;
17452 +          title9  ' ';
17453 +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classreplacement_title, NOQUOTE))";
17454 +      run;
17455 +      title10;
17456 +  %end;
17458 +   proc datasets lib=work nolist;
17459 +      delete CLASSTEMP;
17460 +   run;
17461 +   quit;
17463 +   %em_register(key=EMSCOREVAR, type=DATA);
17464 +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
17465 +   proc datasets lib=&em_lib nolist;
17466 +      delete &scorevarDs;
17467 +   run;
17468 +   quit;
17470 +   %let filrf=mydir;
17471 +   %let rc=%sysfunc(filename(filrf,&em_user_replacecode));
17472 +   %let did=%sysfunc(dopen(&filrf));
17474 +   %if &did %then %do;
17475 +       %let memcount=%sysfunc(dnum(&did));
17476 +       %if &memcount > 0 %then %do;
17477 +           data &em_user_emscorevar;
17478 +              length Name $32 formula $70 file $200;
17479 +              keep NAME Formula file;
17481 +           %if %sysfunc(fileexist(&em_user_replacecode&em_dsep._ALL_.sas)) %then %do;
17482 +               name=''; file="REPLACECODE&em_dsep._ALL_.sas";
17483 +               output;
17484 +           %end;
17485 +           %do i=1 %to &memcount;
17486 +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
17487 +               %let newvar = %scan(&name, 1, .);
17488 +               %if "&newvar" ne "_ALL_" %then %do;
17489 +                   name = "&newvar"; file="REPLACECODE&em_dsep&name";
17490 +                   output;
17491 +               %end;
17492 +           %end;
17493 +           run;
17494 +       %end;
17495 +  %end;
17496 +  %if &did %then %let did = %sysfunc(dclose(&did));
17499 +%mend score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_DELDIR.SOURCE.
17500 +%macro delDir(folder=);
17501 +   %let filrf=mydir;
17502 +   %let rc=%sysfunc(filename(filrf,&folder));
17503 +   %let did=%sysfunc(dopen(&filrf));
17504 +
17505 +   %if &did %then %do;
17506 +       %let memcount=%sysfunc(dnum(&did));
17507 +       %if &memcount > 0 %then %do;
17508 +           %do i=1 %to &memcount;
17509 +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
17510 +               data _null_;
17511 +                  fname="_temp&i";
17512 +                  rc=filename(fname,"&folder&em_dsep.&name");
17513 +                  if rc = 0 and fexist(fname) then
17514 +                     rc=fdelete(fname);
17515 +                  rc=filename(fname);
17516 +               run;
17517 +           %end;
17518 +       %end;
17519 +       %let rc=%sysfunc(dclose(&did));
17520 +   %end;
17521 +   %let rc = %sysfunc(fdelete(&filrf));
17522 +   %let rc=%sysfunc(filename(filrf));
17523 +%mend delDir;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref X has been deassigned.
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref _F1 has been deassigned.
NOTE: Fileref _F2 has been deassigned.
NOTE: Fileref _F3 has been deassigned.
 
WARNING: The variable UNKWOWNDEFAULT in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 42 observations read from the data set EMWS6.REPL_OUTCLASS.
NOTE: The data set WORK.REPLACE_MODE has 6 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set EMWS6.REPL_VARIABLESET.
NOTE: The data set EMWS6.REPL_VARIABLESET has 12 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This might cause unexpected results.
NOTE: There were 42 observations read from the data set EMWS6.REPL_OUTCLASS.
NOTE: There were 6 observations read from the data set WORK.REPLACE_MODE.
NOTE: There were 7 observations read from the data set EMWS6.REPL_VARIABLESET.
      WHERE MLEVEL not = 'INTERVAL';
NOTE: The data set WORK.CLASSTEMP has 42 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.REPLACE_MODE (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: The data set WORK.INVARNAME has 0 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file EMWS6.REPL_CLASSINFO (memtype=DATA) was not found, but appears on a DELETE statement.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: The data set EMWS6.REPL_VALUES has 0 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: No observations in data set EMWS6.REPL_VALUES.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CLASSTEMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file EMWS6.REPL_EMSCOREVAR (memtype=DATA) was not found, but appears on a DELETE statement.
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17524  *------------------------------------------------------------*;
17525  * End SCORE: Repl;
17526  *------------------------------------------------------------*;
17527
 
17528  *------------------------------------------------------------*;
17529  * Repl: Scoring DATA data;
17530  *------------------------------------------------------------*;
17531  data EMWS6.Repl_TRAIN
17532  / view=EMWS6.Repl_TRAIN
17533  ;
17534  set EMWS6.Filter_TRAIN
17535  ;
17536  run;
 
NOTE: DATA STEP view saved on file EMWS6.REPL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS6.FILTER_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
 
17537  quit;
 
17539  *------------------------------------------------------------*;
17540  * Repl: Computing metadata for TRAIN data;
17541  *------------------------------------------------------------*;
 
NOTE: View EMWS6.REPL_TRAIN.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
 
NOTE: View EMWS6.REPL_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                May 13, 2018
Time:                20:45:06
*------------------------------------------------------------*
17896  %let EMEXCEPTIONSTRING=;
17897  *------------------------------------------------------------*;
17898  * REPORT: Repl;
17899  *------------------------------------------------------------*;
17900  %let EM_ACTION = REPORT;
17901  %let syscc = 0;
17902  filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
17903  %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
17905 +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
17907 +   filename macFile catalog 'work.emutil.macro.source';
17908 +   %let _METAOBS = 0;
17909 +   %let _maxvar = &maxvar;
17910 +   %if "&_maxvar" eq "" %then %let maxvar = -1;
17912 +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
17913 +                   or (&metadata eq ) %then %do;
17914 +       %put * No metadata data set defined;
17915 +       %goto doend;
17916 +   %end;
17918 +   data _null_;
17919 +      length _STRING_ $80;
17920 +      retain _STRING_ '' maxvar 0;
17921 +      set &metadata end=eof;
17922 +      file macFile;
17923 +      %if %nrbquote(&where) ne %then %do;
17924 +          %let whereClause = where (%nrbquote(&where));
17925 +          %unquote(&whereClause);
17926 +      %end;
17927 +      if _N_=1 then do;
17928 +         string = "%"!!"macro &name;";
17929 +         put string;
17930 +      end;
17931 +      maxvar +1;
17932 +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
17933 +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
17934 +         if eof
17935 +            %if  %sysevalf(&_maxvar > 0) %then %do;
17936 +                or maxvar >= &maxvar
17937 +            %end;
17938 +            then do;
17939 +            put _STRING_;
17940 +            string = "%"!!"mend &name;";
17941 +            put string;
17942 +            string = strip(put(_N_, best.));
17943 +            call symput('_METAOBS', string);
17944 +            %if (&nummacro ne ) %then %do;
17945 +                put "%" "global &nummacro;";
17946 +                put "%" "let &nummacro = " string ";";
17947 +            %end;
17948 +            stop;
17949 +         end;
17950 +      end;
17951 +      else do;
17952 +         put _STRING_;
17953 +         _string_ = TRIM(&key);
17954 +         if eof
17955 +            %if  %sysevalf(&_maxvar > 0) %then %do;
17956 +              or maxvar >= &maxvar
17957 +           %end;
17958 +            then do;
17959 +            put _STRING_;
17960 +            string = "%"!!"mend &name;";
17961 +            put string;
17962 +        end;
17963 +      end;
17964 +      if eof
17965 +         %if  %sysevalf(&_maxvar > 0) %then %do;
17966 +             or maxvar >= &maxvar
17967 +         %end;
17968 +         then do;
17969 +         string = strip(put(_N_, best.));
17970 +         call symput('_METAOBS', string);
17971 +         %if (&nummacro ne ) %then %do;
17972 +             put "%" "global &nummacro;";
17973 +             put "%" "let &nummacro = " string ";";
17974 +         %end;
17975 +         stop;
17976 +      end;
17977 +   run;
17979 +   %doend:
17980 +   %if ^&_METAOBS %then %do;
17981 +       data _null_;
17982 +          file macFile;
17983 +          put "%" "macro &name;";
17984 +          put "%" "mend &name;";
17985 +          %if (&nummacro ne ) %then %do;
17986 +              put "%" "global &nummacro;";
17987 +              put "%" "let &nummacro = 0;";
17988 +          %end;
17989 +      run;
17990 +   %end;
17991 +   %inc macFile;
17992 +   filename macFile;
17993 +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
17994  filename X;
NOTE: Fileref X has been deassigned.
17995   %macro main;
17996
17997     filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
17998     %include temp;
17999     filename temp;
18000
18001     %if %upcase(&EM_ACTION) = CREATE %then %do;
18002
18003         filename temp catalog 'sashelp.emmdfy.Replace_create.source';
18004         %include temp;
18005         filename temp;
18006         %create;
18007     %end;
18008     %else
18009     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18010
18011         filename temp catalog 'sashelp.emmdfy.Replace_train.source';
18012         %include temp;
18013         filename temp;
18014         %train;
18015     %end;
18016     %else
18017     %if %upcase(&EM_ACTION) = SCORE %then %do;
18018
18019         filename temp catalog 'sashelp.emmdfy.Replace_score.source';
18020         %include temp;
18021         filename temp;
18022         %score;
18023     %end;
18024     %if %upcase(&EM_ACTION) = REPORT %then %do;
18025
18026         filename temp catalog 'sashelp.emmdfy.Replace_report.source';
18027         %include temp;
18028         filename temp;
18029         %report;
18030     %end;
18031     %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
18032         filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
18033         %include temp;
18034         filename temp;
18035         %em_replace_openoutclass;
18036     %end;
18037     %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
18038         filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
18039         %include temp;
18040         filename temp;
18041         %em_replace_closeoutclass;
18042     %end;
18043  %mend main;
18044
18045  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
18046 +%macro SetProperties;
18047 +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
18048 +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
18049 +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
18050 +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
18051 +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
18052 +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
18053 +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
18054 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
18055 +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
18056 +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
18057 +
18058 +%mend SetProperties;
18059 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_REPORT.SOURCE.
18060 +%macro makeNameDs(namedata=, limitDs=, classname=);
18061 +    %let classnum=0;
18062 +    %let dsid = %sysfunc(open(&classname));
18063 +    %if &dsid>0 %then %do;
18064 +        %let classnum = %sysfunc(attrn(&dsid, NOBS));
18065 +        %let dsid = %sysfunc(close(&dsid));
18066 +    %end;
18067 +
18068 +    %let varnum=0;
18069 +    %let dsid = %sysfunc(open(&LimitDs));
18070 +    %if &dsid>0 %then %do;
18071 +        %let varnum = %sysfunc(attrn(&dsid, NOBS));
18072 +        %let dsid = %sysfunc(close(&dsid));
18073 +    %end;
18074 +    %if ^&varnum and  ^&classnum %then %goto doendmnd;
18075 +
18076 +    data &nameData;
18077 +       set
18078 +       %if &varnum %then %do;
18079 +          &limitDs
18080 +      %end;
18081 +      %if &classnum %then %do;
18082 +          &classname
18083 +      %end;
18084 +    ;
18085 +    run;
18086 +    proc sort data=&nameData;
18087 +       by name;
18088 +    run;
18089 +
18090 +    %doendmnd:
18091 +%mend makeNameDs;
18092 +
18093 +%macro countReplace(FileRef1=, dataRole=, data=, CountData=);
18094 +   %if (^%sysfunc(exist(&data)) and ^%sysfunc(exist(&data, VIEW))) or (&data eq ) %then %goto doendm;
18095 +
18096 +   data _temp;
18097 +      length DataRole $8;
18098 +      DataRole ="&DataRole";
18099 +      array _ReplaceCount{&ReplaceNum} (
18100 +      %do i=1 %to &ReplaceNum;
18101 +          0
18102 +      %end;
18103 +      );
18104 +      array _DIFF{&ReplaceNum};
18105 +      retain _ReplaceCount1 -- _ReplaceCount&ReplaceNum;
18106 +      set &data end=eof;
18107 +      %inc &FileRef1;
18108 +      do i=1 to &ReplaceNum;
18109 +         if _DIFF(i) then _ReplaceCount(i) = _ReplaceCount(i)+1;
18110 +      end;
18111 +      keep DataRole _ReplaceCount:;
18112 +      if eof then
18113 +         output;
18114 +   run;
18115 +   proc append base=&CountData data=_temp;
18116 +   run;
18117 +   proc datasets lib=WORK nolist;
18118 +      delete _temp;
18119 +   run;
18120 +
18121 +   %doendm:
18122 +
18123 +%mend;
18124 +
18125 +%macro makeCountReport(nameData=, outData=countData);
18126 +   %if ^%sysfunc(exist(&nameData))%then %goto doendmc;
18127 +
18128 +   %global ReplaceNum;
18129 +   %let ReplaceNum=0;
18130 +   %let dsid = %sysfunc(open(&namedata));
18131 +   %if &dsid>0 %then %do;
18132 +       %let ReplaceNum = %sysfunc(attrn(&dsid, NOBS));
18133 +       %let dsid = %sysfunc(close(&dsid));
18134 +   %end;
18135 +   %if ^&ReplaceNum %then %goto doendmc;
18136 +
18137 +   %EM_REGISTER(key=DiffCode, TYPE=FILE, EXTENSION=sas);
18138 +   filename _F1 "&EM_USER_DiffCode";
18139 +
18140 +   data _null_;
18141 +      length string $200;
18142 +      set &namedata;
18143 +      file _F1;
18144 +      string = 'Label '!!'_ReplaceCount'!!strip(put(_N_,BEST.))!!' = "'!!strip(name)!!'";';
18145 +      put string;
18146 +      string = 'if '!!strip(NAME)!!' ne '!!strip(newname)!!' then ';
18147 +      put string;
18148 +      string = '_DIFF'!!strip(put(_N_,BEST.))!!'= 1;';
18149 +      put string;
18150 +      put ' else ';
18151 +      string = '_DIFF'!!strip(put(_N_,BEST.))!!'= 0;';
18152 +      put string;
18153 +   run;
18154 +   %countReplace(FileRef1=_F1, dataRole=Train, data=&EM_EXPORT_TRAIN,    CountData=_tempCount);
18155 +   %countReplace(FileRef1=_F1, dataRole=Valide,data=&EM_EXPORT_VALIDATE, CountData=_tempCount);
18156 +   %countReplace(FileRef1=_F1, dataRole=Test,  data=&EM_EXPORT_TEST,     CountData=_tempCount);
18157 +
18158 +   filename _F1;
18159 +
18160 +   %let validateFlag = 0;
18161 +   %let testFlag     = 0;
18162 +   %if (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE, VIEW)))
18163 +                  and (&EM_IMPORT_VALIDATE ne ) %then %do;
18164 +        %let validateFlag = 1;
18165 +    %end;
18166 +    %if (%sysfunc(exist(&EM_IMPORT_TEST)) or %sysfunc(exist(&EM_IMPORT_TEST, VIEW)))
18167 +                    and (&EM_IMPORT_TEST ne ) %then %do;
18168 +          %let testFlag   = 1;
18169 +    %end;
18170 +
18171 +    proc transpose data=_tempCount out=&outData(drop=_NAME_ rename=(_LABEL_=NAME Col1=TRAIN
18172 +      %if &validateFlag = 1 %then %do;
18173 +          Col2=VALIDATE
18174 +      %end;
18175 +      %if &testFlag = 1 %then %do;
18176 +          Col3=TEST
18177 +      %end;
18178 +
18179 +      ));
18180 +   run;
18181 +
18182 +   %let lib = WORK;
18183 +   %if %index(&outData, .) %then %do;
18184 +       %let lib    = %scan(&outData, 1, .);
18185 +       %let member = %scan(&outData, 2, .);
18186 +   %end;
18187 +   %else
18188 +       %let member = &outData;
18189 +  proc sort data=&outdata;
18190 +     by name;
18191 +  run;
18192 +  data &outData;
18193 +      merge &namedata(keep=NAME ROLE LABEL) &outData;
18194 +      by NAME;
18195 +   run;
18196 +   proc datasets lib=&lib nolist;
18197 +      modify &member;
18198 +      label NAME =  "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
18199 +            ROLE =  "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel   , NOQUOTE))"
18200 +            LABEL=  "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))"
18201 +            TRAIN=  "%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel   , NOQUOTE))"
18202 +      %if &validateFlag = 1 %then %do;
18203 +            VALIDATE= "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel   , NOQUOTE))"
18204 +      %end;
18205 +      %if &testFlag = 1 %then %do;
18206 +            TEST= "%sysfunc(sasmsg(sashelp.dmine, rpt_test_vlabel   , NOQUOTE))"
18207 +      %end;
18208 +      ;
18209 +   run;
18210 +   proc print data=&em_user_count label;
18211 +      title9  ' ';
18212 +      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_replacecount_title, NOQUOTE))";
18213 +   run;
18214 +   title10;
18215 +   proc datasets lib=WORK nolist;
18216 +      delete _tempCount;
18217 +   run;
18218 +
18219 +  %doendmc:
18220 +%mend makeCountReport;
18221 +
18222 +%macro report;
18223 +   %em_getname(key=COUNT,        type=DATA);
18224 +   %em_getname(key=REPORTLIMITS, type=DATA);
18225 +   %em_getname(key=LIMITS,       type=DATA);
18226 +   %em_getname(key=CLASSINFO,    type=DATA);
18227 +
18228 +  /* Generating Reports */
18229 +   %let lib     = %scan(&EM_USER_COUNT, 1, .);
18230 +   %let member =;
18231 +   %if %sysfunc(exist(&em_user_reportlimits)) %then %let member = %scan(&EM_USER_REPORTLIMITS, 2, .);
18232 +   %if %sysfunc(exist(&em_user_count))        %then %let member = &member %scan(&EM_USER_count, 2, .);
18233 +   %if "&member" ne "" %then %do;
18234 +       proc datasets lib=&lib nolist;
18235 +         delete &member;
18236 +       run;
18237 +       quit;
18238 +   %end;
18239 +
18240 +   %let limitFlag = %sysfunc(exist(&em_user_limits));
18241 +    %if ^&limitFlag and  ^%sysfunc(exist(&em_user_classinfo)) %then %goto doendr;
18242 +
18243 +    %if &limitFlag %then %do;
18244 +        data &em_user_reportlimits;
18245 +           set &em_user_limits;
18246 +           label REPLACEMETHODUSED = "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethod_vlabel, NOQUOTE))"
18247 +                 REPLACEMINUSED    = "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
18248 +                 REPLACEMAXUSED    = "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))";
18249 +           drop ROLE LEVEL REPLACEMETHOD REPLACEMIN REPLACEMAX;
18250 +        run;
18251 +        %EM_REPORT(key=REPORTLIMITS,  viewtype=DATA, block=MODEL, description=ReplaceInterval, autoDisplay=Y);
18252 +    %end;
18253 +
18254 +    %if &em_property_CountReport=Y %then %do;
18255 +        %makeNameDs(namedata=newVarInfo, limitDs=&em_user_limits, classname=&em_user_classinfo);
18256 +
18257 +        %let labeloption = %sysfunc(getoption(label));
18258 +        options LABEL;run;
18259 +
18260 +        %makeCountReport(namedata=newVarInfo, outdata=&EM_USER_COUNT);
18261 +
18262 +        options &labeloption;run;
18263 +
18264 +        %EM_REPORT(key=COUNT, viewtype=DATA, block=MODEL, description=ReplaceCount, autoDisplay=Y);
18265 +   %end;
18266 +   proc datasets lib=WORK nolist;
18267 +      delete newVarInfo;
18268 +   run;
18269 +   %doendr:
18270 +%mend report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
18271  *------------------------------------------------------------*;
18272  * End REPORT: Repl;
18273  *------------------------------------------------------------*;
18274
 
18275  /* Reset EM Options */
18276  options formchar="|----|+|---+=|-/\<>*";
18277  options nocenter ls=256 ps=10000;
18278  goptions reset=all device=GIF NODISPLAY;
 
