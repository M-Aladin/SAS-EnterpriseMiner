*------------------------------------------------------------*
User:                Mohamed
Date:                May 01, 2018
Time:                17:20:39
Site:                12400032
Platform:            X64_10HOME
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
*------------------------------------------------------------*
* Training Log
Date:                May 01, 2018
Time:                17:20:26
*------------------------------------------------------------*
15254  proc freq data=EMWS1.Tree_VariableSet noprint;
15255  table ROLE*LEVEL/out=WORK.TreeMETA;
15256  run;
 
NOTE: There were 21 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
15257  proc print data=WORK.TreeMETA label noobs;
15258  var ROLE LEVEL COUNT;
15259  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15260  title9 ' ';
15261  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15262  run;
 
NOTE: There were 6 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
15263  title10;
 
15264  %let EMNORLEN = %DMNORLEN;
EMWS1.Ids2_DATA EMWS1.Ids2_DATA
EMWS1.Ids2_DATA EMWS1.Ids2_DATA EMWS1 Ids2_DATA
EMWS1.Ids2_DATA EMWS1.Ids2_DATA
EMWS1.Ids2_DATA EMWS1.Ids2_DATA EMWS1 Ids2_DATA
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15293  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15294  length ORDER $20;
15295  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15296     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15297  set EMWS1.IDS2_TARGETBUY_DM( where=(_TYPE_="TARGET"));
15298  NumLevels=2;
15299  select(upcase(ORDER));
15300  when('DESC') ORDER = 'Descending';
15301  when('ASC') ORDER = 'Ascending';
15302  when('FMTDESC') ORDER = 'Formatted Descending';
15303  when('FMTASC') ORDER = 'Formatted Ascending';
15304  otherwise ORDER = 'Descending';
15305  end;
15306  output;
15307  run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
15308  title9 ' ';
15309  proc print data=WORK.Tree_EVENT noobs label;
15310  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15311  title9 ' ';
15312  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15313  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15314  title10;
 
"No decisions defined for target "TargetBuy"."
15315  proc print data = EMWS1.Ids2_TargetBuy_DM noobs label;
15316  var _type_ variable label;
15317  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15318  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15319  title9 ' ';
15320  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15321  run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
15322  title10;
 
15323  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15840  *------------------------------------------------------------*;
15841  * Tree: Generation of macros and macro variables;
15842  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15843  *------------------------------------------------------------*;
 
15844  %let EMEXCEPTIONSTRING=;
15845  *------------------------------------------------------------*;
15846  * TRAIN: Tree;
15847  *------------------------------------------------------------*;
15848  %let EM_ACTION = TRAIN;
15849  %let syscc = 0;
15850  %macro main;
15851
15852    %if %upcase(&EM_ACTION) = CREATE %then %do;
15853      filename temp catalog 'sashelp.emmodl.tree_create.source';
15854      %include temp;
15855      filename temp;
15856
15857      %em_tree_create;
15858    %end;
15859
15860     %else
15861     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15862
15863         filename temp catalog 'sashelp.emmodl.tree_train.source';
15864         %include temp;
15865         filename temp;
15866         %em_tree_train;
15867     %end;
15868
15869    %else
15870    %if %upcase(&EM_ACTION) = SCORE %then %do;
15871      filename temp catalog 'sashelp.emmodl.tree_score.source';
15872      %include temp;
15873      filename temp;
15874
15875      %em_tree_score;
15876
15877    %end;
15878
15879    %else
15880    %if %upcase(&EM_ACTION) = REPORT %then %do;
15881
15882         filename temp catalog 'sashelp.emmodl.tree_report.source';
15883         %include temp;
15884         filename temp;
15885
15886         %em_tree_report;
15887     %end;
15888
15889    %else
15890    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15891
15892         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15893         %include temp;
15894         filename temp;
15895         %EM_TREE_OPENTREEVIEWER;
15896
15897     %end;
15898
15899    %else
15900    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15901
15902         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15903         %include temp;
15904         filename temp;
15905         %EM_TREE_CLOSETREEVIEWER;
15906
15907     %end;
15908
15909
15910     %doendm:
15911  %mend main;
15912
15913  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15915 +%macro em_tree_train;
15917 +   %if &EM_IMPORT_DATA eq %then %do;
15918 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15919 +       %put &em_codebar;
15920 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15921 +       %put &errormsg;
15922 +       %put &em_codebar;
15923 +       %goto doendm;
15924 +   %end;
15925 +   %else
15926 +       %let EMEXCEPTIONSTRING =;
15928 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15929 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15930 +        %put &em_codebar;
15931 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15932 +        %put &errormsg;
15933 +        %put &em_codebar;
15934 +        %goto doendm;
15935 +   %end;
15937 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15938 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15939 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15940 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15941 +        %put &em_codebar;
15942 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15943 +        %put &errormsg;
15944 +        %put &em_codebar;
15945 +        %goto doendm;
15946 +   %end;
15948 +   /* Initialize property macro variables */
15949 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15950 +   %include temp;
15951 +   filename temp;
15953 +   %EM_SetProperties;
15955 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15956 +   %EM_GETNAME(key=EMTREE, type=DATA);
15957 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15958 +     /* if import eq Y and no importtable defined, throw an exception */
15959 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15960 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15961 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15962 +         %put &em_codebar;
15963 +         %put &errmsg;
15964 +         %put &em_codebar;
15965 +         %goto doendm;
15966 +      %end;
15967 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15968 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15969 +         %put &em_codebar;
15970 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15971 +         %put &errormsg;
15972 +         %put &em_codebar;
15973 +         %goto doendm;
15974 +      %end;
15975 +      %else %do;
15976 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15977 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15978 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15979 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15980 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15981 +         %let dsid = %sysfunc(close(&dsid));
15982 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15983 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15984 +            %put &em_codebar;
15985 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15986 +            %put &errormsg;
15987 +            %put &em_codebar;
15988 +            %goto doendm;
15989 +         %end;
15990 +      %end;
15991 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15992 +         proc delete data=&EM_USER_EMTREE;
15993 +         run;
15994 +      %end;
15995 +   %end;
15996 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15997 +      proc delete data=&EM_USER_EMTREE;
15998 +      run;
15999 +   %end;
16001 +   /* load tree macros */
16002 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16003 +   %include temp;
16004 +   filename temp;
16006 +   /* data sets */
16007 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
16008 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
16009 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
16011 +   /* files */
16012 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
16014 +   /* check actual num of target levels */
16015 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
16016 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16017 +                              nLevel=_nTargetLevel );
16018 +      %if &_nTargetLevel  > 2 %then %do;
16019 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16020 +        %put &em_codebar;
16021 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16022 +        %put &errormsg;
16023 +        %put &em_codebar;
16024 +        %goto doendm;
16025 +      %end;
16026 +   %end;
16028 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16029 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16030 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16031 +        %let costflag=0;
16032 +        data _null_;
16033 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16034 +          if eof then call symput("costflag", _N_);
16035 +        run;
16036 +        %if &costflag gt 0 %then %do;
16037 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16038 +          %put &em_codebar;
16039 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16040 +          %put &errormsg;
16041 +          %put &em_codebar;
16042 +          %goto doendm;
16043 +       %end;
16044 +     %end;
16045 +   %end;
16047 +   /* determine if multiple targets will be processed */
16048 +   %let em_tree_multipleTargets=N;
16049 +   %let em_tree_numTarget = 1;
16050 +   %let em_tree_targetVars=;
16052 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16053 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16054 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16055 +         %let em_tree_multipleTargets=N;
16056 +      %end;
16057 +      %else %do;
16058 +         /* create macro array of targets  */
16059 +         data _null_;
16060 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16061 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16062 +           if eof then
16063 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16064 +        run;
16066 +        %if &em_tree_numTarget gt 1 %then %do;
16067 +           %let em_tree_multipleTargets=Y;
16068 +        %end;
16069 +      %end;
16070 +   %end;
16072 +   /* create view of only necessary variable for performance reasons */
16073 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16074 +   data &tempData / view=&tempData;
16075 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16076 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16077 +       %EM_TARGET
16078 +     %end;
16079 +     %else %do;
16080 +       %if &em_tree_numTarget ne 0 %then %do;
16081 +         %do i=1 %to &em_tree_numTarget;
16082 +            &&em_tree_targetVars&i
16083 +         %end;
16084 +       %end;
16085 +     %end;
16086 +     );
16087 +   run;
16089 +   /* run Tree procedure */
16090 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16092 +   /* Check return code and throw exception if error is detected */
16093 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16094 +   %if &syserr %then %do;
16095 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16096 +     %goto doendm;
16097 +   %end;
16099 +   /* add decision score code if multiple targets are processed */
16100 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16101 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16102 +   %end;
16104 +   /* create outfit dataset if multiple score statements have been executed */
16105 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16107 +   /* create English Rules */
16108 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16109 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16110 +       %em_tree_makeEnglishRules;
16112 +       /* English Rules */
16113 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16115 +     %end;
16116 +   filename x;
16118 +   %doendm:
16119 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16120 +%macro EM_SetProperties;
16122 +   /* train properties */
16123 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16124 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16125 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16126 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16127 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16128 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16129 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16130 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16131 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16132 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16133 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16134 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16135 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16148 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16149 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16150 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16153 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16154 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16155 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16163 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16165 +   /* properties for interactive sample */
16166 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16167 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16168 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16169 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16171 +   /* report properties */
16172 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16173 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16174 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16175 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16176 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16177 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16178 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16179 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16180 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16181 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16182 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16183 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16184 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16186 +   /* score properties */
16187 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16188 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16190 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16192 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16193 +  %global &nLevel;
16194 +  proc dmdb batch data=&indata
16195 +    classout=_tmp_dmdbout;
16196 +    class &target;
16197 +  run;
16198 +  data _tmp_dmdbout;
16199 +    set _tmp_dmdbout;
16200 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16201 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16202 +  run;
16203 +  data _null_;
16204 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16205 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16206 +    %let dsid = %sysfunc(close(&dsid));
16207 +     call symput("&nLevel", put(&_obs, Best12.));
16208 +  run;
16210 +  proc datasets lib=work nolist;
16211 +     delete _tmp_dmdbout;
16212 +  run;
16213 +  quit;
16214 +%Mend EM_CheckBinaryTargetLevel;
16217 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16219 +  /* determine the number of obs in training data */
16220 +  proc sql;
16221 +    reset noprint;
16222 +    select count(*) into :em_nobs from &indata;
16223 +  quit;
16225 +  /* determine the number of input variables */
16226 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16227 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16229 +  /* retrieve targetEvent from decmeta */
16230 +  %let targetEvent=;
16231 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16232 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16233 +      data _null_;
16234 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16235 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16236 +      run;
16237 +    %end;
16238 +  %end;
16240 +  /* create targetTable if multipleTar eq Y */
16241 +  data temptarget;
16242 +    set &EM_DATA_VARIABLESET;
16243 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16244 +  run;
16246 + /* data sets */
16247 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16248 + %EM_GETNAME(key=EMTREE,        type=DATA);
16249 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16250 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16251 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16252 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16253 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16254 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16255 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16256 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16258 + /* files */
16259 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16260 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16262 + /* turn on pmml if requested */
16263 + %let nnpmml=0;
16264 + %if %symexist(EM_PMML) %then %do;
16265 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16266 +       %let nnpmml=1;
16268 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16269 +   %end;
16270 +%end;
16272 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16274 +%if &nnpmml or &numClassTarget %then %do;
16276 +    /* create dmdb needed for pmml generation */
16277 +    %let tree_maxlevel = 512;
16278 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16279 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16280 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16281 +      %end;
16282 +    %end;
16283 +    %if &tree_maxlevel gt 0 %then %do;
16284 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16285 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16286 +    %end;
16288 +    %let targetOrderString =;
16289 +    %let targetString = ;
16290 +    data _null_;
16291 +       length orderString nameString $10000;
16292 +       retain orderString nameString;
16293 +       set &em_data_variableset end=eof;
16294 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16295 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16296 +       %end;
16297 +       %else %do;
16298 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16299 +       %end;          select(order);
16300 +         when('')        order ='DESC';
16301 +         when('FMTASC')  order='ASCFMT';
16302 +         when('FMTDESC') order='DESFMT';
16303 +         otherwise;
16304 +       end;
16305 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16306 +       nameString = trim(nameString)!!' '!!trim(NAME);
16308 +       if eof then do;
16309 +          call symput('targetOrderString', trim(orderString));
16310 +          call symput('targetString', trim(nameString));
16311 +       end;
16312 +    run;
16314 +    %let arborkluge= "work._treeDMDB";
16316 +    proc dmdb batch data=&indata
16317 +    %if &nnpmml %then %do;
16318 +        PMML
16319 +    %end;
16320 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16322 +      %if &nnpmml %then %do;
16323 +           %if "%EM_ID" ne "" %then %do;
16324 +             id %EM_ID;
16325 +           %end;
16326 +           %if &EM_NUM_CLASS gt 0 %then %do;
16327 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16328 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16329 +                  &targetOrderString;
16330 +           %end;
16331 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16332 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16333 +           %end;
16334 +           target &targetString %EM_INTERVAL_TARGET;
16335 +           %if "%EM_FREQ" ne "" %then %do;
16336 +             freq %EM_FREQ;
16337 +           %end;
16338 +      %end;
16339 +      %else %do;
16340 +         class  &targetOrderString;
16341 +         target &targetString %EM_INTERVAL_TARGET;
16342 +      %end;
16343 +    run;
16344 +    quit;
16346 +    proc datasets lib=work nolist;
16347 +       delete classout varout;
16348 +    run;
16349 +    quit;
16351 + %end;
16354 + /* run Arbor procedure */
16355 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16356 +  proc arbor data=&INDATA
16358 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16359 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16360 +  %end;
16362 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16363 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16364 +  %end;
16366 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16367 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16368 +  %end;
16370 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16371 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16372 +  %end;
16374 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16375 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16376 +  %end;
16378 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16379 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16380 +  %end;
16381 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16382 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16383 +  %end;
16384 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16385 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16386 +  %end;
16388 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16389 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16390 +      alpha = &EM_PROPERTY_SIGLEVEL
16391 +    %end;
16392 +  %end;
16394 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16395 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16396 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16397 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16398 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16400 +        padjust =
16401 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16402 +          &chaid
16403 +        %end;
16404 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16405 +          DEPTH
16406 +        %end;
16407 +      %end;
16408 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16409 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16410 +         pvars = &num_inputs
16411 +      %end;
16412 +    %end;
16413 +  %end;
16414 +  %else %do;
16415 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16416 +         padjust = NONE
16417 +      %end;
16418 +  %end;
16420 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16421 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16422 +    Maxrules = &num_nrules
16423 +  %end;
16425 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16426 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16427 +    Maxsurrs = &num_nsurrs
16428 +  %end;
16430 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16431 +     Missing=&EM_PROPERTY_MISSINGVALUE
16432 +  %end;
16434 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16435 +     USEVARONCE
16436 +  %end;
16438 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16439 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16440 +  %end;
16443 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16444 +    event = "&targetEvent"
16445 +  %end;
16447 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16448 +     DECSEARCH
16449 +  %end;
16451 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16452 +     PRIORSSEARCH
16453 +  %end;
16455 +  %if &arbor_1 ne %then %do;
16456 +    &arbor_1
16457 +  %end;
16459 +  %if &em_arbor ne %then %do;
16460 +     &em_arbor
16461 +  %end;
16462 +  ;
16463 + %end;
16464 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16465 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16466 +       Performance &EM_PROPERTY_PERFORMANCE
16467 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16468 +         nodesize=&EM_PROPERTY_NODESAMPLE
16469 +       %end;
16470 +       ;
16471 +       interact;
16472 + %end;
16473 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16474 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16475 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16476 +    %put &em_codebar;
16477 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16478 +    %put &errormsg;
16479 +    %put &em_codebar;
16480 +    %goto doendm;
16481 +   %end;
16482 +   %else %do;
16483 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16484 +       Performance &EM_PROPERTY_PERFORMANCE
16485 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16486 +         nodesize=&EM_PROPERTY_NODESAMPLE
16487 +       %end;
16488 +       ;
16489 +       interact;
16490 +   %end;
16491 + %end;
16493 + %else %do;
16494 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16495 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16496 +    %put &em_codebar;
16497 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16498 +    %put &errormsg;
16499 +    %put &em_codebar;
16500 +    %goto doendm;
16501 +   %end;
16502 +   %else %do;
16503 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16504 +       Performance &EM_PROPERTY_PERFORMANCE
16505 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16506 +         nodesize=&EM_PROPERTY_NODESAMPLE
16507 +       %end;
16508 +       ;
16509 +        interact;
16510 +   %end;
16511 + %end;
16513 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16514 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16515 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16516 +    %end;
16518 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16519 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16520 +    %end;
16522 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16523 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16524 +    %end;
16526 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16527 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16528 +    %end;
16530 +    %if "%EM_FREQ" ne "" %then %do;
16531 +       freq %EM_FREQ;
16532 +    %end;
16534 +    %if "&multipleTar" eq "Y" %then %do;
16535 +       /* cycle through all target vars in variableset */
16536 +       %let tdsid = %sysfunc(open(temptarget));
16537 +       %if &tdsid %then %do;
16538 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16539 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16540 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16541 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16542 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16543 +             target &var / level = &lvl
16544 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16545 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16546 +             %end;
16547 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16548 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16549 +             %end;
16550 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16551 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16552 +             %end;
16553 +          %end;
16554 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16555 +       %end;
16556 +       useTarget variable = %EM_TARGET;
16557 +    %end;
16558 +    %else %do;
16559 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16560 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16561 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16562 +      %end;
16563 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16564 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16565 +      %end;
16566 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16567 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16568 +      %end;
16569 +    %end;
16571 +    %if "&multipleTar" eq "N" %then %do;
16572 +      &EM_DEC_STATEMENT;
16573 +    %end;
16575 +    Performance &EM_PROPERTY_PERFORMANCE
16576 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16577 +      nodesize=&EM_PROPERTY_NODESAMPLE
16578 +    %end;
16579 +    ;
16581 +    %if "&intFlag" eq "Y" %then %do;
16582 +       INTERACT Largest;
16583 +       Train maxnewdepth=0;
16584 +    %end;
16586 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16587 +         Assess
16588 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16589 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16590 +              %put &em_codebar;
16591 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16592 +              %put &errormsg;
16593 +              %put &em_codebar;
16594 +            %end;
16595 +            %else %do;
16596 +               Validata=&EM_IMPORT_VALIDATE
16597 +            %end;
16598 +         %end;
16599 +         %else %do;
16600 +           NoValidata
16601 +         %end;
16602 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16603 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16604 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16605 +               %if &dsid %then %do;
16606 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16607 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16608 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16609 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16610 +                   %else %do;
16611 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16612 +                      %else %let measure= MISC;
16613 +                   %end;
16614 +                 %end;
16615 +               %end;
16616 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16617 +            %end;
16618 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16619 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16620 +                 %let measure=ASE;
16621 +              %end;
16622 +              %else %do;
16623 +                 %let measure=MISC;
16624 +              %end;
16625 +            %end;
16626 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16627 +              %let measure=ASE;
16628 +            %end;
16629 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16630 +               %let measure = LIFT;
16631 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16632 +               %if &dsid %then %do;
16633 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16634 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16635 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16636 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16637 +                 %end;
16638 +               %end;
16639 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16640 +            %end;
16641 +            measure=&measure
16642 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16643 +               event = "&targetEvent"
16644 +            %end;
16645 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16646 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16647 +            %end;
16648 +         %end;
16649 +         %if "&multipleTar" eq "N" %then %do;
16650 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16651 +               CV
16652 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16653 +                 CVNITer = &EM_PROPERTY_CVNITER
16654 +               %end;
16655 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16656 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16657 +               %end;
16658 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16659 +                 CVSeed = &EM_PROPERTY_CVSEED
16660 +               %end;
16661 +            %end;
16662 +         %end;
16663 +       %end;
16664 +      ;
16666 +      %if "&intFlag" ne "Y" %then %do;
16667 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16668 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16669 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16670 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16672 +          SUBTREE &subtree
16673 +          %if "&subtree" eq "NLEAVES" %then %do;
16674 +            =&EM_PROPERTY_NSUBTREE
16675 +          %end;
16676 +          ;
16677 +        %end;
16679 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16680 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16681 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16682 +          %end;
16683 +       %end;
16684 +      %end;
16685 + %end;
16688 + MakeMacro nleaves = nleaves;
16689 + save
16690 + %if "&EM_USER_EMTREE" ne "" %then %do;
16691 +   MODEL=&EM_USER_EMTREE
16692 + %end;
16693 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16694 +   SEQUENCE=&EM_USER_OUTSEQ
16695 + %end;
16696 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16697 +   IMPORTANCE=&EM_USER_OUTIMPORT
16698 + %end;
16699 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16700 +   NODESTAT=&EM_USER_OUTNODES
16701 + %end;
16702 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16703 +   SUMMARY=&EM_USER_OUTSUMMARY
16704 + %end;
16705 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16706 +   STATSBYNODE=&EM_USER_OUTSTATS
16707 + %end;
16708 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16709 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16710 + %end;
16711 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16712 +   Pathlistnonmissing=&EM_USER_OUTPATH
16713 + %end;
16714 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16715 +   RULES = &EM_USER_OUTRULES
16716 + %end;
16717 + ;
16719 + %if "&intFlag" ne "Y" %then %do;
16721 +   %let lookupString = ;
16722 +   %if ^%symexist(EM_OPTION) %then
16723 +      %let EM_OPTION=;
16725 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16726 +      %let lookupString = LOOKUP=SELECT;
16727 +   %end;
16729 +   %let codetext=;
16730 +   %let norescodetxt=;
16732 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16733 +     %let codetext=&codetext DUMMY;
16734 +     %let norescodetxt=&norescodetxt DUMMY;
16735 +   %end;
16736 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16737 +     %let codetext=&codetext NOLEAFID;
16738 +     %let norescodetxt=&norescodetxt NOLEAFID;
16739 +   %end;
16740 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16741 +     %let norescodetxt=&norescodetxt NOPRED;
16742 +   %end;
16744 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16745 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16747 +   %if &nnpmml %then %do;
16748 +     code pmml;
16749 +   %end;
16751 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16752 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16753 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16754 +   %end;
16755 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16756 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16757 +   %end;
16758 + %end;
16760 + run;
16761 + quit;
16763 + /*%em_checkerror(); */
16764 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16765 +   /* Delete DMDB catalog */
16766 +   proc datasets lib=work nolist;
16767 +       delete _treeDMDB / mt=cat;
16768 +  run;
16769 +  %end;
16771 + %if &nnpmml %then %do;
16772 +    ods pmml close;
16773 + %end;
16775 +  %doendm:
16777 +%mend em_tree_runTreeProcedure;
16779 +%macro em_tree_createFitStats( multipleTar= );
16782 +  /* create targetTable is multipleTar eq Y */
16783 +  data temptarget;
16784 +    set &EM_DATA_VARIABLESET;
16785 +    where ROLE="TARGET";
16786 +  run;
16788 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16789 +   data &EM_USER_EMOUTFIT;
16790 +     length target $32;
16791 +     merge work.fit_train
16792 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16793 +       work.fit_valid
16794 +     %end;
16795 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16796 +       work.fit_test
16797 +     %end;
16798 +     ;
16799 +     %if "&multipleTar" eq "N" %then %do;
16800 +       target="%EM_TARGET";
16801 +     %end;
16802 +     %else %do;
16803 +       target = _TARGET_;
16804 +     %end;
16805 +     drop _NW_ _SUMW_
16806 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16807 +        _VSUMW_
16808 +     %end;
16809 +     ;
16810 +   run;
16812 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16813 +     proc datasets library=work nolist;
16814 +       delete fit_valid;
16815 +     run;
16816 +   %end;
16817 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16818 +     proc datasets library=work nolist;
16819 +       delete fit_test;
16820 +     run;
16821 +   %end;
16823 +%mend em_tree_createFitStats;
16826 +%macro em_tree_makeEnglishRules;
16828 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16829 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16831 +  /* verify that necessary tables exist and if not, skip processing */
16832 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16833 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16834 +    %goto doendm;
16835 +  %end;
16836 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16837 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16838 +    %goto doendm;
16839 +  %end;
16841 +  /* determine length of variable in outpath dataset */
16842 +  %let vlength= ;
16843 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16844 +  %if &dsid ne %then %do;
16845 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16846 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16847 +  %end;
16848 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16850 +  data tempoutpath;
16851 +    length varname $&vlength;
16852 +    retain varname;
16853 +    set &EM_USER_OUTPATH;
16855 +    if ^missing(variable) then varname=variable;
16856 +    else if ^missing(var_name) then varname=var_name;
16857 +    output;
16858 +  run;
16860 +  /* create an array of generated predicted variable names */
16861 +  %let tree_pred_vars = ;
16862 +  %let tree_pred_label = ;
16863 +  %let numpred= 0;
16864 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16866 +    data _null_;
16867 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16868 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16869 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16870 +     if eof then
16871 +       call symput('numpred', strip(put(_N_, BEST.)));
16872 +    run;
16873 +  %end;
16875 +  /* determine if NPRIORS exists in outnodes  */
16876 +  %local nprior_flag;
16877 +  data _null_;
16878 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16879 +    if eof then do;
16880 +      call symput('nprior_flag', strip(put(npriors, best.)));
16881 +    end;
16882 +  run;
16884 +  proc sort data=tempoutpath; by node; run;
16885 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16887 +  data tempoutpath;
16888 +    merge tempoutpath(in=_a) outnodes(keep= node
16889 +    %if "&nprior_flag" ne "." %then %do;
16890 +      NPRIORS
16891 +    %end;
16892 +    %else %do;
16893 +      N
16894 +    %end;
16895 +    %if &numpred gt 0 %then %do;
16896 +      %do i=1 %to &numpred;
16897 +        &&tree_pred_vars&i
16898 +      %end;
16899 +    %end;
16900 +    );
16901 +    by node;
16902 +    if _a;
16903 +  run;
16905 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16907 +  data _null_;
16908 +    file x;
16909 +    set tempoutpath;
16910 +    by node descending varname;
16911 +    retain origvar oldnode string;
16912 +    length origvar $32 oldnode 8 string $200;
16914 +    if _N_ = 1 then do;
16915 +      origvar = varname;
16916 +      oldnode = node;
16917 +    end;
16919 +    if first.node then do;
16920 +       put "&EM_CODEBAR";
16921 +       put " Node = " node;
16922 +       put "&EM_CODEBAR";
16923 +    end;
16925 +      if first.varname then do;
16926 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16927 +            if MISSING(CHARACTER_VALUE) then do;
16928 +             if NUMERIC_VALUE ne .  then do;
16929 +              if ^first.node then do;
16930 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16931 +              end;
16932 +              else do;
16933 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16934 +              end;
16935 +             end;
16936 +            end;
16937 +            else do;
16938 +              if ^first.node then do;
16939 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16940 +              end;
16941 +              else do;
16942 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16943 +              end;
16944 +             end;
16945 +         end;
16946 +         else if RELATION in ("=") then do;
16947 +            if ^first.node then do;
16948 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16949 +            end;
16950 +            else do;
16951 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16952 +            end;
16953 +         end;
16954 +         else if RELATION in ("ISMISSING") then do;
16955 +            if ^first.node then do;
16956 +              string = " AND "|| strip(varname) || " equals Missing";
16957 +            end;
16958 +            else do;
16959 +              string = "if "|| strip(varname) ||" equals Missing";
16960 +            end;
16961 +         end;
16962 +         else if RELATION in ("ISNOTMISSING") then do;
16963 +            if ^first.node then do;
16964 +              string = " AND "|| strip(varname) || " equals All Values";
16965 +            end;
16966 +            else do;
16967 +              string = "if "|| strip(varname) ||" equals All Values";
16968 +            end;
16969 +         end;
16970 +         if ^missing(varname) then origvar = varname;
16971 +         oldnode=node;
16973 +      end;
16974 +      else do;
16975 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16976 +          if MISSING(CHARACTER_VALUE) then do;
16977 +           if  NUMERIC_VALUE ne .  then do;
16978 +            if ^MISSING(string) then
16979 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16980 +            else
16981 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16982 +           end;
16983 +          end;
16984 +          else do;
16985 +            if ^MISSING(string) then
16986 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16987 +            else
16988 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16989 +          end;
16991 +         end;
16992 +         else if RELATION in ("=") then do;
16993 +           string = strip(string)||", "||strip(character_value);
16994 +         end;
16995 +         else if RELATION in ("ISMISSING") then do;
16997 +         end;
16998 +         if ^missing(varname) then origvar = varname;
16999 +         oldnode=node;
17000 +      end;
17001 +      if last.varname then do;
17002 +         if RELATION in ("ISMISSING") then do;
17003 +           if ^first.varname then do;
17004 +             string = strip(string) || " or MISSING";
17005 +           end;
17006 +         end;
17007 +         put string;
17008 +         if ^missing(varname) then origvar = varname;
17009 +         oldnode=node;
17010 +      end;
17012 +      if last.node then do;
17013 +         put "then ";
17014 +         put " Tree Node Identifier   = " node;
17016 +         %if "&nprior_flag" ne "." %then %do;
17017 +           put " Number of Observations = " NPRIORS;
17018 +         %end;
17019 +         %else %do;
17020 +           put " Number of Observations = " N;
17021 +         %end;
17023 +         %if &numpred gt 0 %then %do;
17024 +           %do i=1 %to &numpred;
17025 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17026 +           %end;
17027 +         %end;
17029 +         put " ";
17030 +         if ^missing(varname) then origvar = varname;
17031 +         oldnode=node;
17032 +      end;
17034 +  run;
17036 +  proc datasets lib=work nolist;
17037 +    delete tempoutpath outnodes;
17038 +  run;
17040 +  %doendm:
17041 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 23000   Memory used = 511K.
NOTE: View EMWS1.IDS2_DATA.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
NOTE: There were 23000 observations read from the data set SUPERMKT.SUPERMARKETCAMPAIGN.
NOTE: There were 23000 observations read from the data set EMWS1.IDS2_DATA.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IDS2_DATA.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
NOTE: There were 23000 observations read from the data set SUPERMKT.SUPERMARKETCAMPAIGN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
NOTE: There were 23000 observations read from the data set EMWS1.IDS2_DATA.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 23000   Memory used = 511K.
NOTE: There were 23000 observations read from the data set SUPERMKT.SUPERMARKETCAMPAIGN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
 
NOTE: There were 23000 observations read from the data set EMWS1.IDS2_DATA.
NOTE: There were 23000 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: 1544242 kilobytes of physical memory.
NOTE: Will use 23000 out of 23000 training cases.
NOTE: Using memory pool with 377310208 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 10254304 bytes of work memory.
NOTE: The subtree sequence contains 52 subtrees. The largest has 103 nodes and 52 leaves.
NOTE: Using subtree with 47 nodes and 24 leaves.
NOTE: Using subtree with 47 nodes and 24 leaves.
NOTE: Created macro variable NLEAVES equal to 24.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 18 observations and 4 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 3444 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 47 observations and 20 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 210 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 787 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 52 observations and 11 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 188 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 12 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 47 observations and 5 variables.
NOTE: External file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 23000 observations read from the data set SUPERMKT.SUPERMARKETCAMPAIGN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.28 seconds
      cpu time            0.26 seconds
 
NOTE: There were 23000 observations read from the data set EMWS1.IDS2_DATA.
 
 
NOTE: There were 23000 observations read from the data set SUPERMKT.SUPERMARKETCAMPAIGN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           2.63 seconds
      cpu time            2.56 seconds
 
NOTE: There were 23000 observations read from the data set EMWS1.IDS2_DATA.
NOTE: There were 23000 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           2.65 seconds
      cpu time            2.57 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 210 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 210 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 210 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 210 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 47 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 47 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 210 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 47 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 210 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 210 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 210 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=01May2018:17:20:32,
      Create Time=01May2018:17:20:32
 
NOTE: 313 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 210 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
NOTE: Fileref X has been deassigned.
17043
17044  *------------------------------------------------------------*;
17045  * End TRAIN: Tree;
17046  *------------------------------------------------------------*;
 
17047  *------------------------------------------------------------*;
17048  * Close any missing semi colons;
17049  *------------------------------------------------------------*;
17050  ;
17051  ;
17052  ;
17053  ;
17054  quit;
17055  *------------------------------------------------------------*;
17056  * Close any unbalanced quotes;
17057  *------------------------------------------------------------*;
17058  /*; *"; *'; */
17059  ;
17060  run;
17061  quit;
17062  /* Reset EM Options */
17063  options formchar="|----|+|---+=|-/\<>*";
17064  options nocenter ls=256 ps=10000;
17065  goptions reset=all device=GIF NODISPLAY;
 
17066  proc sort data=WORK.EM_USER_REPORT;
17067  by ID VIEW;
17068  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                May 01, 2018
Time:                17:20:33
*------------------------------------------------------------*
17170  %let EMEXCEPTIONSTRING=;
17171  *------------------------------------------------------------*;
17172  * SCORE: Tree;
17173  *------------------------------------------------------------*;
17174  %let EM_ACTION = SCORE;
17175  %let syscc = 0;
17176  %macro main;
17177
17178    %if %upcase(&EM_ACTION) = CREATE %then %do;
17179      filename temp catalog 'sashelp.emmodl.tree_create.source';
17180      %include temp;
17181      filename temp;
17182
17183      %em_tree_create;
17184    %end;
17185
17186     %else
17187     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17188
17189         filename temp catalog 'sashelp.emmodl.tree_train.source';
17190         %include temp;
17191         filename temp;
17192         %em_tree_train;
17193     %end;
17194
17195    %else
17196    %if %upcase(&EM_ACTION) = SCORE %then %do;
17197      filename temp catalog 'sashelp.emmodl.tree_score.source';
17198      %include temp;
17199      filename temp;
17200
17201      %em_tree_score;
17202
17203    %end;
17204
17205    %else
17206    %if %upcase(&EM_ACTION) = REPORT %then %do;
17207
17208         filename temp catalog 'sashelp.emmodl.tree_report.source';
17209         %include temp;
17210         filename temp;
17211
17212         %em_tree_report;
17213     %end;
17214
17215    %else
17216    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17217
17218         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17219         %include temp;
17220         filename temp;
17221         %EM_TREE_OPENTREEVIEWER;
17222
17223     %end;
17224
17225    %else
17226    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17227
17228         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17229         %include temp;
17230         filename temp;
17231         %EM_TREE_CLOSETREEVIEWER;
17232
17233     %end;
17234
17235
17236     %doendm:
17237  %mend main;
17238
17239  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17241 +%macro em_tree_score;
17243 +   /* determine if multiple targets will be processed */
17244 +   %let em_tree_multipleTargets=N;
17245 +   %let em_tree_numTarget=1;
17246 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17247 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17248 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17249 +         %let em_tree_multipleTargets=N;
17250 +      %end;
17251 +      %else %do;
17252 +         /* create macro array of targets  */
17253 +         data _null_;
17254 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17255 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17256 +           if eof then
17257 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17258 +        run;
17260 +        %if &em_tree_numTarget gt 1 %then %do;
17261 +           %let em_tree_multipleTargets=Y;
17262 +        %end;
17263 +      %end;
17264 +   %end;
17266 +   /* build flow and publish scoring code */
17267 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17268 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17270 +   filename treeflow "&EM_USER_TREEFLOW";
17271 +   filename treepub "&EM_USER_TREEPUBLISH";
17273 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17274 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17276 +   %em_copyfile(infref=treeflow, outfref=flowref);
17277 +   %em_copyfile(infref=treepub, outfref=pubref);
17279 +   filename treeflow;
17280 +   filename treepub;
17282 +   /* if priors are used, add code to generate unadjusted residuals in export */
17283 +   %let useAdjPriors = N;
17284 +   data _null_;
17285 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17286 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17287 +   run;
17288 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17289 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17290 +      %include temp;
17291 +      filename temp;
17293 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17294 +      filename adjref "&EM_USER_adjResidualCode";
17295 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17297 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17299 +      filename adjref;
17300 +   %end;
17302 +   /* LEAF */
17303 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17304 +      data _null_;
17305 +        file flowref mod;
17306 +        put 'drop _LEAF_;';
17307 +      run;
17309 +      data _null_;
17310 +        file pubref mod;
17311 +        put 'drop _LEAF_;';
17312 +      run;
17314 +   %end;
17316 +   filename flowref;
17317 +   filename pubref;
17319 +   /* em_metachange code */
17320 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17321 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17322 +   %end;
17324 +   /* variable selection based on importance stat    */
17325 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17326 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17327 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17328 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17329 +     %let obs = %sysfunc(fetch(&dsid));
17330 +     %do %while(&obs=0);
17331 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17332 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17333 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17334 +       %let obs = %sysfunc(fetch(&dsid));
17335 +     %end;
17336 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17337 +   %end;
17339 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17340 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17341 +    %let tree_pred_vars = ;
17342 +    %let tree_pred_lvl =;
17343 +    %let numpred= 0;
17345 +    data _null_;
17346 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17347 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17348 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17349 +     if eof then
17350 +       call symput('numpred', strip(put(_N_, BEST.)));
17351 +    run;
17352 +   %end;
17354 +   %if &numpred ne 0 %then %do;
17355 +    %do i=1 %to &numpred;
17356 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17357 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17358 +    %end;
17359 +   %end;
17361 +   /* determine if multiple targets will be processed */
17362 +   %let em_tree_multipleTargets=N;
17363 +   %let em_tree_numTarget=1;
17364 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17365 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17366 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17367 +         %let em_tree_multipleTargets=N;
17368 +      %end;
17369 +      %else %do;
17370 +        data _null_;
17371 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17372 +          if eof then
17373 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17374 +        run;
17376 +        %if &em_tree_numTarget gt 1 %then %do;
17377 +           %let em_tree_multipleTargets=Y;
17378 +        %end;
17379 +     %end;
17380 +   %end;
17382 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17383 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17385 +      /* variable importance */
17386 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17387 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17389 +         %let validexist=0;
17390 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17391 +           %let validexist=1;
17392 +         %end;
17394 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17395 +         /* and the columns may not be generated                                                                                 */
17396 +         %let em_tree_cvexists=;
17397 +         %let em_tree_surrexists=.;
17398 +         data _null_;
17399 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17400 +            if eof then do ;
17401 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17402 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17403 +            end;
17404 +         run;
17406 +         data &EM_USER_OUTIMPORT;
17407 +            set &EM_USER_OUTIMPORT;
17409 +            /* format columns based on Precison value specified */
17410 +            format importance 15.&EM_PROPERTY_PRECISION
17411 +                 %if &validexist %then %do;
17412 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17413 +                 %end;
17414 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17415 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17416 +                 %end;
17417 +            ;
17418 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17419 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17420 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17421 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17422 +                 %if "&em_tree_surrexists" ne "" %then %do;
17423 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17424 +                 %end;
17425 +                 %if &validexist %then %do;
17426 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17427 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17428 +                 %end;
17429 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17430 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17431 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17432 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17433 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17434 +                 %end;
17435 +            ;
17436 +         run;
17438 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17439 +      %end;
17440 +   %end;
17442 +   %doendm:
17443 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=01May2018:17:20:32,
      Create Time=01May2018:17:20:32
 
NOTE: 370 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=01May2018:17:20:32,
      Create Time=01May2018:17:20:32
 
NOTE: 348 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=14137,
      Last Modified=01May2018:17:20:32,
      Create Time=01May2018:17:20:32
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=13464,
      Last Modified=01May2018:17:20:32,
      Create Time=01May2018:17:20:32
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable VIMPORTANCE is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: Variable RATIO is uninitialized.
NOTE: There were 18 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 18 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
17444
17445  *------------------------------------------------------------*;
17446  * End SCORE: Tree;
17447  *------------------------------------------------------------*;
 
17448  proc sort data=WORK.EM_METACHANGE;
17449  by key uname;
17450  run;
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17451  filename x "D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
17452  data _null_;
17453  file x;
17454  put 'if upcase(NAME) = "ADVERTISEMENTZONE" then do;';
17455  put 'ROLE = "REJECTED";';
17456  put 'end;';
17457  put 'else ';
17458  put 'if upcase(NAME) = "CAMPAIGNVIEWEDEMAIL" then do;';
17459  put 'ROLE = "REJECTED";';
17460  put 'end;';
17461  put 'else ';
17462  put 'if upcase(NAME) = "CLEANSERPRODUCTS" then do;';
17463  put 'ROLE = "REJECTED";';
17464  put 'end;';
17465  put 'else ';
17466  put 'if upcase(NAME) = "CLUSTERGROUP" then do;';
17467  put 'ROLE = "REJECTED";';
17468  put 'end;';
17469  put 'else ';
17470  put 'if upcase(NAME) = "LOTIONPRODUCTS" then do;';
17471  put 'ROLE = "REJECTED";';
17472  put 'end;';
17473  put 'else ';
17474  put 'if upcase(NAME) = "LOYALTYCLASS" then do;';
17475  put 'ROLE = "REJECTED";';
17476  put 'end;';
17477  put 'else ';
17478  put 'if upcase(NAME) = "LOYALTYTIME" then do;';
17479  put 'ROLE = "REJECTED";';
17480  put 'end;';
17481  put 'else ';
17482  put 'if upcase(NAME) = "NIGHTREPAIRPRODUCTS" then do;';
17483  put 'ROLE = "REJECTED";';
17484  put 'end;';
17485  put 'else ';
17486  put 'if upcase(NAME) = "PREVIOUSCAMPAIGN" then do;';
17487  put 'ROLE = "REJECTED";';
17488  put 'end;';
17489  put 'else ';
17490  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
17491  put 'ROLE = "ASSESS";';
17492  put 'end;';
17493  put 'else ';
17494  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
17495  put 'ROLE = "ASSESS";';
17496  put 'end;';
17497  put 'else ';
17498  put 'if upcase(NAME) = "REGION" then do;';
17499  put 'ROLE = "REJECTED";';
17500  put 'end;';
17501  put 'else ';
17502  put 'if upcase(NAME) = "TIMESINCELASTPURCHASE" then do;';
17503  put 'ROLE = "REJECTED";';
17504  put 'end;';
17505  put 'else ';
17506  put 'if upcase(NAME) = "_NODE_" then do;';
17507  put 'ROLE = "SEGMENT";';
17508  put 'LEVEL = "NOMINAL";';
17509  put 'end;';
17510  run;
 
NOTE: The file X is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=01May2018:17:20:33,
      Create Time=01May2018:17:03:02
 
NOTE: 56 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17511  filename x;
NOTE: Fileref X has been deassigned.
 
17512  filename emflow "D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17513  *------------------------------------------------------------*;
17514  * Tree: Scoring DATA data;
17515  *------------------------------------------------------------*;
17516  data EMWS1.Tree_TRAIN
17517  / view=EMWS1.Tree_TRAIN
17518  ;
17519  set EMWS1.Ids2_DATA
17520  ;
17521  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17522 +****************************************************************;
17523 +******             DECISION TREE SCORING CODE             ******;
17524 +****************************************************************;
17525 +
17526 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17527 +LENGTH F_TargetBuy  $   12;
17528 +LENGTH I_TargetBuy  $   12;
17529 +LENGTH _WARN_  $    4;
17530 +
17531 +******              LABELS FOR NEW VARIABLES              ******;
17532 +label _NODE_ = 'Node' ;
17533 +label _LEAF_ = 'Leaf' ;
17534 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17535 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17536 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17537 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17538 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17539 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17540 +label F_TargetBuy = 'From: TargetBuy' ;
17541 +label I_TargetBuy = 'Into: TargetBuy' ;
17542 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17543 +label _WARN_ = 'Warnings' ;
17544 +
17545 +
17546 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17547 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17548 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17549 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17550 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17551 +
17552 +
17553 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17554 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17555 +
17556 +******             ASSIGN OBSERVATION TO NODE             ******;
17557 +IF  NOT MISSING(Age ) AND
17558 +  Age  <                 44.5 THEN DO;
17559 +  _ARBFMT_1 = PUT( Gender , $CHAR1.);
17560 +   %DMNORMIP( _ARBFMT_1);
17561 +  IF _ARBFMT_1 IN ('F' ) THEN DO;
17562 +    _ARBFMT_12 = PUT( MobileApplications , BEST12.);
17563 +     %DMNORMIP( _ARBFMT_12);
17564 +    IF _ARBFMT_12 IN ('0' ) THEN DO;
17565 +      IF  NOT MISSING(Age ) AND
17566 +        Age  <                 20.5 THEN DO;
17567 +        _NODE_  =                   16;
17568 +        _LEAF_  =                    1;
17569 +        P_TargetBuy0  =     0.81063122923588;
17570 +        P_TargetBuy1  =     0.18936877076411;
17571 +        Q_TargetBuy0  =     0.81063122923588;
17572 +        Q_TargetBuy1  =     0.18936877076411;
17573 +        I_TargetBuy  = '0' ;
17574 +        U_TargetBuy  =                    0;
17575 +        END;
17576 +      ELSE DO;
17577 +        IF  NOT MISSING(AffluenceGrade ) AND
17578 +          AffluenceGrade  <                  9.5 THEN DO;
17579 +          IF  NOT MISSING(Age ) AND
17580 +                            39.5 <= Age  THEN DO;
17581 +            _NODE_  =                   65;
17582 +            _LEAF_  =                    3;
17583 +            P_TargetBuy0  =      0.6913946587537;
17584 +            P_TargetBuy1  =     0.30860534124629;
17585 +            Q_TargetBuy0  =      0.6913946587537;
17586 +            Q_TargetBuy1  =     0.30860534124629;
17587 +            I_TargetBuy  = '0' ;
17588 +            U_TargetBuy  =                    0;
17589 +            END;
17590 +          ELSE DO;
17591 +            _NODE_  =                   64;
17592 +            _LEAF_  =                    2;
17593 +            P_TargetBuy0  =     0.47519083969465;
17594 +            P_TargetBuy1  =     0.52480916030534;
17595 +            Q_TargetBuy0  =     0.47519083969465;
17596 +            Q_TargetBuy1  =     0.52480916030534;
17597 +            I_TargetBuy  = '1' ;
17598 +            U_TargetBuy  =                    1;
17599 +            END;
17600 +          END;
17601 +        ELSE DO;
17602 +          _NODE_  =                   35;
17603 +          _LEAF_  =                    4;
17604 +          P_TargetBuy0  =     0.28530670470756;
17605 +          P_TargetBuy1  =     0.71469329529243;
17606 +          Q_TargetBuy0  =     0.28530670470756;
17607 +          Q_TargetBuy1  =     0.71469329529243;
17608 +          I_TargetBuy  = '1' ;
17609 +          U_TargetBuy  =                    1;
17610 +          END;
17611 +        END;
17612 +      END;
17613 +    ELSE DO;
17614 +      IF  NOT MISSING(AffluenceGrade ) AND
17615 +        AffluenceGrade  <                  7.5 THEN DO;
17616 +        IF  NOT MISSING(Age ) AND
17617 +          Age  <                 32.5 THEN DO;
17618 +          _NODE_  =                   36;
17619 +          _LEAF_  =                    5;
17620 +          P_TargetBuy0  =     0.22085889570552;
17621 +          P_TargetBuy1  =     0.77914110429447;
17622 +          Q_TargetBuy0  =     0.22085889570552;
17623 +          Q_TargetBuy1  =     0.77914110429447;
17624 +          I_TargetBuy  = '1' ;
17625 +          U_TargetBuy  =                    1;
17626 +          END;
17627 +        ELSE DO;
17628 +          _ARBFMT_12 = PUT( FacebookLike , BEST12.);
17629 +           %DMNORMIP( _ARBFMT_12);
17630 +          IF _ARBFMT_12 IN ('1' ) THEN DO;
17631 +            _NODE_  =                   71;
17632 +            _LEAF_  =                    7;
17633 +            P_TargetBuy0  =     0.44324324324324;
17634 +            P_TargetBuy1  =     0.55675675675675;
17635 +            Q_TargetBuy0  =     0.44324324324324;
17636 +            Q_TargetBuy1  =     0.55675675675675;
17637 +            I_TargetBuy  = '1' ;
17638 +            U_TargetBuy  =                    1;
17639 +            END;
17640 +          ELSE DO;
17641 +            _NODE_  =                   70;
17642 +            _LEAF_  =                    6;
17643 +            P_TargetBuy0  =     0.66806722689075;
17644 +            P_TargetBuy1  =     0.33193277310924;
17645 +            Q_TargetBuy0  =     0.66806722689075;
17646 +            Q_TargetBuy1  =     0.33193277310924;
17647 +            I_TargetBuy  = '0' ;
17648 +            U_TargetBuy  =                    0;
17649 +            END;
17650 +          END;
17651 +        END;
17652 +      ELSE DO;
17653 +        _NODE_  =                   19;
17654 +        _LEAF_  =                    8;
17655 +        P_TargetBuy0  =      0.1860465116279;
17656 +        P_TargetBuy1  =     0.81395348837209;
17657 +        Q_TargetBuy0  =      0.1860465116279;
17658 +        Q_TargetBuy1  =     0.81395348837209;
17659 +        I_TargetBuy  = '1' ;
17660 +        U_TargetBuy  =                    1;
17661 +        END;
17662 +      END;
17663 +    END;
17664 +  ELSE DO;
17665 +    IF  NOT MISSING(AffluenceGrade ) AND
17666 +                      12.5 <= AffluenceGrade  THEN DO;
17667 +      _ARBFMT_12 = PUT( MobileApplications , BEST12.);
17668 +       %DMNORMIP( _ARBFMT_12);
17669 +      IF _ARBFMT_12 IN ('0' ) THEN DO;
17670 +        IF  NOT MISSING(TotalSpend ) AND
17671 +                          1400 <= TotalSpend  THEN DO;
17672 +          _NODE_  =                   47;
17673 +          _LEAF_  =                   17;
17674 +          P_TargetBuy0  =     0.77586206896551;
17675 +          P_TargetBuy1  =     0.22413793103448;
17676 +          Q_TargetBuy0  =     0.77586206896551;
17677 +          Q_TargetBuy1  =     0.22413793103448;
17678 +          I_TargetBuy  = '0' ;
17679 +          U_TargetBuy  =                    0;
17680 +          END;
17681 +        ELSE DO;
17682 +          _NODE_  =                   46;
17683 +          _LEAF_  =                   16;
17684 +          P_TargetBuy0  =     0.38636363636363;
17685 +          P_TargetBuy1  =     0.61363636363636;
17686 +          Q_TargetBuy0  =     0.38636363636363;
17687 +          Q_TargetBuy1  =     0.61363636363636;
17688 +          I_TargetBuy  = '1' ;
17689 +          U_TargetBuy  =                    1;
17690 +          END;
17691 +        END;
17692 +      ELSE DO;
17693 +        _NODE_  =                   22;
17694 +        _LEAF_  =                   15;
17695 +        P_TargetBuy0  =     0.26347305389221;
17696 +        P_TargetBuy1  =     0.73652694610778;
17697 +        Q_TargetBuy0  =     0.26347305389221;
17698 +        Q_TargetBuy1  =     0.73652694610778;
17699 +        I_TargetBuy  = '1' ;
17700 +        U_TargetBuy  =                    1;
17701 +        END;
17702 +      END;
17703 +    ELSE DO;
17704 +      IF  NOT MISSING(Age ) AND
17705 +        Age  <                    9 THEN DO;
17706 +        _ARBFMT_12 = PUT( MobileApplications , BEST12.);
17707 +         %DMNORMIP( _ARBFMT_12);
17708 +        IF _ARBFMT_12 IN ('1' ) THEN DO;
17709 +          IF  NOT MISSING(TotalSpend ) AND
17710 +                             515 <= TotalSpend  THEN DO;
17711 +            _NODE_  =                   77;
17712 +            _LEAF_  =                   10;
17713 +            P_TargetBuy0  =                 0.35;
17714 +            P_TargetBuy1  =                 0.65;
17715 +            Q_TargetBuy0  =                 0.35;
17716 +            Q_TargetBuy1  =                 0.65;
17717 +            I_TargetBuy  = '1' ;
17718 +            U_TargetBuy  =                    1;
17719 +            END;
17720 +          ELSE DO;
17721 +            _NODE_  =                   76;
17722 +            _LEAF_  =                    9;
17723 +            P_TargetBuy0  =     0.85526315789473;
17724 +            P_TargetBuy1  =     0.14473684210526;
17725 +            Q_TargetBuy0  =     0.85526315789473;
17726 +            Q_TargetBuy1  =     0.14473684210526;
17727 +            I_TargetBuy  = '0' ;
17728 +            U_TargetBuy  =                    0;
17729 +            END;
17730 +          END;
17731 +        ELSE DO;
17732 +          _NODE_  =                   41;
17733 +          _LEAF_  =                   11;
17734 +          P_TargetBuy0  =     0.94010889292196;
17735 +          P_TargetBuy1  =     0.05989110707803;
17736 +          Q_TargetBuy0  =     0.94010889292196;
17737 +          Q_TargetBuy1  =     0.05989110707803;
17738 +          I_TargetBuy  = '0' ;
17739 +          U_TargetBuy  =                    0;
17740 +          END;
17741 +        END;
17742 +      ELSE DO;
17743 +        IF  NOT MISSING(Age ) AND
17744 +          Age  <                 29.5 THEN DO;
17745 +          _ARBFMT_12 = PUT( MobileApplications , BEST12.);
17746 +           %DMNORMIP( _ARBFMT_12);
17747 +          IF _ARBFMT_12 IN ('1' ) THEN DO;
17748 +            _NODE_  =                   81;
17749 +            _LEAF_  =                   13;
17750 +            P_TargetBuy0  =             0.078125;
17751 +            P_TargetBuy1  =             0.921875;
17752 +            Q_TargetBuy0  =             0.078125;
17753 +            Q_TargetBuy1  =             0.921875;
17754 +            I_TargetBuy  = '1' ;
17755 +            U_TargetBuy  =                    1;
17756 +            END;
17757 +          ELSE DO;
17758 +            _NODE_  =                   80;
17759 +            _LEAF_  =                   12;
17760 +            P_TargetBuy0  =     0.63725490196078;
17761 +            P_TargetBuy1  =     0.36274509803921;
17762 +            Q_TargetBuy0  =     0.63725490196078;
17763 +            Q_TargetBuy1  =     0.36274509803921;
17764 +            I_TargetBuy  = '0' ;
17765 +            U_TargetBuy  =                    0;
17766 +            END;
17767 +          END;
17768 +        ELSE DO;
17769 +          _NODE_  =                   43;
17770 +          _LEAF_  =                   14;
17771 +          P_TargetBuy0  =     0.76848484848484;
17772 +          P_TargetBuy1  =     0.23151515151515;
17773 +          Q_TargetBuy0  =     0.76848484848484;
17774 +          Q_TargetBuy1  =     0.23151515151515;
17775 +          I_TargetBuy  = '0' ;
17776 +          U_TargetBuy  =                    0;
17777 +          END;
17778 +        END;
17779 +      END;
17780 +    END;
17781 +  END;
17782 +ELSE DO;
17783 +  IF  NOT MISSING(AffluenceGrade ) AND
17784 +                    12.5 <= AffluenceGrade  THEN DO;
17785 +    _ARBFMT_1 = PUT( Gender , $CHAR1.);
17786 +     %DMNORMIP( _ARBFMT_1);
17787 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17788 +      IF  NOT MISSING(AffluenceGrade ) AND
17789 +                        16.5 <= AffluenceGrade  THEN DO;
17790 +        _NODE_  =                   31;
17791 +        _LEAF_  =                   24;
17792 +        P_TargetBuy0  =     0.13868613138686;
17793 +        P_TargetBuy1  =     0.86131386861313;
17794 +        Q_TargetBuy0  =     0.13868613138686;
17795 +        Q_TargetBuy1  =     0.86131386861313;
17796 +        I_TargetBuy  = '1' ;
17797 +        U_TargetBuy  =                    1;
17798 +        END;
17799 +      ELSE DO;
17800 +        _ARBFMT_12 = PUT( MobileApplications , BEST12.);
17801 +         %DMNORMIP( _ARBFMT_12);
17802 +        IF _ARBFMT_12 IN ('0' ) THEN DO;
17803 +          _NODE_  =                   59;
17804 +          _LEAF_  =                   23;
17805 +          P_TargetBuy0  =     0.62574850299401;
17806 +          P_TargetBuy1  =     0.37425149700598;
17807 +          Q_TargetBuy0  =     0.62574850299401;
17808 +          Q_TargetBuy1  =     0.37425149700598;
17809 +          I_TargetBuy  = '0' ;
17810 +          U_TargetBuy  =                    0;
17811 +          END;
17812 +        ELSE DO;
17813 +          IF  NOT MISSING(DayCareProducts ) AND
17814 +            DayCareProducts  <                  0.5 THEN DO;
17815 +            _NODE_  =                  100;
17816 +            _LEAF_  =                   21;
17817 +            P_TargetBuy0  =     0.69411764705882;
17818 +            P_TargetBuy1  =     0.30588235294117;
17819 +            Q_TargetBuy0  =     0.69411764705882;
17820 +            Q_TargetBuy1  =     0.30588235294117;
17821 +            I_TargetBuy  = '0' ;
17822 +            U_TargetBuy  =                    0;
17823 +            END;
17824 +          ELSE DO;
17825 +            _NODE_  =                  101;
17826 +            _LEAF_  =                   22;
17827 +            P_TargetBuy0  =     0.32440476190476;
17828 +            P_TargetBuy1  =     0.67559523809523;
17829 +            Q_TargetBuy0  =     0.32440476190476;
17830 +            Q_TargetBuy1  =     0.67559523809523;
17831 +            I_TargetBuy  = '1' ;
17832 +            U_TargetBuy  =                    1;
17833 +            END;
17834 +          END;
17835 +        END;
17836 +      END;
17837 +    ELSE DO;
17838 +      IF  NOT MISSING(AffluenceGrade ) AND
17839 +                        17.5 <= AffluenceGrade  THEN DO;
17840 +        _NODE_  =                   29;
17841 +        _LEAF_  =                   20;
17842 +        P_TargetBuy0  =     0.34285714285714;
17843 +        P_TargetBuy1  =     0.65714285714285;
17844 +        Q_TargetBuy0  =     0.34285714285714;
17845 +        Q_TargetBuy1  =     0.65714285714285;
17846 +        I_TargetBuy  = '1' ;
17847 +        U_TargetBuy  =                    1;
17848 +        END;
17849 +      ELSE DO;
17850 +        _NODE_  =                   28;
17851 +        _LEAF_  =                   19;
17852 +        P_TargetBuy0  =     0.81767955801104;
17853 +        P_TargetBuy1  =     0.18232044198895;
17854 +        Q_TargetBuy0  =     0.81767955801104;
17855 +        Q_TargetBuy1  =     0.18232044198895;
17856 +        I_TargetBuy  = '0' ;
17857 +        U_TargetBuy  =                    0;
17858 +        END;
17859 +      END;
17860 +    END;
17861 +  ELSE DO;
17862 +    _NODE_  =                    6;
17863 +    _LEAF_  =                   18;
17864 +    P_TargetBuy0  =     0.87801458216489;
17865 +    P_TargetBuy1  =      0.1219854178351;
17866 +    Q_TargetBuy0  =     0.87801458216489;
17867 +    Q_TargetBuy1  =      0.1219854178351;
17868 +    I_TargetBuy  = '0' ;
17869 +    U_TargetBuy  =                    0;
17870 +    END;
17871 +  END;
17872 +
17873 +*****  RESIDUALS R_ *************;
17874 +IF  F_TargetBuy  NE '0'
17875 +AND F_TargetBuy  NE '1'  THEN DO;
17876 +        R_TargetBuy0  = .;
17877 +        R_TargetBuy1  = .;
17878 + END;
17879 + ELSE DO;
17880 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17881 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17882 +       SELECT( F_TargetBuy  );
17883 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17884 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17885 +       END;
17886 + END;
17887 +
17888 +****************************************************************;
17889 +******          END OF DECISION TREE SCORING CODE         ******;
17890 +****************************************************************;
17891 +
17892 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17893  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IDS2_DATA.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
17894  quit;
17895  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
17897  proc sort data=WORK.EM_USER_REPORT;
17898  by ID VIEW;
17899  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17900  *------------------------------------------------------------*;
17901  * Tree: Computing metadata for TRAIN data;
17902  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
18303  data EMWS1.Tree_EMINFO;
18304  length TARGET KEY $32 DATA $43;
18305  input TARGET KEY DATA $;
18306  cards;
 
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18310  run;
18311  proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
18312  by TARGET KEY;
18313  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18314  proc sort data = EMWS1.Ids2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18315  by TARGET KEY;
18316  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS2_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18317  proc sort data = EMWS1.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18318  by TARGET KEY;
18319  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18320  data EMWS1.Tree_EMINFO;
18321  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18322  by TARGET KEY;
18323  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18324  proc datasets lib=work nolist;
18325  delete TEMP_INFO SORTEDEMINFO;
18326  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18327  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                May 01, 2018
Time:                17:20:35
*------------------------------------------------------------*
18351  data EMWS1.Tree_EMOUTFIT;
18352  set EMWS1.Tree_EMOUTFIT;
18353  length TargetLabel $200;
18354  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18355  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18356  proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
18357  by TARGET;
18358  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18359  %let _EMwarndup = 0;
18360  %let _EMtargetdup =;
18361  %let _EMASEtargetdup =;
18362  data _null_;
18363  set EMWS1.Tree_EMOUTFIT;
18364  if .<_ASE_<0.000001 then do;
18365  call symput('_EMwarndup', '1');
18366  call symput('_EMtargetdup', target);
18367  call symput('_EMASEtargetdup', put(_ASE_, best.));
18368  end;
18369  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18370  %let EMEXCEPTIONSTRING=;
18371  *------------------------------------------------------------*;
18372  * REPORT: Tree;
18373  *------------------------------------------------------------*;
18374  %let EM_ACTION = REPORT;
18375  %let syscc = 0;
18376  %macro main;
18377
18378    %if %upcase(&EM_ACTION) = CREATE %then %do;
18379      filename temp catalog 'sashelp.emmodl.tree_create.source';
18380      %include temp;
18381      filename temp;
18382
18383      %em_tree_create;
18384    %end;
18385
18386     %else
18387     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18388
18389         filename temp catalog 'sashelp.emmodl.tree_train.source';
18390         %include temp;
18391         filename temp;
18392         %em_tree_train;
18393     %end;
18394
18395    %else
18396    %if %upcase(&EM_ACTION) = SCORE %then %do;
18397      filename temp catalog 'sashelp.emmodl.tree_score.source';
18398      %include temp;
18399      filename temp;
18400
18401      %em_tree_score;
18402
18403    %end;
18404
18405    %else
18406    %if %upcase(&EM_ACTION) = REPORT %then %do;
18407
18408         filename temp catalog 'sashelp.emmodl.tree_report.source';
18409         %include temp;
18410         filename temp;
18411
18412         %em_tree_report;
18413     %end;
18414
18415    %else
18416    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18417
18418         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18419         %include temp;
18420         filename temp;
18421         %EM_TREE_OPENTREEVIEWER;
18422
18423     %end;
18424
18425    %else
18426    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18427
18428         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18429         %include temp;
18430         filename temp;
18431         %EM_TREE_CLOSETREEVIEWER;
18432
18433     %end;
18434
18435
18436     %doendm:
18437  %mend main;
18438
18439  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18441 +%macro em_tree_makePlotDs( multipleTar= );
18443 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18444 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18445 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18446 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18448 +  /* determine if validation statistics will be displayed */
18449 +  %let validflag=N;
18450 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18451 +    /* determine if validation data exists */
18452 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18453 +      %let validflag=Y;
18454 +    %end;
18455 +  %end;
18457 +   /* retrieve name of decmeta even in presence of multiple targets */
18458 +   %let decmeta = ;
18459 +   %if &EM_DEC_DECMETA eq %then %do;
18460 +     data _Target;
18461 +       set &em_data_variableset;
18462 +       where ROLE='TARGET' and USE in('D', 'Y');
18463 +       keep NAME;
18464 +     run;
18465 +     proc sort data=_Target;
18466 +       by NAME;
18467 +     run;
18468 +     proc sort data=EM_TARGETDECINFO;
18469 +       by TARGET;
18470 +     run;
18471 +     data _Target;
18472 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18473 +       by NAME;
18474 +       if _a then do;
18475 +         call symput('decmeta', trim(DECMETA));
18476 +       end;
18477 +     run;
18478 +     proc delete data=_Target;run;
18479 +   %end;
18480 +   %else %let decmeta = &EM_DEC_DECMETA;
18483 +  /* retrieve targetEvent from decmeta */
18484 +  %let targetEvent=;
18485 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18486 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18487 +      data _null_;
18488 +       set &DECMETA(where=(_TYPE_="TARGET"));
18489 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18490 +      run;
18491 +    %end;
18492 +  %end;
18494 +  /* retrieve predicted var for targetEvent from decmeta */
18495 +  %let predTarget=;
18496 +  %let predLvl=;
18497 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18498 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18499 +      data _null_;
18500 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18501 +       call symput('predTarget', strip(VARIABLE));
18502 +       call symput('predLvl', strip(LEVEL));
18503 +      run;
18504 +    %end;
18505 +  %end;
18506 +  %else %do;
18507 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18508 +      data _null_;
18509 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18510 +       call symput('predTarget', strip(VARIABLE));
18511 +      run;
18512 +    %end;
18513 +  %end;
18515 +  /* create BelowText value */
18516 +  data belowtext;
18517 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18518 +    keep node belowtext;
18519 +  run;
18521 +  /* replace belowtext with variable label if it exists */
18522 +  data belowtext2;
18523 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18524 +    keep node belowtextlbl;
18525 +  run;
18527 +  proc sort data=belowtext; by node; run;
18528 +  proc sort data=belowtext2; by node; run;
18530 +  data belowtext;
18531 +    merge belowtext belowtext2(in=_a);
18532 +    by node;
18533 +    if _a then belowtext=belowtextlbl;
18534 +    keep node belowtext;
18535 +  run;
18537 +  /* create AboveText value */
18538 +  data abovetext;
18539 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18540 +  run;
18541 +  proc sort data=abovetext; by node numeric_value; run;
18543 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18544 +  data abovetext;
18545 +    set abovetext(rename=(node=parent));
18546 +    by parent numeric_value;
18547 +    retain abovetext tempstring flag branch origval origchar ;
18548 +    length abovetext $256;
18549 +    length tempstring origchar $64;
18551 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18552 +      if first.parent then do;
18553 +        if missing(character_value) then do;
18554 +          numeric_value = round(numeric_value, &sp_precision);
18555 +          abovetext = "< "||strip(NUMERIC_VALUE);
18556 +          branch = 1;
18557 +          origval = numeric_value;
18558 +          output;
18559 +        end;
18560 +        else do;
18561 +          abovetext = "< "||strip(CHARACTER_VALUE);
18562 +          branch = 1;
18563 +          origchar = character_value;
18564 +          output;
18565 +        end;
18567 +        if first.parent AND last.parent then do;
18568 +          if missing(character_value) then do;
18569 +            numeric_value = round(numeric_value, &sp_precision);
18570 +            branch = branch + 1;
18571 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18572 +            output;
18573 +          end;
18574 +          else do;
18575 +            branch = branch + 1;
18576 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18577 +            output;
18578 +          end;
18579 +        end;
18580 +      end;
18581 +      else if last.parent then do;
18582 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18583 +          if missing(character_value) then do;
18584 +            numeric_value = round(numeric_value, &sp_precision);
18585 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18586 +          end;
18587 +          else do;
18588 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18589 +          end;
18590 +          branch = branch + 1;
18591 +          output;
18593 +          if missing(character_value) then do;
18594 +            numeric_value = round(numeric_value, &sp_precision);
18595 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18596 +          end;
18597 +          else do;
18598 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18599 +          end;
18600 +          branch = branch + 1;
18601 +          output;
18602 +        end;
18603 +        else do;
18604 +          if missing(character_value) then do;
18605 +            numeric_value = round(numeric_value, &sp_precision);
18606 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18607 +          end;
18608 +          else do;
18609 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18610 +          end;
18611 +          branch = branch + 1;
18612 +          output;
18613 +        end;
18614 +      end;
18615 +      else do;
18616 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18617 +          if missing(character_value) then do;
18618 +            numeric_value = round(numeric_value,&sp_precision);
18619 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18620 +            origval = numeric_value;
18621 +          end;
18622 +          else do;
18623 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18624 +            origchar = character_value;
18625 +          end;
18626 +          branch = branch + 1;
18627 +          output;
18629 +        end;
18630 +        else do;
18631 +          if missing(character_value) then do;
18632 +            numeric_value = round(numeric_value, &sp_precision);
18633 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18634 +            origval = numeric_value;
18635 +          end;
18636 +          else do;
18637 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18638 +            origval = character_value;
18639 +          end;
18640 +          branch = branch + 1;
18641 +          output;
18642 +        end;
18643 +      end;
18644 +    end;
18645 +    else do;
18646 +       if first.numeric_value then do;
18647 +         flag = 0;
18648 +         abovetext = strip(CHARACTER_VALUE);
18649 +         branch = numeric_value;
18650 +         if first.numeric_value AND last.numeric_value then do;
18651 +           output;
18652 +         end;
18653 +       end;
18654 +       else if last.numeric_value then do;
18655 +         if flag=0 then do;
18656 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18657 +           length = length(strip(tempstring));
18658 +           if length < 32 then do;
18659 +             abovetext = strip(tempstring);
18660 +           end;
18661 +           else do;
18662 +             abovetext = strip(abovetext)||", ...";
18663 +             flag = 1;
18664 +           end;
18665 +         end;
18666 +         branch = numeric_value;
18667 +         output;
18668 +       end;
18669 +       else do;
18670 +         if flag=0 then do;
18671 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18672 +           length = length(strip(tempstring));
18673 +           if length < 32 then do;
18674 +             abovetext = strip(tempstring);
18675 +           end;
18676 +           else do;
18677 +             abovetext = strip(abovetext)||", ...";
18678 +             flag=1;
18679 +           end;
18680 +         end;
18681 +         branch = numeric_value;
18682 +       end;
18683 +    end;
18684 +    keep parent branch abovetext;
18685 +  run;
18687 +  /* Missing value to abovetext */
18688 +  data tempmissing;
18689 +    set &EM_USER_OUTRULES;
18690 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18691 +    rename node=parent numeric_value=branch character_value=misschar;
18692 +  run;
18695 +  proc sort data=abovetext; by parent branch; run;
18696 +  proc sort data=tempmissing; by parent branch; run;
18697 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18699 +  data tempoutnodes;
18700 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18701 +    by parent branch;
18702 +    length traintotal validtotal 8;
18703 +    retain traintotal validtotal;
18705 +    if _a then do;
18706 +      if ^MISSING(abovetext) then do;
18707 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18708 +      end;
18709 +      else do;
18710 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18711 +      end;
18712 +    end;
18713 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18715 +    if node=1 then do;
18716 +      traintotal = N;
18717 +      validtotal=VN;
18718 +    end;
18720 +    drop role rank stat misschar belowtext;
18721 +  run;
18722 +  proc sort data=tempoutnodes; by node; run;
18723 +  proc sort data=belowtext; by node; run;
18725 +  data tempoutnodes;
18726 +    merge tempoutnodes belowtext;
18727 +    by node;
18729 +  run;
18731 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18732 +  %let adjusted = N;
18733 +  %let npriors = 0;
18734 +  data _null_ ;
18735 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18736 +    if eof then do ;
18737 +      call symput("npriors" , strip(put(_N_,best.))) ;
18738 +    end;
18739 +  run;
18740 +  %if &npriors gt 0 %then %let adjusted=Y;
18743 +  /* create a table with targetUsed and targetLevel columns for each node */
18744 +  data temptarmeta;
18745 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18746 +    %if &multipleTar eq N %then %do;
18747 +      AND USE in ('D', 'Y')
18748 +    %end;
18749 +    ));
18750 +    length TARGET $32;
18751 +    Target=name;
18752 +    keep target level;
18753 +  run;
18755 +  %if &multipleTar eq Y %then %do;
18756 +    data temptargetused;
18757 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18758 +      keep node target;
18759 +    run;
18760 +    proc sort data=temptargetused; by target; run;
18761 +    proc sort data=temptarmeta; by target; run;
18762 +    data temptargetused;
18763 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18764 +      by target;
18765 +      if _a and _b;
18766 +    run;
18767 +  %end;
18768 +  %else %do;
18769 +    data temptargetused;
18770 +      set &EM_USER_OUTSTATS;
18771 +      length target $32 tarlevel $10;
18772 +      target="%EM_TARGET";
18773 +      tarlevel="%EM_TARGET_LEVEL";
18774 +      keep node target tarlevel;
18775 +    run;
18776 +    proc sort data=temptargetused nodupkey; by node; run;
18777 +  %end;
18779 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
18780 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18781 +  proc sort data=temptargetused; by node; run;
18784 +  /* create tables for all interval targets as well as all class targets */
18785 +  data tempinterval tempclass;
18786 +    merge tempoutstats temptargetused( rename=(target=targetused));
18787 +    by node;
18788 +    %if "&multipleTar" eq "Y" %then %do;
18789 +      if ((missing(Target)) OR (target=targetused ));
18790 +    %end;
18792 +    if tarlevel="INTERVAL" then output tempinterval;
18793 +    else output tempclass;
18794 +  run;
18796 +  /* initialize intTarget and classTarget flags */
18797 +  %let em_intNobs =0;
18798 +  %let em_classNobs = 0;
18799 +  %let em_intTarget= N;
18800 +  %let em_classTarget= N;
18802 +  proc sql;
18803 +    reset noprint;
18804 +    select count(*) into :em_intNobs from tempinterval;
18805 +  quit;
18806 +  proc sql;
18807 +    reset noprint;
18808 +    select count(*) into :em_classNobs from tempclass;
18809 +  quit;
18811 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18812 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18814 +  /* retrieve all information for interval targets */
18815 +  %if &em_intTarget eq Y %then %do;
18817 +    /* determine if leaf variable exists */
18818 +    %let dsid=%sysfunc(open(tempinterval,i));
18819 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18820 +    %let rc=%sysfunc(close(&dsid));
18822 +    proc transpose data=tempinterval
18823 +      %if &leafexists %then %do;
18824 +        (drop=leaf)
18825 +      %end;
18826 +      %if &validexist %then %do;
18827 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18828 +      %end;
18829 +      %else %do;
18830 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18831 +      %end;
18832 +      by node;
18833 +      id statname;
18834 +    run;
18835 +    data tempinterval;
18836 +      set tempinterval;
18837 +      if missing(N) then delete;
18838 +    run;
18839 +  %end;
18841 +  /* retrieve all information for class targets */
18842 +  %if &em_classTarget eq Y %then %do;
18843 +    proc sort data=tempclass; by node category; run;
18844 +    %if &validflag eq N %then %do;
18845 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18846 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18847 +    %end;
18848 +    %else %do;
18849 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18850 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18851 +    %end;
18852 +      set tempclass;
18854 +      %if &validflag eq N %then %do;
18855 +        %if "&adjusted" eq "N" %then %do;
18856 +          if statname="N" then output tempn;
18857 +        %end;
18858 +        %else %do;
18859 +          if statname="NPRIORS" then output tempn;
18860 +        %end;
18861 +        else if statname="PREDICTION" then output temppredict;
18862 +        else if statname="PROBABILITY" then output tempprob;
18863 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18864 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18865 +      %end;
18866 +      %else %do;
18867 +        %if "&adjusted" eq "N" %then %do;
18868 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18869 +        %end;
18870 +        %else %do;
18871 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18872 +        %end;
18873 +        else if statname="PREDICTION" then output temppredict;
18874 +        else if statname="PROBABILITY" then output tempprob;
18875 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18876 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18877 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18878 +      %end;
18879 +    run;
18882 +    /* determine if profit/loss exists in tempprofit */
18883 +    %let em_profitflag=0;
18884 +    %let em_lossflag=0;
18885 +    proc sql;
18886 +      reset noprint;
18887 +      select count(*) into :em_profitflag from tempprofit;
18888 +    quit;
18889 +    proc sql;
18890 +      reset noprint;
18891 +      select count(*) into :em_lossflag from temploss;
18892 +    quit;
18894 +    %if &validFlag eq Y %then %do;
18895 +      proc transpose data=tempn
18896 +        %if "&adjusted" eq "N" %then %do;
18897 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18898 +        %end;
18899 +        %else %do;
18900 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18901 +        %end;
18902 +        by node;
18903 +        id statname;
18904 +      run;
18905 +      %if &em_profitflag ne 0 %then %do;
18906 +        proc transpose data=tempprofit out=tempprofit;
18907 +          by node category;
18908 +          id statname ;
18909 +        run;
18910 +      %end;
18911 +      %if &em_lossflag ne 0 %then %do;
18912 +        proc transpose data=temploss out=temploss;
18913 +          by node category;
18914 +          id statname ;
18915 +        run;
18916 +      %end;
18917 +      data tempprob;
18918 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18919 +        by node
18920 +        %if &multipleTar eq Y %then %do;
18921 +          target
18922 +        %end;
18923 +        category;
18924 +      run;
18925 +    %end;
18927 +    /* store percentcorrect value */
18928 +    data temppredict;
18929 +      merge tempprob temppredict(in=_a);
18930 +      by node category;
18931 +      if _a then do;
18932 +        percentCorrect = statvalue;
18933 +        %if &validFlag eq Y %then %do;
18934 +          vpercentCorrect= vstatvalue;
18935 +        %end;
18936 +      end;
18937 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18938 +      %if &validFlag eq Y %then %do;
18939 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18940 +      %end;
18941 +      ;
18942 +      if missing(percentCorrect) then delete;
18943 +      drop target;
18944 +    run;
18946 +    /* build profittext */
18947 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18948 +      data tempprofittext(keep= node profittext profitloss);
18949 +        length profittext $800 profitloss 8.;
18950 +        retain profittext profitloss;
18952 +        merge tempprob
18953 +        %if &em_profitflag ne 0 %then %do;
18954 +          tempprofit
18955 +        %end;
18956 +        %else %if &em_lossflag ne 0 %then %do;
18957 +          temploss
18958 +        %end;
18959 +        ;
18960 +        by node category;
18962 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18963 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18964 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18965 +          %let profittype = ALL;
18966 +        %end;
18968 +        /* create the profitloss variable for nodecolor if selected */
18969 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18971 +        %if "&profittype" eq "ALL" %then %do;
18972 +          if strip(CATEGORY)="&targetEvent" then do;
18973 +            profitloss=statvalue;
18974 +          end;
18975 +          if first.node then do;
18976 +            %if &validFlag eq N %then %do;
18977 +             %if &em_profitflag ne 0 %then %do;
18978 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18979 +             %end;
18980 +             %if &em_lossflag ne 0 %then %do;
18981 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18982 +             %end;
18983 +            %end;
18984 +            %else %do;
18985 +             %if &em_profitflag ne 0 %then %do;
18986 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18986!+;
18987 +             %end;
18988 +             %if &em_lossflag ne 0 %then %do;
18989 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18990 +             %end;
18991 +            %end;
18992 +          end;
18993 +          else if last.node then do;
18994 +            %if &validFlag eq N %then %do;
18995 +             %if &em_profitflag ne 0 %then %do;
18996 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18997 +             %end;
18998 +             %if &em_lossflag ne 0 %then %do;
18999 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19000 +             %end;
19001 +             /*if CATEGORY="&targetEvent" then do;
19002 +               profitloss=statvalue;
19003 +             end;*/
19004 +            %end;
19005 +            %else %do;
19006 +             %if &em_profitflag ne 0 %then %do;
19007 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19007!+14.&EM_PROPERTY_SPLITPRECISION);
19008 +                if CATEGORY="&targetEvent" then do;
19009 +                 profitloss=ALTERNATIVE_PROFIT;
19010 +                end;
19011 +             %end;
19012 +             %if &em_lossflag ne 0 %then %do;
19013 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19013!+14.&EM_PROPERTY_SPLITPRECISION);
19014 +                if CATEGORY="&targetEvent" then do;
19015 +                  profitloss=ALTERNATIVE_LOSS;
19016 +                end;
19017 +             %end;
19018 +            %end;
19019 +            output;
19020 +          end;
19021 +          else do;
19022 +            %if &validFlag eq N %then %do;
19023 +             %if &em_profitflag ne 0 %then %do;
19024 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19025 +             %end;
19026 +             %if &em_lossflag ne 0 %then %do;
19027 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19028 +             %end;
19029 +            %end;
19030 +            %else %do;
19031 +             %if &em_profitflag ne 0 %then %do;
19032 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19032!+14.&EM_PROPERTY_SPLITPRECISION);
19033 +             %end;
19034 +             %if &em_lossflag ne 0 %then %do;
19035 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19035!+14.&EM_PROPERTY_SPLITPRECISION);
19036 +             %end;
19037 +            %end;
19038 +          end;
19039 +        %end;
19040 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19041 +          if strip(CATEGORY) = "&targetevent" then do;
19042 +            %if &validFlag eq N %then %do;
19043 +             %if &em_profitflag ne 0 %then %do;
19044 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19045 +             %end;
19046 +             %if &em_lossflag ne 0 %then %do;
19047 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19048 +             %end;
19049 +             profitloss=statvalue;
19050 +            %end;
19051 +            %else %do;
19052 +             %if &em_profitflag ne 0 %then %do;
19053 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19053!+;
19054 +                profitloss=ALTERNATIVE_PROFIT;
19055 +             %end;
19056 +             %if &em_lossflag ne 0 %then %do;
19057 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19058 +                profitloss=ALTERNATIVE_LOSS;
19059 +             %end;
19060 +            %end;
19061 +            output;
19062 +          end;
19063 +        %end;
19064 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19065 +          if strip(CATEGORY) = "&targetevent" then do;
19066 +            %if &validFlag eq N %then %do;
19067 +             profitloss=statvalue;
19068 +            %end;
19069 +            %else %do;
19070 +             %if &em_profitflag ne 0 %then %do;
19071 +                profitloss=ALTERNATIVE_PROFIT;
19072 +             %end;
19073 +             %if &em_lossflag ne 0 %then %do;
19074 +                profitloss=ALTERNATIVE_LOSS;
19075 +             %end;
19076 +            %end;
19077 +            output;
19078 +          end;
19079 +        %end;
19080 +      run;
19081 +    %end;
19083 +    data tempprob(keep= node probtext);
19084 +      length probtext $800;
19085 +      retain probtext;
19086 +      set tempprob ;
19087 +      by node;
19089 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19090 +      %let probtype = &EM_PROPERTY_TARGET;
19091 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19092 +        %let probtype = ALL;
19093 +      %end;
19095 +      %if "&probtype" eq "ALL" %then %do;
19096 +        if first.node then do;
19097 +          %if &validFlag eq N %then %do;
19098 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19099 +          %end;
19100 +          %else %do;
19101 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19102 +          %end;
19103 +        end;
19104 +        else if last.node then do;
19105 +          %if &validFlag eq N %then %do;
19106 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19107 +          %end;
19108 +          %else %do;
19109 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19110 +          %end;
19111 +          output;
19112 +        end;
19113 +        else do;
19114 +          %if &validFlag eq N %then %do;
19115 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19116 +          %end;
19117 +          %else %do;
19118 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19119 +          %end;
19120 +        end;
19121 +      %end;
19122 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19123 +        if strip(CATEGORY) = "&targetevent" then do;
19124 +          %if &validFlag eq N %then %do;
19125 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19126 +          %end;
19127 +          %else %do;
19128 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19129 +          %end;
19130 +          output;
19131 +        end;
19132 +      %end;
19133 +      %else %if "&probtype" eq "NONE" %then %do;
19134 +        if last.node then do;
19135 +          output;
19136 +        end;
19137 +      %end;
19138 +    run;
19139 +  %end;
19141 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19143 +  %let oldexists=0;
19144 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19145 +     data old_tree_plot;
19146 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19147 +        rename nodecolor=oldnodecolor;
19148 +     run;
19150 +     proc sort data=old_tree_plot;
19151 +        by node;
19152 +     run;
19154 +     %let oldexists=1;
19155 +  %end;
19157 +  data &EM_USER_TREE_PLOT;
19158 +    length textall $800;
19159 +    merge tempoutnodes temptargetused
19161 +    %if &em_intTarget eq Y %then %do;
19162 +      tempinterval
19163 +    %end;
19165 +    %if &em_classTarget eq Y %then %do;
19167 +      %if &validFlag eq N %then %do;
19168 +        tempn(rename=(statvalue=N))
19169 +      %end;
19170 +      %else %do;
19171 +        tempn
19172 +      %end;
19174 +      temppredict tempprob
19176 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19177 +        tempprofittext
19178 +      %end;
19179 +    %end;
19180 +    ;
19181 +    by node;
19183 +    /* build nodetext based on user selection */
19184 +    textall="";
19186 +    %if &em_intTarget eq Y %then %do;
19187 +    if tarlevel="INTERVAL" then do;
19188 +      /* Nodeid */
19189 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19190 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19191 +      %end;
19193 +      /* Target identifier if multiple targets are used */
19194 +      %if "&multipleTar" eq "Y" %then %do;
19195 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19196 +      %end;
19198 +      %if &validFlag eq Y %then %do;
19199 +         /* Column labels displayed in validflag eq Y only */
19200 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19201 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19201!+noquote ))";
19202 +         %end;
19204 +         /* Average values */
19205 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19206 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19207 +         %end;
19209 +         /* RASE */
19210 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19211 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19212 +         %end;
19214 +         /* Count */
19215 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19216 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19217 +         %end;
19218 +      %end;
19219 +      %else %do;
19220 +         /* Average values */
19221 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19222 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19223 +         %end;
19225 +         /* RASE */
19226 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19227 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19228 +         %end;
19230 +         /* Count */
19231 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19232 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19233 +         %end;
19234 +      %end;
19236 +      /* nodecolor */
19237 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19238 +        nodecolor=PREDICTION;
19239 +      %end;
19240 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19241 +        nodecolor=RASE;
19242 +      %end;
19243 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19244 +        nodecolor=1;
19245 +      %end;
19247 +    end;
19248 +    %end;
19249 +    %if &em_classTarget eq Y %then %do;
19250 +    if tarlevel^="INTERVAL" then  do;
19252 +      /* Nodeid */
19253 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19254 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19255 +      %end;
19256 +      /* Target identifier if multiple targets are used */
19257 +      %if "&multipleTar" eq "Y" %then %do;
19258 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19259 +      %end;
19261 +      /* Predicted values */
19262 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19263 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19264 +      %end;
19266 +      /* Column labels displayed in validflag eq Y only */
19267 +      %if "&ValidFlag" eq "Y" %then %do;
19268 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19269 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19269!+noquote ))";
19270 +        %end;
19271 +      %end;
19273 +      /* Target Values */
19274 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19275 +        textall=strip(textall)||"0A"x||strip(probtext);
19276 +      %end;
19278 +      /* include profit or loss for all target levels */
19279 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19280 +        textall=strip(textall)||"0A"x||strip(profittext);
19281 +      %end;
19283 +      %if &validFlag eq N %then %do;
19284 +        /* Percent Correct */
19285 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19286 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19287 +        %end;
19289 +         /* Count */
19290 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19291 +          %if "&adjusted" eq "N" %then %do;
19292 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19293 +          %end;
19294 +          %else %do;
19295 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19296 +          %end;
19297 +         %end;
19298 +      %end;
19299 +      %else %do;
19300 +        /* Percent Correct */
19301 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19302 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19303 +        %end;
19305 +         /* Count */
19306 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19307 +          %if "&adjusted" eq "N" %then %do;
19308 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19309 +          %end;
19310 +          %else %do;
19311 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19312 +          %end;
19313 +         %end;
19314 +      %end;
19316 +      /* nodecolor */
19317 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19318 +       %if &multipleTar ne Y %then %do;
19319 +        nodecolor=&predTarget;
19320 +       %end;
19321 +       %else %do;
19322 +         nodecolor=percentcorrect;
19323 +       %end;
19324 +      %end;
19325 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19326 +        nodecolor=percentcorrect;
19327 +      %end;
19328 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19329 +        nodecolor=1;
19330 +      %end;
19331 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19332 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19333 +          nodecolor=percentcorrect;
19334 +        %end;
19335 +        %else %do;
19336 +          nodecolor=profitloss;
19337 +        %end;
19338 +      %end;
19340 +    end;
19341 +    %end;
19342 +    %if &em_intTarget eq Y %then %do;
19343 +     drop  PREDICTION  TARGET TARLEVEL
19344 +     %if &ValidFlag eq Y %then %do;
19345 +         VPREDICTION
19346 +     %end;
19347 +     ;
19348 +    %end;
19349 +    %if &em_classTarget eq Y %then %do;
19350 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19351 +     %if &ValidFlag eq Y %then %do;
19352 +         VSTATVALUE
19353 +     %end;
19354 +     ;
19355 +    %end;
19357 +  run;
19359 +  /* add leaf index information to plotds - based on primary target only*/
19360 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19361 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19362 +      set &EM_USER_OUTSTATS;
19363 +      if ((statname="PROBABILITY"
19364 +      %if &validexist %then %do;
19365 +       or statname="VALID: PROBABILITY"
19366 +      %end;
19367 +      ) AND (CATEGORY="&TARGETEVENT")
19368 +      %if "&multipleTar" eq "Y" %then %do;
19369 +        AND (Target="%EM_TARGET")
19370 +      %end;
19371 +      );
19372 +    run;
19374 +    %if &validexist %then %do;
19375 +      proc sort data=tempprob; by node; run;
19376 +      %let vpredTarget = V%substr(&predTarget, 2);
19377 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19378 +         by node;
19379 +         id statname;
19380 +      run;
19381 +    %end;
19382 +  %end;
19383 +  %else %do;
19384 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19385 +      set &EM_USER_OUTSTATS;
19386 +      if ((statname="PREDICTION"
19387 +      %if &validexist %then %do;
19388 +       or statname="VALID: PREDICTION"
19389 +      %end;
19390 +      )
19391 +      %if "&multipleTar" eq "Y" %then %do;
19392 +        AND (Target="%EM_TARGET")
19393 +      %end;
19394 +      );
19395 +    run;
19396 +    %if &validexist %then %do;
19397 +      proc sort data=tempprob; by node; run;
19398 +      %let vpredTarget = V%substr(&predTarget, 2);
19399 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19400 +         by node;
19401 +         id statname;
19402 +      run;
19403 +    %end;
19404 +  %end;
19406 +  proc sort data=tempprob; by node; run;
19407 +  data tempoutnodes;
19408 +    merge tempoutnodes tempprob;
19409 +    by node;
19410 +  run;
19412 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19413 +  data tempnodes;
19414 +    retain traintotal validtotal;
19415 +    set tempnodes(where=(leaf ne . ));
19416 +    tprob=round(&predTarget, .01);
19417 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19418 +      percevent_train=round(tprob*100, .01);
19419 +    %end;
19420 +    %else %do;
19421 +      percevent_train=tprob;
19422 +    %end;
19424 +    perc_train=round((n/traintotal)*100, 0.01);
19425 +    /* leafwidth already has a *10 multiplier */
19426 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19428 +    %if &validexist %then %do;
19429 +      %let vpredTarget = V%substr(&predTarget,2);
19430 +      vprob=round(&vpredTarget, .01);
19431 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19432 +        percevent_valid=round(vprob*100, .01);
19433 +      %end;
19434 +      %else %do;
19435 +        percevent_valid=vprob;
19436 +      %end;
19437 +      perc_valid=round((vn/validtotal)*100, .01);
19438 +    %end;
19440 +    index=_N_;
19441 +    keep node index tprob perc_train percevent_train
19442 +    %if &validexist %then %do;
19443 +        vprob percevent_valid perc_valid
19444 +    %end;
19445 +    ;
19446 +  run;
19447 +  proc sort data=tempnodes; by node; run;
19448 +  data &EM_USER_TREE_PLOT;
19449 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19450 +    by node;
19451 +    if missing(node) then delete;
19452 +    %if &oldexists %then %do;
19453 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19454 +      drop oldnodecolor;
19455 +    %end;
19456 +    abovetext = compbl(abovetext);
19458 +    /* add variable labels */
19459 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19460 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19461 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19462 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19463 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19464 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19466 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19467 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19468 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19469 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19470 +          %end;
19471 +          %else %do;
19472 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19473 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19474 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19475 +          %end;
19476 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19478 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19479 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19480 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19481 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19482 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19483 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19484 +          %end;
19485 +          %else %do;
19486 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19487 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19488 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19489 +          %end;
19490 +    ;
19491 +  run;
19493 +  /* delete temporary tables */
19494 +  proc datasets lib=work nolist;
19495 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19496 +  run;
19498 +%mend em_tree_makePlotDs;
19502 +%macro em_tree_report;
19504 +   /* report properties */
19505 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19506 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19507 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19508 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19509 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19510 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19511 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19512 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19513 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19514 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19515 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19516 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19517 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19519 +   %let validexist=0;
19520 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19521 +     %let validexist=1;
19522 +   %end;
19524 +   /* determine if multiple targets will be processed */
19525 +   %let em_tree_multipleTargets=N;
19526 +   %let em_tree_numTarget=1;
19527 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19528 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19529 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19530 +         %let em_tree_multipleTargets=N;
19531 +      %end;
19532 +      %else %do;
19533 +        data _null_;
19534 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19535 +          if eof then
19536 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19537 +        run;
19539 +        %if &em_tree_numTarget gt 1 %then %do;
19540 +           %let em_tree_multipleTargets=Y;
19541 +        %end;
19542 +     %end;
19543 +   %end;
19545 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19547 +   /* variable importance */
19548 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19549 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19551 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19552 +     /* and the columns may not be generated                                                                                 */
19553 +     %let em_tree_cvexists=;
19554 +     %let em_tree_surrexists=.;
19555 +     data _null_;
19556 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19557 +       if eof then do ;
19558 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19559 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19560 +       end;
19561 +     run;
19563 +     data &EM_USER_OUTIMPORT;
19564 +         set &EM_USER_OUTIMPORT;
19565 +         /* format columns based on Precison value specified */
19566 +         format importance 15.&EM_PROPERTY_PRECISION
19567 +              %if &validexist %then %do;
19568 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19569 +              %end;
19570 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19571 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19572 +              %end;
19573 +         ;
19574 +     run;
19576 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19577 +     proc print data=&EM_USER_OUTIMPORT
19578 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19579 +          (where=((nrules>0) OR (nsurrogates>0)))
19580 +        %end;
19581 +        %else %do;
19582 +           (where=(nrules>0))
19583 +        %end;
19584 +        label noobs
19585 +        ;
19586 +     run;
19587 +     title10;
19589 +   %end;
19591 +   /* Sequence */
19592 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19593 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19594 +   data _null_ ;
19595 +      set &EM_USER_outseq (obs=2) end=eof ;
19596 +      if eof then do ;
19597 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19598 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19599 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19600 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19601 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19602 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19603 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19604 +      end;
19605 +    run;
19607 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19608 +      data &EM_USER_OUTSEQ;
19609 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19610 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19611 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19612 +           _XMISC_=_VMISC_
19613 +        %end;
19614 +        %if "&em_tree_aprof" ne "."  %then %do;
19615 +           _XAPROF_=_VAPROF_
19616 +           _XPROF_ = _VPROF_
19617 +        %end;
19618 +        %if "&em_tree_aloss" ne "."  %then %do;
19619 +           _XALOSS_=_VALOSS_
19620 +        %end;
19621 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19622 +           _XPASE_ = _VPASE_
19623 +           _XPMISC_ = _VPMISC_
19624 +        %end;
19626 +        ));
19627 +     %end;
19628 +     %else %do;
19629 +        set &EM_USER_OUTSEQ;
19630 +     %end;
19632 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19633 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19634 +            _MISC_   15.&EM_PROPERTY_PRECISION
19635 +         %end;
19636 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19637 +            _PASE_  15.&EM_PROPERTY_PRECISION
19638 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19639 +         %end;
19640 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19641 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19642 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19643 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19644 +            %end;
19645 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19646 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19647 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19648 +            %end;
19649 +         %end;
19650 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19651 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19652 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19653 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19654 +            %end;
19655 +         %end;
19656 +         %if "&em_tree_seq" ne "." %then %do;
19657 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19658 +         %end;
19659 +         %if "&em_tree_vseq" ne "." %then %do;
19660 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19661 +         %end;
19662 +         %if "&em_tree_aprof" ne "." %then %do;
19663 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19664 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19665 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19666 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19667 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19668 +           %end;
19669 +         %end;
19670 +         %else %if "&em_tree_aloss" ne "." %then %do;
19671 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19672 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19673 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19674 +           %end;
19675 +         %end;
19676 +      ;
19677 +    run;
19678 +   %end;
19680 +   /* Observation Based Importance */
19681 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19683 +      /* need to check for 0 obs */
19684 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19685 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19686 +      %let rc=%sysfunc(close(&dsid));
19688 +      %if &onobs %then %do;
19689 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19690 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19692 +         data &EM_USER_OUTOBSIMP;
19693 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19694 +           if _a;
19695 +           by _INPUT1_;
19696 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19697 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19698 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19699 +                   %end;
19700 +                   ;
19701 +         run;
19702 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19703 +      %end;
19704 +   %end;
19706 +  %end;
19708 +  /* create dataset to support tree diagram and icicle plot */
19709 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19710 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19712 +  /* display tree diagram */
19713 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19714 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19716 +  /* display icicle diagram */
19717 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19718 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19720 +  /* Leaf Statistics Plot */
19721 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19723 +  /* print leaf information to output window */
19724 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19726 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19727 +       by descending N;
19728 +     run;
19730 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19731 +     %local vn;
19732 +     data _null_;
19733 +       set t (obs=2) end=eof;
19734 +       if eof then do;
19735 +         call symput("vn", strip(put(vn, best.)));
19736 +       end;
19737 +     run;
19739 +     data t;
19740 +       set t;
19741 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19742 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19743 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19744 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19745 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19746 +       %end;
19747 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19748 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19749 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19750 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19751 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19752 +          %end;
19753 +       %end;
19754 +       ;
19755 +     run;
19757 +     /* determine if rase is found in t */
19758 +    %let dsid=%sysfunc(open(t,i));
19759 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19760 +    %let rc=%sysfunc(close(&dsid));
19762 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19763 +     proc print data=t noobs label;
19764 +       where tprob ne .;
19765 +       var node depth N tprob
19766 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19767 +         %if "&vn" ne "." %then %do;
19768 +           VN
19769 +         %end;
19770 +         vprob
19771 +       %end;
19772 +       %if &raseexists %then %do;
19773 +            RASE
19774 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19775 +              VRASE
19776 +            %end;
19777 +       %end;
19778 +       ;
19779 +     run;
19780 +     title10;
19781 +  %end;
19783 +  /* create plots that are done during training of node */
19784 +  /* display iterative plot, including reference line */
19785 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19786 +   /* %if &nleaves eq  %then %do; */
19787 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19788 +      data _null_;
19789 +        set &EM_USER_OUTTOPOLOGY end=eof;
19790 +        if eof then do;
19791 +          call symput('nleaves', LEAF);
19792 +        end;
19793 +      run;
19794 +   /* %end; */
19796 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19797 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19798 +  %end;
19800 +  /* display leaf statistics */
19801 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19803 +  /* stats by node if multiple targets = Y */
19804 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19805 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19806 +    data &EM_USER_OUTSTATS;
19807 +      set &EM_USER_OUTSTATS;
19809 +     * if STATNAME="TARGET" then delete;
19810 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19811 +      drop leaf;
19812 +    run;
19813 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19815 +  %end;
19816 +  %else %do;
19817 +    /* add outstats and outdescribe to spk but not results */
19818 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19819 +  %end;
19821 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 18 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _VASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 52 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 52 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 23 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 23 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 23 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 33 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 33 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 33 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 33 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 33 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 46 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 787 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 46 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 23 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 47 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 47 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable VN is uninitialized.
NOTE: There were 46 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 47 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 23 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 47 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 47 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 23 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 23 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 47 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 188 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 188 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 188 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 141 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 47 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 188 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 188 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 188 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 47 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 188 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 188 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 188 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 188 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 47 observations and 2 variables.
NOTE: The data set WORK.TEMPPREDICT has 47 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 94 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 3 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 94 observations read from the data set WORK.TEMPPROB.
NOTE: There were 47 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 47 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 94 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 47 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 47 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1095:196
NOTE: There were 47 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 47 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 47 observations read from the data set WORK.TEMPN.
NOTE: There were 47 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 47 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 47 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 188 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 47 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 47 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 47 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 47 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 47 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 24 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 24 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable vprob is uninitialized.
NOTE: Variable perc_valid is uninitialized.
NOTE: Variable percevent_valid is uninitialized.
NOTE: There were 47 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 24 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 47 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 47 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 47 observations and 30 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 47 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 47 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      285:141
NOTE: There were 47 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
19822
19823  *------------------------------------------------------------*;
19824  * End REPORT: Tree;
19825  *------------------------------------------------------------*;
 
19826  /* Reset EM Options */
19827  options formchar="|----|+|---+=|-/\<>*";
19828  options nocenter ls=256 ps=10000;
19829  goptions reset=all device=GIF NODISPLAY;
 
19830  proc sort data=WORK.EM_USER_REPORT;
19831  by ID VIEW;
19832  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
19833  proc sort data=EMWS1.Ids2_CMeta_DATA out=WORK.SUBSETINMETA;
19834  by NAME;
19835  run;
 
NOTE: There were 21 observations read from the data set EMWS1.IDS2_CMETA_DATA.
NOTE: The data set WORK.SUBSETINMETA has 21 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19836  proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19837  by NAME;
19838  run;
 
NOTE: There were 21 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 21 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
19839  data WORK.ASSESS_META;
19840  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19841  by NAME;
19842  run;
 
NOTE: There were 21 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 21 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 21 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19843  data EM_temp_assessMeta;
19844  set EMWS1.Tree_CMeta_TRAIN;
19845  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19846  run;
 
NOTE: There were 10 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 10 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19847  data EM_temp_assessdata;
19848  set EMWS1.Tree_TRAIN(keep=
19849  F_TargetBuy
19850  I_TargetBuy
19851  P_TargetBuy0
19852  P_TargetBuy1
19853  Q_TargetBuy0
19854  Q_TargetBuy1
19855  R_TargetBuy0
19856  R_TargetBuy1
19857  U_TargetBuy
19858  _WARN_
19859  TargetBuy
19860  );
19861  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 23000 observations read from the data set SUPERMKT.SUPERMARKETCAMPAIGN.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
NOTE: There were 23000 observations read from the data set EMWS1.IDS2_DATA.
NOTE: There were 23000 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 23000 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24142   %let _cn = %sysfunc(getoption(CENTER));
24143   options nocenter;
24144   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
24145   var STAT LABEL TRAIN
24146   ;
24147   by TARGET TARGETLABEL;
24148   title9 ' ';
24149   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
24150   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24151   title10;
24152   options &_cn;
 
24153   proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
24154   by DATAROLE TARGET TARGETLABEL;
24155   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE_EMCLASSIFICATION has 4 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24156   %let _cn = %sysfunc(getoption(CENTER));
24157   options nocenter;
24158   proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
24159   var from into pct_row pct_col count percent
24160   ;
24161   by DATAROLE TARGET TARGETLABEL;
24162   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
24163   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
24164   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
24165   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
24166   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
24167   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
24168   where _TYPE_='PREDICTION';
24169   title9 ' ';
24170   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
24171   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
24172   title9;
24173   title10;
24174   options &_cn;
 
24175   %let _cn = %sysfunc(getoption(CENTER));
24176   options nocenter;
24177   data EMWS1.Tree_EMEVENTREPORT;
24178   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
24178 !  8;
24179   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
24179 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
24179 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
24179 ! FALSEEVENT
24180   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
24180 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
24180 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
24181      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
24182   FALSEEVENT=0;
24183   FALSENEVENT=0;
24184   TRUEEVENT=0;
24185   TRUENEVENT=0;
24186   set EMWS1.Tree_EMEVENTREPORT;
24187   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE_EMEVENTREPORT has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
24188   proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
24189   title9 ' ';
24190   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
24191   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
24192   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24193   title10;
24194   options &_cn;
 
24195   proc datasets library=EMWS1 nolist;
24196   modify Tree_EMRANK;
24197   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
24198   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
24199   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
24200   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
24201   %let _cn = %sysfunc(getoption(CENTER));
24202   options nocenter;
24203   proc print data=EMWS1.Tree_EMRANK label noobs;
24204   var
24205   decile gain lift liftc resp respc N _meanP_;
24206   by
24207   notsorted DATAROLE
24208   notsorted TARGET
24209   notsorted TARGETLABEL
24210   ;
24211   title9 ' ';
24212   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
24213   run;
 
NOTE: There were 20 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24214   title10;
24215   options &_cn;
 
24216   proc datasets library=EMWS1 nolist;
24217   modify Tree_EMSCOREDIST;
24218   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
24219   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
24220   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
24221   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
