*------------------------------------------------------------*
User:                Mohamed
Date:                May 09, 2018
Time:                14:55:29
Site:                12400032
Platform:            X64_10HOME
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
*------------------------------------------------------------*
* Training Log
Date:                May 09, 2018
Time:                14:55:14
*------------------------------------------------------------*
15253  proc freq data=EMWS1.Tree4_VariableSet noprint;
15254  table ROLE*LEVEL/out=WORK.Tree4META;
15255  run;
 
NOTE: There were 31 observations read from the data set EMWS1.TREE4_VARIABLESET.
NOTE: The data set WORK.TREE4META has 9 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
15256  proc print data=WORK.Tree4META label noobs;
15257  var ROLE LEVEL COUNT;
15258  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15259  title9 ' ';
15260  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15261  run;
 
NOTE: There were 9 observations read from the data set WORK.TREE4META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
15262  title10;
 
15263  %let EMNORLEN = %DMNORLEN;
EMWS1.Impt2_TRAIN EMWS1.Impt2_TRAIN
EMWS1.Impt2_TRAIN EMWS1.Impt2_TRAIN EMWS1 Impt2_TRAIN
EMWS1.Impt2_TRAIN EMWS1.Impt2_TRAIN
EMWS1.Impt2_TRAIN EMWS1.Impt2_TRAIN EMWS1 Impt2_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15292  data WORK.Tree4_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15293  length ORDER $20;
15294  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15295     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15296  set EMWS1.IDS2_TARGETBUY_DM( where=(_TYPE_="TARGET"));
15297  NumLevels=2;
15298  select(upcase(ORDER));
15299  when('DESC') ORDER = 'Descending';
15300  when('ASC') ORDER = 'Ascending';
15301  when('FMTDESC') ORDER = 'Formatted Descending';
15302  when('FMTASC') ORDER = 'Formatted Ascending';
15303  otherwise ORDER = 'Descending';
15304  end;
15305  output;
15306  run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE4_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
15307  title9 ' ';
15308  proc print data=WORK.Tree4_EVENT noobs label;
15309  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15310  title9 ' ';
15311  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15312  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE4_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15313  title10;
 
"No decisions defined for target "TargetBuy"."
15314  proc print data = EMWS1.Ids2_TargetBuy_DM noobs label;
15315  var _type_ variable label;
15316  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15317  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15318  title9 ' ';
15319  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15320  run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
15321  title10;
 
15322  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15859  *------------------------------------------------------------*;
15860  * Tree4: Generation of macros and macro variables;
15861  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15862  *------------------------------------------------------------*;
 
15863  %let EMEXCEPTIONSTRING=;
15864  *------------------------------------------------------------*;
15865  * TRAIN: Tree4;
15866  *------------------------------------------------------------*;
15867  %let EM_ACTION = TRAIN;
15868  %let syscc = 0;
15869  %macro main;
15870
15871    %if %upcase(&EM_ACTION) = CREATE %then %do;
15872      filename temp catalog 'sashelp.emmodl.tree_create.source';
15873      %include temp;
15874      filename temp;
15875
15876      %em_tree_create;
15877    %end;
15878
15879     %else
15880     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15881
15882         filename temp catalog 'sashelp.emmodl.tree_train.source';
15883         %include temp;
15884         filename temp;
15885         %em_tree_train;
15886     %end;
15887
15888    %else
15889    %if %upcase(&EM_ACTION) = SCORE %then %do;
15890      filename temp catalog 'sashelp.emmodl.tree_score.source';
15891      %include temp;
15892      filename temp;
15893
15894      %em_tree_score;
15895
15896    %end;
15897
15898    %else
15899    %if %upcase(&EM_ACTION) = REPORT %then %do;
15900
15901         filename temp catalog 'sashelp.emmodl.tree_report.source';
15902         %include temp;
15903         filename temp;
15904
15905         %em_tree_report;
15906     %end;
15907
15908    %else
15909    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15910
15911         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15912         %include temp;
15913         filename temp;
15914         %EM_TREE_OPENTREEVIEWER;
15915
15916     %end;
15917
15918    %else
15919    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15920
15921         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15922         %include temp;
15923         filename temp;
15924         %EM_TREE_CLOSETREEVIEWER;
15925
15926     %end;
15927
15928
15929     %doendm:
15930  %mend main;
15931
15932  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15934 +%macro em_tree_train;
15936 +   %if &EM_IMPORT_DATA eq %then %do;
15937 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15938 +       %put &em_codebar;
15939 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15940 +       %put &errormsg;
15941 +       %put &em_codebar;
15942 +       %goto doendm;
15943 +   %end;
15944 +   %else
15945 +       %let EMEXCEPTIONSTRING =;
15947 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15948 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15949 +        %put &em_codebar;
15950 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15951 +        %put &errormsg;
15952 +        %put &em_codebar;
15953 +        %goto doendm;
15954 +   %end;
15956 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15957 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15958 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15959 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15960 +        %put &em_codebar;
15961 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15962 +        %put &errormsg;
15963 +        %put &em_codebar;
15964 +        %goto doendm;
15965 +   %end;
15967 +   /* Initialize property macro variables */
15968 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15969 +   %include temp;
15970 +   filename temp;
15972 +   %EM_SetProperties;
15974 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15975 +   %EM_GETNAME(key=EMTREE, type=DATA);
15976 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15977 +     /* if import eq Y and no importtable defined, throw an exception */
15978 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15979 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15980 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15981 +         %put &em_codebar;
15982 +         %put &errmsg;
15983 +         %put &em_codebar;
15984 +         %goto doendm;
15985 +      %end;
15986 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15987 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15988 +         %put &em_codebar;
15989 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15990 +         %put &errormsg;
15991 +         %put &em_codebar;
15992 +         %goto doendm;
15993 +      %end;
15994 +      %else %do;
15995 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15996 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15997 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15998 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15999 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
16000 +         %let dsid = %sysfunc(close(&dsid));
16001 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
16002 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
16003 +            %put &em_codebar;
16004 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
16005 +            %put &errormsg;
16006 +            %put &em_codebar;
16007 +            %goto doendm;
16008 +         %end;
16009 +      %end;
16010 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
16011 +         proc delete data=&EM_USER_EMTREE;
16012 +         run;
16013 +      %end;
16014 +   %end;
16015 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
16016 +      proc delete data=&EM_USER_EMTREE;
16017 +      run;
16018 +   %end;
16020 +   /* load tree macros */
16021 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16022 +   %include temp;
16023 +   filename temp;
16025 +   /* data sets */
16026 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
16027 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
16028 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
16030 +   /* files */
16031 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
16033 +   /* check actual num of target levels */
16034 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
16035 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16036 +                              nLevel=_nTargetLevel );
16037 +      %if &_nTargetLevel  > 2 %then %do;
16038 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16039 +        %put &em_codebar;
16040 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16041 +        %put &errormsg;
16042 +        %put &em_codebar;
16043 +        %goto doendm;
16044 +      %end;
16045 +   %end;
16047 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16048 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16049 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16050 +        %let costflag=0;
16051 +        data _null_;
16052 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16053 +          if eof then call symput("costflag", _N_);
16054 +        run;
16055 +        %if &costflag gt 0 %then %do;
16056 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16057 +          %put &em_codebar;
16058 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16059 +          %put &errormsg;
16060 +          %put &em_codebar;
16061 +          %goto doendm;
16062 +       %end;
16063 +     %end;
16064 +   %end;
16066 +   /* determine if multiple targets will be processed */
16067 +   %let em_tree_multipleTargets=N;
16068 +   %let em_tree_numTarget = 1;
16069 +   %let em_tree_targetVars=;
16071 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16072 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16073 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16074 +         %let em_tree_multipleTargets=N;
16075 +      %end;
16076 +      %else %do;
16077 +         /* create macro array of targets  */
16078 +         data _null_;
16079 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16080 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16081 +           if eof then
16082 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16083 +        run;
16085 +        %if &em_tree_numTarget gt 1 %then %do;
16086 +           %let em_tree_multipleTargets=Y;
16087 +        %end;
16088 +      %end;
16089 +   %end;
16091 +   /* create view of only necessary variable for performance reasons */
16092 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16093 +   data &tempData / view=&tempData;
16094 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16095 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16096 +       %EM_TARGET
16097 +     %end;
16098 +     %else %do;
16099 +       %if &em_tree_numTarget ne 0 %then %do;
16100 +         %do i=1 %to &em_tree_numTarget;
16101 +            &&em_tree_targetVars&i
16102 +         %end;
16103 +       %end;
16104 +     %end;
16105 +     );
16106 +   run;
16108 +   /* run Tree procedure */
16109 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16111 +   /* Check return code and throw exception if error is detected */
16112 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16113 +   %if &syserr %then %do;
16114 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16115 +     %goto doendm;
16116 +   %end;
16118 +   /* add decision score code if multiple targets are processed */
16119 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16120 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16121 +   %end;
16123 +   /* create outfit dataset if multiple score statements have been executed */
16124 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16126 +   /* create English Rules */
16127 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16128 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16129 +       %em_tree_makeEnglishRules;
16131 +       /* English Rules */
16132 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16134 +     %end;
16135 +   filename x;
16137 +   %doendm:
16138 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16139 +%macro EM_SetProperties;
16141 +   /* train properties */
16142 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16148 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16149 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16150 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16153 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16154 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16155 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16163 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16165 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16166 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16167 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16168 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16169 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16170 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16171 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16172 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16173 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16174 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16175 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16176 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16177 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16178 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16179 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16180 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16181 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16182 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16184 +   /* properties for interactive sample */
16185 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16186 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16187 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16188 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16190 +   /* report properties */
16191 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16192 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16193 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16194 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16195 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16196 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16197 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16198 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16199 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16200 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16201 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16202 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16203 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16205 +   /* score properties */
16206 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16207 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16209 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE4_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16211 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16212 +  %global &nLevel;
16213 +  proc dmdb batch data=&indata
16214 +    classout=_tmp_dmdbout;
16215 +    class &target;
16216 +  run;
16217 +  data _tmp_dmdbout;
16218 +    set _tmp_dmdbout;
16219 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16220 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16221 +  run;
16222 +  data _null_;
16223 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16224 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16225 +    %let dsid = %sysfunc(close(&dsid));
16226 +     call symput("&nLevel", put(&_obs, Best12.));
16227 +  run;
16229 +  proc datasets lib=work nolist;
16230 +     delete _tmp_dmdbout;
16231 +  run;
16232 +  quit;
16233 +%Mend EM_CheckBinaryTargetLevel;
16236 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16238 +  /* determine the number of obs in training data */
16239 +  proc sql;
16240 +    reset noprint;
16241 +    select count(*) into :em_nobs from &indata;
16242 +  quit;
16244 +  /* determine the number of input variables */
16245 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16246 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16248 +  /* retrieve targetEvent from decmeta */
16249 +  %let targetEvent=;
16250 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16251 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16252 +      data _null_;
16253 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16254 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16255 +      run;
16256 +    %end;
16257 +  %end;
16259 +  /* create targetTable if multipleTar eq Y */
16260 +  data temptarget;
16261 +    set &EM_DATA_VARIABLESET;
16262 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16263 +  run;
16265 + /* data sets */
16266 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16267 + %EM_GETNAME(key=EMTREE,        type=DATA);
16268 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16269 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16270 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16271 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16272 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16273 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16274 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16275 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16277 + /* files */
16278 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16279 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16281 + /* turn on pmml if requested */
16282 + %let nnpmml=0;
16283 + %if %symexist(EM_PMML) %then %do;
16284 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16285 +       %let nnpmml=1;
16287 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16288 +   %end;
16289 +%end;
16291 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16293 +%if &nnpmml or &numClassTarget %then %do;
16295 +    /* create dmdb needed for pmml generation */
16296 +    %let tree_maxlevel = 512;
16297 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16298 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16299 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16300 +      %end;
16301 +    %end;
16302 +    %if &tree_maxlevel gt 0 %then %do;
16303 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16304 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16305 +    %end;
16307 +    %let targetOrderString =;
16308 +    %let targetString = ;
16309 +    data _null_;
16310 +       length orderString nameString $10000;
16311 +       retain orderString nameString;
16312 +       set &em_data_variableset end=eof;
16313 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16314 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16315 +       %end;
16316 +       %else %do;
16317 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16318 +       %end;          select(order);
16319 +         when('')        order ='DESC';
16320 +         when('FMTASC')  order='ASCFMT';
16321 +         when('FMTDESC') order='DESFMT';
16322 +         otherwise;
16323 +       end;
16324 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16325 +       nameString = trim(nameString)!!' '!!trim(NAME);
16327 +       if eof then do;
16328 +          call symput('targetOrderString', trim(orderString));
16329 +          call symput('targetString', trim(nameString));
16330 +       end;
16331 +    run;
16333 +    %let arborkluge= "work._treeDMDB";
16335 +    proc dmdb batch data=&indata
16336 +    %if &nnpmml %then %do;
16337 +        PMML
16338 +    %end;
16339 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16341 +      %if &nnpmml %then %do;
16342 +           %if "%EM_ID" ne "" %then %do;
16343 +             id %EM_ID;
16344 +           %end;
16345 +           %if &EM_NUM_CLASS gt 0 %then %do;
16346 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16347 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16348 +                  &targetOrderString;
16349 +           %end;
16350 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16351 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16352 +           %end;
16353 +           target &targetString %EM_INTERVAL_TARGET;
16354 +           %if "%EM_FREQ" ne "" %then %do;
16355 +             freq %EM_FREQ;
16356 +           %end;
16357 +      %end;
16358 +      %else %do;
16359 +         class  &targetOrderString;
16360 +         target &targetString %EM_INTERVAL_TARGET;
16361 +      %end;
16362 +    run;
16363 +    quit;
16365 +    proc datasets lib=work nolist;
16366 +       delete classout varout;
16367 +    run;
16368 +    quit;
16370 + %end;
16373 + /* run Arbor procedure */
16374 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16375 +  proc arbor data=&INDATA
16377 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16378 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16379 +  %end;
16381 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16382 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16383 +  %end;
16385 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16386 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16387 +  %end;
16389 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16390 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16391 +  %end;
16393 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16394 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16395 +  %end;
16397 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16398 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16399 +  %end;
16400 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16401 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16402 +  %end;
16403 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16404 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16405 +  %end;
16407 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16408 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16409 +      alpha = &EM_PROPERTY_SIGLEVEL
16410 +    %end;
16411 +  %end;
16413 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16414 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16415 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16416 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16417 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16419 +        padjust =
16420 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16421 +          &chaid
16422 +        %end;
16423 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16424 +          DEPTH
16425 +        %end;
16426 +      %end;
16427 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16428 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16429 +         pvars = &num_inputs
16430 +      %end;
16431 +    %end;
16432 +  %end;
16433 +  %else %do;
16434 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16435 +         padjust = NONE
16436 +      %end;
16437 +  %end;
16439 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16440 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16441 +    Maxrules = &num_nrules
16442 +  %end;
16444 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16445 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16446 +    Maxsurrs = &num_nsurrs
16447 +  %end;
16449 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16450 +     Missing=&EM_PROPERTY_MISSINGVALUE
16451 +  %end;
16453 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16454 +     USEVARONCE
16455 +  %end;
16457 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16458 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16459 +  %end;
16462 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16463 +    event = "&targetEvent"
16464 +  %end;
16466 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16467 +     DECSEARCH
16468 +  %end;
16470 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16471 +     PRIORSSEARCH
16472 +  %end;
16474 +  %if &arbor_1 ne %then %do;
16475 +    &arbor_1
16476 +  %end;
16478 +  %if &em_arbor ne %then %do;
16479 +     &em_arbor
16480 +  %end;
16481 +  ;
16482 + %end;
16483 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16484 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16485 +       Performance &EM_PROPERTY_PERFORMANCE
16486 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16487 +         nodesize=&EM_PROPERTY_NODESAMPLE
16488 +       %end;
16489 +       ;
16490 +       interact;
16491 + %end;
16492 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16493 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16494 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16495 +    %put &em_codebar;
16496 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16497 +    %put &errormsg;
16498 +    %put &em_codebar;
16499 +    %goto doendm;
16500 +   %end;
16501 +   %else %do;
16502 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16503 +       Performance &EM_PROPERTY_PERFORMANCE
16504 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16505 +         nodesize=&EM_PROPERTY_NODESAMPLE
16506 +       %end;
16507 +       ;
16508 +       interact;
16509 +   %end;
16510 + %end;
16512 + %else %do;
16513 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16514 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16515 +    %put &em_codebar;
16516 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16517 +    %put &errormsg;
16518 +    %put &em_codebar;
16519 +    %goto doendm;
16520 +   %end;
16521 +   %else %do;
16522 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16523 +       Performance &EM_PROPERTY_PERFORMANCE
16524 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16525 +         nodesize=&EM_PROPERTY_NODESAMPLE
16526 +       %end;
16527 +       ;
16528 +        interact;
16529 +   %end;
16530 + %end;
16532 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16533 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16534 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16535 +    %end;
16537 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16538 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16539 +    %end;
16541 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16542 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16543 +    %end;
16545 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16546 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16547 +    %end;
16549 +    %if "%EM_FREQ" ne "" %then %do;
16550 +       freq %EM_FREQ;
16551 +    %end;
16553 +    %if "&multipleTar" eq "Y" %then %do;
16554 +       /* cycle through all target vars in variableset */
16555 +       %let tdsid = %sysfunc(open(temptarget));
16556 +       %if &tdsid %then %do;
16557 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16558 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16559 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16560 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16561 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16562 +             target &var / level = &lvl
16563 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16564 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16565 +             %end;
16566 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16567 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16568 +             %end;
16569 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16570 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16571 +             %end;
16572 +          %end;
16573 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16574 +       %end;
16575 +       useTarget variable = %EM_TARGET;
16576 +    %end;
16577 +    %else %do;
16578 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16579 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16580 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16581 +      %end;
16582 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16583 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16584 +      %end;
16585 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16586 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16587 +      %end;
16588 +    %end;
16590 +    %if "&multipleTar" eq "N" %then %do;
16591 +      &EM_DEC_STATEMENT;
16592 +    %end;
16594 +    Performance &EM_PROPERTY_PERFORMANCE
16595 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16596 +      nodesize=&EM_PROPERTY_NODESAMPLE
16597 +    %end;
16598 +    ;
16600 +    %if "&intFlag" eq "Y" %then %do;
16601 +       INTERACT Largest;
16602 +       Train maxnewdepth=0;
16603 +    %end;
16605 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16606 +         Assess
16607 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16608 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16609 +              %put &em_codebar;
16610 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16611 +              %put &errormsg;
16612 +              %put &em_codebar;
16613 +            %end;
16614 +            %else %do;
16615 +               Validata=&EM_IMPORT_VALIDATE
16616 +            %end;
16617 +         %end;
16618 +         %else %do;
16619 +           NoValidata
16620 +         %end;
16621 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16622 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16623 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16624 +               %if &dsid %then %do;
16625 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16626 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16627 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16628 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16629 +                   %else %do;
16630 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16631 +                      %else %let measure= MISC;
16632 +                   %end;
16633 +                 %end;
16634 +               %end;
16635 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16636 +            %end;
16637 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16638 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16639 +                 %let measure=ASE;
16640 +              %end;
16641 +              %else %do;
16642 +                 %let measure=MISC;
16643 +              %end;
16644 +            %end;
16645 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16646 +              %let measure=ASE;
16647 +            %end;
16648 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16649 +               %let measure = LIFT;
16650 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16651 +               %if &dsid %then %do;
16652 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16653 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16654 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16655 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16656 +                 %end;
16657 +               %end;
16658 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16659 +            %end;
16660 +            measure=&measure
16661 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16662 +               event = "&targetEvent"
16663 +            %end;
16664 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16665 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16666 +            %end;
16667 +         %end;
16668 +         %if "&multipleTar" eq "N" %then %do;
16669 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16670 +               CV
16671 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16672 +                 CVNITer = &EM_PROPERTY_CVNITER
16673 +               %end;
16674 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16675 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16676 +               %end;
16677 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16678 +                 CVSeed = &EM_PROPERTY_CVSEED
16679 +               %end;
16680 +            %end;
16681 +         %end;
16682 +       %end;
16683 +      ;
16685 +      %if "&intFlag" ne "Y" %then %do;
16686 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16687 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16688 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16689 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16691 +          SUBTREE &subtree
16692 +          %if "&subtree" eq "NLEAVES" %then %do;
16693 +            =&EM_PROPERTY_NSUBTREE
16694 +          %end;
16695 +          ;
16696 +        %end;
16698 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16699 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16700 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16701 +          %end;
16702 +       %end;
16703 +      %end;
16704 + %end;
16707 + MakeMacro nleaves = nleaves;
16708 + save
16709 + %if "&EM_USER_EMTREE" ne "" %then %do;
16710 +   MODEL=&EM_USER_EMTREE
16711 + %end;
16712 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16713 +   SEQUENCE=&EM_USER_OUTSEQ
16714 + %end;
16715 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16716 +   IMPORTANCE=&EM_USER_OUTIMPORT
16717 + %end;
16718 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16719 +   NODESTAT=&EM_USER_OUTNODES
16720 + %end;
16721 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16722 +   SUMMARY=&EM_USER_OUTSUMMARY
16723 + %end;
16724 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16725 +   STATSBYNODE=&EM_USER_OUTSTATS
16726 + %end;
16727 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16728 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16729 + %end;
16730 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16731 +   Pathlistnonmissing=&EM_USER_OUTPATH
16732 + %end;
16733 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16734 +   RULES = &EM_USER_OUTRULES
16735 + %end;
16736 + ;
16738 + %if "&intFlag" ne "Y" %then %do;
16740 +   %let lookupString = ;
16741 +   %if ^%symexist(EM_OPTION) %then
16742 +      %let EM_OPTION=;
16744 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16745 +      %let lookupString = LOOKUP=SELECT;
16746 +   %end;
16748 +   %let codetext=;
16749 +   %let norescodetxt=;
16751 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16752 +     %let codetext=&codetext DUMMY;
16753 +     %let norescodetxt=&norescodetxt DUMMY;
16754 +   %end;
16755 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16756 +     %let codetext=&codetext NOLEAFID;
16757 +     %let norescodetxt=&norescodetxt NOLEAFID;
16758 +   %end;
16759 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16760 +     %let norescodetxt=&norescodetxt NOPRED;
16761 +   %end;
16763 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16764 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16766 +   %if &nnpmml %then %do;
16767 +     code pmml;
16768 +   %end;
16770 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16771 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16772 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16773 +   %end;
16774 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16775 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16776 +   %end;
16777 + %end;
16779 + run;
16780 + quit;
16782 + /*%em_checkerror(); */
16783 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16784 +   /* Delete DMDB catalog */
16785 +   proc datasets lib=work nolist;
16786 +       delete _treeDMDB / mt=cat;
16787 +  run;
16788 +  %end;
16790 + %if &nnpmml %then %do;
16791 +    ods pmml close;
16792 + %end;
16794 +  %doendm:
16796 +%mend em_tree_runTreeProcedure;
16798 +%macro em_tree_createFitStats( multipleTar= );
16801 +  /* create targetTable is multipleTar eq Y */
16802 +  data temptarget;
16803 +    set &EM_DATA_VARIABLESET;
16804 +    where ROLE="TARGET";
16805 +  run;
16807 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16808 +   data &EM_USER_EMOUTFIT;
16809 +     length target $32;
16810 +     merge work.fit_train
16811 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16812 +       work.fit_valid
16813 +     %end;
16814 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16815 +       work.fit_test
16816 +     %end;
16817 +     ;
16818 +     %if "&multipleTar" eq "N" %then %do;
16819 +       target="%EM_TARGET";
16820 +     %end;
16821 +     %else %do;
16822 +       target = _TARGET_;
16823 +     %end;
16824 +     drop _NW_ _SUMW_
16825 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16826 +        _VSUMW_
16827 +     %end;
16828 +     ;
16829 +   run;
16831 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16832 +     proc datasets library=work nolist;
16833 +       delete fit_valid;
16834 +     run;
16835 +   %end;
16836 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16837 +     proc datasets library=work nolist;
16838 +       delete fit_test;
16839 +     run;
16840 +   %end;
16842 +%mend em_tree_createFitStats;
16845 +%macro em_tree_makeEnglishRules;
16847 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16848 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16850 +  /* verify that necessary tables exist and if not, skip processing */
16851 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16852 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16853 +    %goto doendm;
16854 +  %end;
16855 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16856 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16857 +    %goto doendm;
16858 +  %end;
16860 +  /* determine length of variable in outpath dataset */
16861 +  %let vlength= ;
16862 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16863 +  %if &dsid ne %then %do;
16864 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16865 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16866 +  %end;
16867 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16869 +  data tempoutpath;
16870 +    length varname $&vlength;
16871 +    retain varname;
16872 +    set &EM_USER_OUTPATH;
16874 +    if ^missing(variable) then varname=variable;
16875 +    else if ^missing(var_name) then varname=var_name;
16876 +    output;
16877 +  run;
16879 +  /* create an array of generated predicted variable names */
16880 +  %let tree_pred_vars = ;
16881 +  %let tree_pred_label = ;
16882 +  %let numpred= 0;
16883 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16885 +    data _null_;
16886 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16887 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16888 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16889 +     if eof then
16890 +       call symput('numpred', strip(put(_N_, BEST.)));
16891 +    run;
16892 +  %end;
16894 +  /* determine if NPRIORS exists in outnodes  */
16895 +  %local nprior_flag;
16896 +  data _null_;
16897 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16898 +    if eof then do;
16899 +      call symput('nprior_flag', strip(put(npriors, best.)));
16900 +    end;
16901 +  run;
16903 +  proc sort data=tempoutpath; by node; run;
16904 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16906 +  data tempoutpath;
16907 +    merge tempoutpath(in=_a) outnodes(keep= node
16908 +    %if "&nprior_flag" ne "." %then %do;
16909 +      NPRIORS
16910 +    %end;
16911 +    %else %do;
16912 +      N
16913 +    %end;
16914 +    %if &numpred gt 0 %then %do;
16915 +      %do i=1 %to &numpred;
16916 +        &&tree_pred_vars&i
16917 +      %end;
16918 +    %end;
16919 +    );
16920 +    by node;
16921 +    if _a;
16922 +  run;
16924 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16926 +  data _null_;
16927 +    file x;
16928 +    set tempoutpath;
16929 +    by node descending varname;
16930 +    retain origvar oldnode string;
16931 +    length origvar $32 oldnode 8 string $200;
16933 +    if _N_ = 1 then do;
16934 +      origvar = varname;
16935 +      oldnode = node;
16936 +    end;
16938 +    if first.node then do;
16939 +       put "&EM_CODEBAR";
16940 +       put " Node = " node;
16941 +       put "&EM_CODEBAR";
16942 +    end;
16944 +      if first.varname then do;
16945 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16946 +            if MISSING(CHARACTER_VALUE) then do;
16947 +             if NUMERIC_VALUE ne .  then do;
16948 +              if ^first.node then do;
16949 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16950 +              end;
16951 +              else do;
16952 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16953 +              end;
16954 +             end;
16955 +            end;
16956 +            else do;
16957 +              if ^first.node then do;
16958 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16959 +              end;
16960 +              else do;
16961 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16962 +              end;
16963 +             end;
16964 +         end;
16965 +         else if RELATION in ("=") then do;
16966 +            if ^first.node then do;
16967 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16968 +            end;
16969 +            else do;
16970 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16971 +            end;
16972 +         end;
16973 +         else if RELATION in ("ISMISSING") then do;
16974 +            if ^first.node then do;
16975 +              string = " AND "|| strip(varname) || " equals Missing";
16976 +            end;
16977 +            else do;
16978 +              string = "if "|| strip(varname) ||" equals Missing";
16979 +            end;
16980 +         end;
16981 +         else if RELATION in ("ISNOTMISSING") then do;
16982 +            if ^first.node then do;
16983 +              string = " AND "|| strip(varname) || " equals All Values";
16984 +            end;
16985 +            else do;
16986 +              string = "if "|| strip(varname) ||" equals All Values";
16987 +            end;
16988 +         end;
16989 +         if ^missing(varname) then origvar = varname;
16990 +         oldnode=node;
16992 +      end;
16993 +      else do;
16994 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16995 +          if MISSING(CHARACTER_VALUE) then do;
16996 +           if  NUMERIC_VALUE ne .  then do;
16997 +            if ^MISSING(string) then
16998 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16999 +            else
17000 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
17001 +           end;
17002 +          end;
17003 +          else do;
17004 +            if ^MISSING(string) then
17005 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17006 +            else
17007 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17008 +          end;
17010 +         end;
17011 +         else if RELATION in ("=") then do;
17012 +           string = strip(string)||", "||strip(character_value);
17013 +         end;
17014 +         else if RELATION in ("ISMISSING") then do;
17016 +         end;
17017 +         if ^missing(varname) then origvar = varname;
17018 +         oldnode=node;
17019 +      end;
17020 +      if last.varname then do;
17021 +         if RELATION in ("ISMISSING") then do;
17022 +           if ^first.varname then do;
17023 +             string = strip(string) || " or MISSING";
17024 +           end;
17025 +         end;
17026 +         put string;
17027 +         if ^missing(varname) then origvar = varname;
17028 +         oldnode=node;
17029 +      end;
17031 +      if last.node then do;
17032 +         put "then ";
17033 +         put " Tree Node Identifier   = " node;
17035 +         %if "&nprior_flag" ne "." %then %do;
17036 +           put " Number of Observations = " NPRIORS;
17037 +         %end;
17038 +         %else %do;
17039 +           put " Number of Observations = " N;
17040 +         %end;
17042 +         %if &numpred gt 0 %then %do;
17043 +           %do i=1 %to &numpred;
17044 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17045 +           %end;
17046 +         %end;
17048 +         put " ";
17049 +         if ^missing(varname) then origvar = varname;
17050 +         oldnode=node;
17051 +      end;
17053 +  run;
17055 +  proc datasets lib=work nolist;
17056 +    delete tempoutpath outnodes;
17057 +  run;
17059 +  %doendm:
17060 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 893   Memory used = 511K.
NOTE: View EMWS1.IMPT2_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 893 observations read from the data set EMWS1.PART3_TRAIN.
NOTE: There were 893 observations read from the data set EMWS1.IMPT2_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.09 seconds
      cpu time            0.11 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE4.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT2_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.11 seconds
 
 
NOTE: There were 893 observations read from the data set EMWS1.PART3_TRAIN.
NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
NOTE: There were 893 observations read from the data set EMWS1.IMPT2_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.18 seconds
      cpu time            0.18 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 893   Memory used = 511K.
NOTE: There were 893 observations read from the data set EMWS1.PART3_TRAIN.
NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
NOTE: There were 893 observations read from the data set EMWS1.IMPT2_TRAIN.
NOTE: There were 893 observations read from the data set EMWS1.EM_TREE4.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.18 seconds
      cpu time            0.20 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.IMPT2_VALIDATE.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.26 seconds
 
NOTE: 1491602 kilobytes of physical memory.
NOTE: Will use 893 out of 893 training cases.
NOTE: Using memory pool with 142857216 bytes.
NOTE: Will not search for split on variable LoyaltyClass.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Will not search for split on variable FacebookLike.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Passed training data 12 times.
NOTE: Training used 436912 bytes of work memory.
NOTE: There were 894 observations read from the data set EMWS1.PART3_VALIDATE.
NOTE: The subtree sequence contains 17 subtrees. The largest has 33 nodes and 17 leaves.
NOTE: Using subtree with 13 nodes and 7 leaves.
NOTE: Using subtree with 13 nodes and 7 leaves.
NOTE: Created macro variable NLEAVES equal to 7.
NOTE: The data set EMWS1.TREE4_OUTIMPORT has 18 observations and 6 variables.
NOTE: The data set EMWS1.TREE4_EMTREE has 993 observations and 4 variables.
NOTE: The data set EMWS1.TREE4_OUTNODES has 13 observations and 24 variables.
NOTE: The data set EMWS1.TREE4_OUTPATH has 52 observations and 7 variables.
NOTE: The data set EMWS1.TREE4_OUTRULES has 181 observations and 6 variables.
NOTE: The data set EMWS1.TREE4_OUTSEQ has 17 observations and 20 variables.
NOTE: The data set EMWS1.TREE4_OUTSTATS has 91 observations and 5 variables.
NOTE: The data set EMWS1.TREE4_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE4_OUTTOPOLOGY has 13 observations and 5 variables.
NOTE: External file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree4\TREEFLOW.sas opened.
NOTE: External file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree4\TREEPUBLISH.sas opened.
NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 893 observations read from the data set EMWS1.PART3_TRAIN.
NOTE: There were 893 observations read from the data set EMWS1.IMPT2_TRAIN.
NOTE: View EMWS1.IMPT2_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: There were 894 observations read from the data set EMWS1.PART3_VALIDATE.
 
 
NOTE: There were 893 observations read from the data set EMWS1.PART3_TRAIN.
NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.71 seconds
      cpu time            0.70 seconds
 
NOTE: There were 893 observations read from the data set EMWS1.IMPT2_TRAIN.
NOTE: There were 893 observations read from the data set EMWS1.EM_TREE4.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.73 seconds
      cpu time            0.70 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE4_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 52 observations read from the data set EMWS1.TREE4_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 52 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 52 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.TREE4_OUTNODES.
NOTE: The data set WORK.OUTNODES has 13 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 13 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 52 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 52 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree4\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=09May2018:14:55:18,
      Create Time=09May2018:14:55:18
 
NOTE: 86 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 52 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
NOTE: Fileref X has been deassigned.
17062
17063  *------------------------------------------------------------*;
17064  * End TRAIN: Tree4;
17065  *------------------------------------------------------------*;
 
17066  *------------------------------------------------------------*;
17067  * Close any missing semi colons;
17068  *------------------------------------------------------------*;
17069  ;
17070  ;
17071  ;
17072  ;
17073  quit;
17074  *------------------------------------------------------------*;
17075  * Close any unbalanced quotes;
17076  *------------------------------------------------------------*;
17077  /*; *"; *'; */
17078  ;
17079  run;
17080  quit;
17081  /* Reset EM Options */
17082  options formchar="|----|+|---+=|-/\<>*";
17083  options nocenter ls=256 ps=10000;
17084  goptions reset=all device=GIF NODISPLAY;
 
17085  proc sort data=WORK.EM_USER_REPORT;
17086  by ID VIEW;
17087  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                May 09, 2018
Time:                14:55:19
*------------------------------------------------------------*
17189  %let EMEXCEPTIONSTRING=;
17190  *------------------------------------------------------------*;
17191  * SCORE: Tree4;
17192  *------------------------------------------------------------*;
17193  %let EM_ACTION = SCORE;
17194  %let syscc = 0;
17195  %macro main;
17196
17197    %if %upcase(&EM_ACTION) = CREATE %then %do;
17198      filename temp catalog 'sashelp.emmodl.tree_create.source';
17199      %include temp;
17200      filename temp;
17201
17202      %em_tree_create;
17203    %end;
17204
17205     %else
17206     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17207
17208         filename temp catalog 'sashelp.emmodl.tree_train.source';
17209         %include temp;
17210         filename temp;
17211         %em_tree_train;
17212     %end;
17213
17214    %else
17215    %if %upcase(&EM_ACTION) = SCORE %then %do;
17216      filename temp catalog 'sashelp.emmodl.tree_score.source';
17217      %include temp;
17218      filename temp;
17219
17220      %em_tree_score;
17221
17222    %end;
17223
17224    %else
17225    %if %upcase(&EM_ACTION) = REPORT %then %do;
17226
17227         filename temp catalog 'sashelp.emmodl.tree_report.source';
17228         %include temp;
17229         filename temp;
17230
17231         %em_tree_report;
17232     %end;
17233
17234    %else
17235    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17236
17237         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17238         %include temp;
17239         filename temp;
17240         %EM_TREE_OPENTREEVIEWER;
17241
17242     %end;
17243
17244    %else
17245    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17246
17247         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17248         %include temp;
17249         filename temp;
17250         %EM_TREE_CLOSETREEVIEWER;
17251
17252     %end;
17253
17254
17255     %doendm:
17256  %mend main;
17257
17258  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17260 +%macro em_tree_score;
17262 +   /* determine if multiple targets will be processed */
17263 +   %let em_tree_multipleTargets=N;
17264 +   %let em_tree_numTarget=1;
17265 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17266 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17267 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17268 +         %let em_tree_multipleTargets=N;
17269 +      %end;
17270 +      %else %do;
17271 +         /* create macro array of targets  */
17272 +         data _null_;
17273 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17274 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17275 +           if eof then
17276 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17277 +        run;
17279 +        %if &em_tree_numTarget gt 1 %then %do;
17280 +           %let em_tree_multipleTargets=Y;
17281 +        %end;
17282 +      %end;
17283 +   %end;
17285 +   /* build flow and publish scoring code */
17286 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17287 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17289 +   filename treeflow "&EM_USER_TREEFLOW";
17290 +   filename treepub "&EM_USER_TREEPUBLISH";
17292 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17293 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17295 +   %em_copyfile(infref=treeflow, outfref=flowref);
17296 +   %em_copyfile(infref=treepub, outfref=pubref);
17298 +   filename treeflow;
17299 +   filename treepub;
17301 +   /* if priors are used, add code to generate unadjusted residuals in export */
17302 +   %let useAdjPriors = N;
17303 +   data _null_;
17304 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17305 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17306 +   run;
17307 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17308 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17309 +      %include temp;
17310 +      filename temp;
17312 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17313 +      filename adjref "&EM_USER_adjResidualCode";
17314 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17316 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17318 +      filename adjref;
17319 +   %end;
17321 +   /* LEAF */
17322 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17323 +      data _null_;
17324 +        file flowref mod;
17325 +        put 'drop _LEAF_;';
17326 +      run;
17328 +      data _null_;
17329 +        file pubref mod;
17330 +        put 'drop _LEAF_;';
17331 +      run;
17333 +   %end;
17335 +   filename flowref;
17336 +   filename pubref;
17338 +   /* em_metachange code */
17339 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17340 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17341 +   %end;
17343 +   /* variable selection based on importance stat    */
17344 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17345 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17346 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17347 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17348 +     %let obs = %sysfunc(fetch(&dsid));
17349 +     %do %while(&obs=0);
17350 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17351 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17352 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17353 +       %let obs = %sysfunc(fetch(&dsid));
17354 +     %end;
17355 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17356 +   %end;
17358 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17359 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17360 +    %let tree_pred_vars = ;
17361 +    %let tree_pred_lvl =;
17362 +    %let numpred= 0;
17364 +    data _null_;
17365 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17366 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17367 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17368 +     if eof then
17369 +       call symput('numpred', strip(put(_N_, BEST.)));
17370 +    run;
17371 +   %end;
17373 +   %if &numpred ne 0 %then %do;
17374 +    %do i=1 %to &numpred;
17375 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17376 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17377 +    %end;
17378 +   %end;
17380 +   /* determine if multiple targets will be processed */
17381 +   %let em_tree_multipleTargets=N;
17382 +   %let em_tree_numTarget=1;
17383 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17384 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17385 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17386 +         %let em_tree_multipleTargets=N;
17387 +      %end;
17388 +      %else %do;
17389 +        data _null_;
17390 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17391 +          if eof then
17392 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17393 +        run;
17395 +        %if &em_tree_numTarget gt 1 %then %do;
17396 +           %let em_tree_multipleTargets=Y;
17397 +        %end;
17398 +     %end;
17399 +   %end;
17401 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17402 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17404 +      /* variable importance */
17405 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17406 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17408 +         %let validexist=0;
17409 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17410 +           %let validexist=1;
17411 +         %end;
17413 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17414 +         /* and the columns may not be generated                                                                                 */
17415 +         %let em_tree_cvexists=;
17416 +         %let em_tree_surrexists=.;
17417 +         data _null_;
17418 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17419 +            if eof then do ;
17420 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17421 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17422 +            end;
17423 +         run;
17425 +         data &EM_USER_OUTIMPORT;
17426 +            set &EM_USER_OUTIMPORT;
17428 +            /* format columns based on Precison value specified */
17429 +            format importance 15.&EM_PROPERTY_PRECISION
17430 +                 %if &validexist %then %do;
17431 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17432 +                 %end;
17433 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17434 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17435 +                 %end;
17436 +            ;
17437 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17438 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17439 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17440 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17441 +                 %if "&em_tree_surrexists" ne "" %then %do;
17442 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17443 +                 %end;
17444 +                 %if &validexist %then %do;
17445 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17446 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17447 +                 %end;
17448 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17449 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17450 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17451 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17452 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17453 +                 %end;
17454 +            ;
17455 +         run;
17457 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17458 +      %end;
17459 +   %end;
17461 +   %doendm:
17462 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=09May2018:14:55:19,
      Create Time=09May2018:14:55:19
 
NOTE: 160 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=09May2018:14:55:19,
      Create Time=09May2018:14:55:19
 
NOTE: 138 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5917,
      Last Modified=09May2018:14:55:19,
      Create Time=09May2018:14:55:19
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5244,
      Last Modified=09May2018:14:55:19,
      Create Time=09May2018:14:55:19
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 18 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: The data set EMWS1.TREE4_OUTIMPORT has 18 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
17463
17464  *------------------------------------------------------------*;
17465  * End SCORE: Tree4;
17466  *------------------------------------------------------------*;
 
17467  proc sort data=WORK.EM_METACHANGE;
17468  by key uname;
17469  run;
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17470  filename x "D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree4\CDELTA_TRAIN.sas";
17471  data _null_;
17472  file x;
17473  put 'if upcase(NAME) = "AFFLUENCEGRADE" then do;';
17474  put 'ROLE = "REJECTED";';
17475  put 'end;';
17476  put 'else ';
17477  put 'if upcase(NAME) = "CAMPAIGNVIEWEDEMAIL" then do;';
17478  put 'ROLE = "REJECTED";';
17479  put 'end;';
17480  put 'else ';
17481  put 'if upcase(NAME) = "FACEBOOKLIKE" then do;';
17482  put 'ROLE = "REJECTED";';
17483  put 'end;';
17484  put 'else ';
17485  put 'if upcase(NAME) = "LOTIONPRODUCTS" then do;';
17486  put 'ROLE = "REJECTED";';
17487  put 'end;';
17488  put 'else ';
17489  put 'if upcase(NAME) = "LOYALTYCLASS" then do;';
17490  put 'ROLE = "REJECTED";';
17491  put 'end;';
17492  put 'else ';
17493  put 'if upcase(NAME) = "NIGHTREPAIRPRODUCTS" then do;';
17494  put 'ROLE = "REJECTED";';
17495  put 'end;';
17496  put 'else ';
17497  put 'if upcase(NAME) = "PREVIOUSCAMPAIGN" then do;';
17498  put 'ROLE = "REJECTED";';
17499  put 'end;';
17500  put 'else ';
17501  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
17502  put 'ROLE = "ASSESS";';
17503  put 'end;';
17504  put 'else ';
17505  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
17506  put 'ROLE = "ASSESS";';
17507  put 'end;';
17508  put 'else ';
17509  put 'if upcase(NAME) = "REP_ADVERTISEMENTZONE" then do;';
17510  put 'ROLE = "REJECTED";';
17511  put 'end;';
17512  put 'else ';
17513  put 'if upcase(NAME) = "REP_CLUSTERGROUP" then do;';
17514  put 'ROLE = "REJECTED";';
17515  put 'end;';
17516  put 'else ';
17517  put 'if upcase(NAME) = "REP_LOYALTYTIME" then do;';
17518  put 'ROLE = "REJECTED";';
17519  put 'end;';
17520  put 'else ';
17521  put 'if upcase(NAME) = "REP_REGION" then do;';
17522  put 'ROLE = "REJECTED";';
17523  put 'end;';
17524  put 'else ';
17525  put 'if upcase(NAME) = "TIMESINCELASTPURCHASE" then do;';
17526  put 'ROLE = "REJECTED";';
17527  put 'end;';
17528  put 'else ';
17529  put 'if upcase(NAME) = "TOTALSPEND" then do;';
17530  put 'ROLE = "REJECTED";';
17531  put 'end;';
17532  put 'else ';
17533  put 'if upcase(NAME) = "_NODE_" then do;';
17534  put 'ROLE = "SEGMENT";';
17535  put 'LEVEL = "NOMINAL";';
17536  put 'end;';
17537  run;
 
NOTE: The file X is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree4\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=09May2018:14:55:20,
      Create Time=09May2018:11:18:21
 
NOTE: 64 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17538  filename x;
NOTE: Fileref X has been deassigned.
 
17539  filename emflow "D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
17540  *------------------------------------------------------------*;
17541  * Tree4: Scoring DATA data;
17542  *------------------------------------------------------------*;
17543  data EMWS1.Tree4_TRAIN
17544  / view=EMWS1.Tree4_TRAIN
17545  ;
17546  set EMWS1.Impt2_TRAIN
17547  ;
17548  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas.
17549 +****************************************************************;
17550 +******             DECISION TREE SCORING CODE             ******;
17551 +****************************************************************;
17552 +
17553 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17554 +LENGTH F_TargetBuy  $   12;
17555 +LENGTH I_TargetBuy  $   12;
17556 +LENGTH _WARN_  $    4;
17557 +
17558 +******              LABELS FOR NEW VARIABLES              ******;
17559 +label _NODE_ = 'Node' ;
17560 +label _LEAF_ = 'Leaf' ;
17561 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17562 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17563 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17564 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17565 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17566 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17567 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17568 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17569 +label F_TargetBuy = 'From: TargetBuy' ;
17570 +label I_TargetBuy = 'Into: TargetBuy' ;
17571 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17572 +label _WARN_ = 'Warnings' ;
17573 +
17574 +
17575 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17576 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17577 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17578 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17579 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17580 +
17581 +
17582 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17583 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17584 +
17585 +******             ASSIGN OBSERVATION TO NODE             ******;
17586 +IF  NOT MISSING(REP_Age ) AND
17587 +  REP_Age  <                 39.5 THEN DO;
17588 +  _ARBFMT_1 = PUT( REP_Gender , $CHAR1.);
17589 +   %DMNORMIP( _ARBFMT_1);
17590 +  IF _ARBFMT_1 IN ('M' ) THEN DO;
17591 +    _NODE_  =                    4;
17592 +    _LEAF_  =                    1;
17593 +    P_TargetBuy1  =                  0.4;
17594 +    P_TargetBuy0  =                  0.6;
17595 +    Q_TargetBuy1  =                  0.4;
17596 +    Q_TargetBuy0  =                  0.6;
17597 +    V_TargetBuy1  =     0.42857142857142;
17598 +    V_TargetBuy0  =     0.57142857142857;
17599 +    I_TargetBuy  = '0' ;
17600 +    U_TargetBuy  =                    0;
17601 +    END;
17602 +  ELSE DO;
17603 +    _NODE_  =                    5;
17604 +    _LEAF_  =                    2;
17605 +    P_TargetBuy1  =                 0.72;
17606 +    P_TargetBuy0  =                 0.28;
17607 +    Q_TargetBuy1  =                 0.72;
17608 +    Q_TargetBuy0  =                 0.28;
17609 +    V_TargetBuy1  =     0.68421052631578;
17610 +    V_TargetBuy0  =     0.31578947368421;
17611 +    I_TargetBuy  = '1' ;
17612 +    U_TargetBuy  =                    1;
17613 +    END;
17614 +  END;
17615 +ELSE DO;
17616 +  _ARBFMT_1 = PUT( REP_Gender , $CHAR1.);
17617 +   %DMNORMIP( _ARBFMT_1);
17618 +  IF _ARBFMT_1 IN ('M' ) THEN DO;
17619 +    _NODE_  =                    6;
17620 +    _LEAF_  =                    3;
17621 +    P_TargetBuy1  =     0.08680555555555;
17622 +    P_TargetBuy0  =     0.91319444444444;
17623 +    Q_TargetBuy1  =     0.08680555555555;
17624 +    Q_TargetBuy0  =     0.91319444444444;
17625 +    V_TargetBuy1  =     0.08049535603715;
17626 +    V_TargetBuy0  =     0.91950464396284;
17627 +    I_TargetBuy  = '0' ;
17628 +    U_TargetBuy  =                    0;
17629 +    END;
17630 +  ELSE DO;
17631 +    IF  NOT MISSING(DayCareProducts ) AND
17632 +      DayCareProducts  <                  0.5 THEN DO;
17633 +      _NODE_  =                   14;
17634 +      _LEAF_  =                    4;
17635 +      P_TargetBuy1  =     0.10852713178294;
17636 +      P_TargetBuy0  =     0.89147286821705;
17637 +      Q_TargetBuy1  =     0.10852713178294;
17638 +      Q_TargetBuy0  =     0.89147286821705;
17639 +      V_TargetBuy1  =     0.18348623853211;
17640 +      V_TargetBuy0  =     0.81651376146789;
17641 +      I_TargetBuy  = '0' ;
17642 +      U_TargetBuy  =                    0;
17643 +      END;
17644 +    ELSE DO;
17645 +      IF  NOT MISSING(CleanserProducts ) AND
17646 +                         3.5 <= CleanserProducts  THEN DO;
17647 +        _ARBFMT_12 = PUT( MobileApplications , BEST12.);
17648 +         %DMNORMIP( _ARBFMT_12);
17649 +        IF _ARBFMT_12 IN ('0' ) THEN DO;
17650 +          _NODE_  =                   31;
17651 +          _LEAF_  =                    7;
17652 +          P_TargetBuy1  =      0.3076923076923;
17653 +          P_TargetBuy0  =     0.69230769230769;
17654 +          Q_TargetBuy1  =      0.3076923076923;
17655 +          Q_TargetBuy0  =     0.69230769230769;
17656 +          V_TargetBuy1  =                  0.2;
17657 +          V_TargetBuy0  =                  0.8;
17658 +          I_TargetBuy  = '0' ;
17659 +          U_TargetBuy  =                    0;
17660 +          END;
17661 +        ELSE DO;
17662 +          _NODE_  =                   30;
17663 +          _LEAF_  =                    6;
17664 +          P_TargetBuy1  =     0.64516129032258;
17665 +          P_TargetBuy0  =     0.35483870967741;
17666 +          Q_TargetBuy1  =     0.64516129032258;
17667 +          Q_TargetBuy0  =     0.35483870967741;
17668 +          V_TargetBuy1  =                 0.68;
17669 +          V_TargetBuy0  =                 0.32;
17670 +          I_TargetBuy  = '1' ;
17671 +          U_TargetBuy  =                    1;
17672 +          END;
17673 +        END;
17674 +      ELSE DO;
17675 +        _NODE_  =                   22;
17676 +        _LEAF_  =                    5;
17677 +        P_TargetBuy1  =     0.24342105263157;
17678 +        P_TargetBuy0  =     0.75657894736842;
17679 +        Q_TargetBuy1  =     0.24342105263157;
17680 +        Q_TargetBuy0  =     0.75657894736842;
17681 +        V_TargetBuy1  =     0.27364864864864;
17682 +        V_TargetBuy0  =     0.72635135135135;
17683 +        I_TargetBuy  = '0' ;
17684 +        U_TargetBuy  =                    0;
17685 +        END;
17686 +      END;
17687 +    END;
17688 +  END;
17689 +
17690 +*****  RESIDUALS R_ *************;
17691 +IF  F_TargetBuy  NE '1'
17692 +AND F_TargetBuy  NE '0'  THEN DO;
17693 +        R_TargetBuy1  = .;
17694 +        R_TargetBuy0  = .;
17695 + END;
17696 + ELSE DO;
17697 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17698 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17699 +       SELECT( F_TargetBuy  );
17700 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17701 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17702 +       END;
17703 + END;
17704 +
17705 +****************************************************************;
17706 +******          END OF DECISION TREE SCORING CODE         ******;
17707 +****************************************************************;
17708 +
17709 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17710  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE4_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT2_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
17711  quit;
17712  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17713  filename emflow "D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
17714  *------------------------------------------------------------*;
17715  * Tree4: Scoring VALIDATE data;
17716  *------------------------------------------------------------*;
17717  data EMWS1.Tree4_VALIDATE
17718  / view=EMWS1.Tree4_VALIDATE
17719  ;
17720  set EMWS1.Impt2_VALIDATE
17721  ;
17722  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas.
17723 +****************************************************************;
17724 +******             DECISION TREE SCORING CODE             ******;
17725 +****************************************************************;
17726 +
17727 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17728 +LENGTH F_TargetBuy  $   12;
17729 +LENGTH I_TargetBuy  $   12;
17730 +LENGTH _WARN_  $    4;
17731 +
17732 +******              LABELS FOR NEW VARIABLES              ******;
17733 +label _NODE_ = 'Node' ;
17734 +label _LEAF_ = 'Leaf' ;
17735 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17736 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17737 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17738 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17739 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17740 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17741 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17742 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17743 +label F_TargetBuy = 'From: TargetBuy' ;
17744 +label I_TargetBuy = 'Into: TargetBuy' ;
17745 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17746 +label _WARN_ = 'Warnings' ;
17747 +
17748 +
17749 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17750 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17751 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17752 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17753 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17754 +
17755 +
17756 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17757 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17758 +
17759 +******             ASSIGN OBSERVATION TO NODE             ******;
17760 +IF  NOT MISSING(REP_Age ) AND
17761 +  REP_Age  <                 39.5 THEN DO;
17762 +  _ARBFMT_1 = PUT( REP_Gender , $CHAR1.);
17763 +   %DMNORMIP( _ARBFMT_1);
17764 +  IF _ARBFMT_1 IN ('M' ) THEN DO;
17765 +    _NODE_  =                    4;
17766 +    _LEAF_  =                    1;
17767 +    P_TargetBuy1  =                  0.4;
17768 +    P_TargetBuy0  =                  0.6;
17769 +    Q_TargetBuy1  =                  0.4;
17770 +    Q_TargetBuy0  =                  0.6;
17771 +    V_TargetBuy1  =     0.42857142857142;
17772 +    V_TargetBuy0  =     0.57142857142857;
17773 +    I_TargetBuy  = '0' ;
17774 +    U_TargetBuy  =                    0;
17775 +    END;
17776 +  ELSE DO;
17777 +    _NODE_  =                    5;
17778 +    _LEAF_  =                    2;
17779 +    P_TargetBuy1  =                 0.72;
17780 +    P_TargetBuy0  =                 0.28;
17781 +    Q_TargetBuy1  =                 0.72;
17782 +    Q_TargetBuy0  =                 0.28;
17783 +    V_TargetBuy1  =     0.68421052631578;
17784 +    V_TargetBuy0  =     0.31578947368421;
17785 +    I_TargetBuy  = '1' ;
17786 +    U_TargetBuy  =                    1;
17787 +    END;
17788 +  END;
17789 +ELSE DO;
17790 +  _ARBFMT_1 = PUT( REP_Gender , $CHAR1.);
17791 +   %DMNORMIP( _ARBFMT_1);
17792 +  IF _ARBFMT_1 IN ('M' ) THEN DO;
17793 +    _NODE_  =                    6;
17794 +    _LEAF_  =                    3;
17795 +    P_TargetBuy1  =     0.08680555555555;
17796 +    P_TargetBuy0  =     0.91319444444444;
17797 +    Q_TargetBuy1  =     0.08680555555555;
17798 +    Q_TargetBuy0  =     0.91319444444444;
17799 +    V_TargetBuy1  =     0.08049535603715;
17800 +    V_TargetBuy0  =     0.91950464396284;
17801 +    I_TargetBuy  = '0' ;
17802 +    U_TargetBuy  =                    0;
17803 +    END;
17804 +  ELSE DO;
17805 +    IF  NOT MISSING(DayCareProducts ) AND
17806 +      DayCareProducts  <                  0.5 THEN DO;
17807 +      _NODE_  =                   14;
17808 +      _LEAF_  =                    4;
17809 +      P_TargetBuy1  =     0.10852713178294;
17810 +      P_TargetBuy0  =     0.89147286821705;
17811 +      Q_TargetBuy1  =     0.10852713178294;
17812 +      Q_TargetBuy0  =     0.89147286821705;
17813 +      V_TargetBuy1  =     0.18348623853211;
17814 +      V_TargetBuy0  =     0.81651376146789;
17815 +      I_TargetBuy  = '0' ;
17816 +      U_TargetBuy  =                    0;
17817 +      END;
17818 +    ELSE DO;
17819 +      IF  NOT MISSING(CleanserProducts ) AND
17820 +                         3.5 <= CleanserProducts  THEN DO;
17821 +        _ARBFMT_12 = PUT( MobileApplications , BEST12.);
17822 +         %DMNORMIP( _ARBFMT_12);
17823 +        IF _ARBFMT_12 IN ('0' ) THEN DO;
17824 +          _NODE_  =                   31;
17825 +          _LEAF_  =                    7;
17826 +          P_TargetBuy1  =      0.3076923076923;
17827 +          P_TargetBuy0  =     0.69230769230769;
17828 +          Q_TargetBuy1  =      0.3076923076923;
17829 +          Q_TargetBuy0  =     0.69230769230769;
17830 +          V_TargetBuy1  =                  0.2;
17831 +          V_TargetBuy0  =                  0.8;
17832 +          I_TargetBuy  = '0' ;
17833 +          U_TargetBuy  =                    0;
17834 +          END;
17835 +        ELSE DO;
17836 +          _NODE_  =                   30;
17837 +          _LEAF_  =                    6;
17838 +          P_TargetBuy1  =     0.64516129032258;
17839 +          P_TargetBuy0  =     0.35483870967741;
17840 +          Q_TargetBuy1  =     0.64516129032258;
17841 +          Q_TargetBuy0  =     0.35483870967741;
17842 +          V_TargetBuy1  =                 0.68;
17843 +          V_TargetBuy0  =                 0.32;
17844 +          I_TargetBuy  = '1' ;
17845 +          U_TargetBuy  =                    1;
17846 +          END;
17847 +        END;
17848 +      ELSE DO;
17849 +        _NODE_  =                   22;
17850 +        _LEAF_  =                    5;
17851 +        P_TargetBuy1  =     0.24342105263157;
17852 +        P_TargetBuy0  =     0.75657894736842;
17853 +        Q_TargetBuy1  =     0.24342105263157;
17854 +        Q_TargetBuy0  =     0.75657894736842;
17855 +        V_TargetBuy1  =     0.27364864864864;
17856 +        V_TargetBuy0  =     0.72635135135135;
17857 +        I_TargetBuy  = '0' ;
17858 +        U_TargetBuy  =                    0;
17859 +        END;
17860 +      END;
17861 +    END;
17862 +  END;
17863 +
17864 +*****  RESIDUALS R_ *************;
17865 +IF  F_TargetBuy  NE '1'
17866 +AND F_TargetBuy  NE '0'  THEN DO;
17867 +        R_TargetBuy1  = .;
17868 +        R_TargetBuy0  = .;
17869 + END;
17870 + ELSE DO;
17871 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17872 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17873 +       SELECT( F_TargetBuy  );
17874 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17875 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17876 +       END;
17877 + END;
17878 +
17879 +****************************************************************;
17880 +******          END OF DECISION TREE SCORING CODE         ******;
17881 +****************************************************************;
17882 +
17883 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17884  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE4_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT2_VALIDATE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.11 seconds
 
 
17885  quit;
17886  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
17888  proc sort data=WORK.EM_USER_REPORT;
17889  by ID VIEW;
17890  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17891  *------------------------------------------------------------*;
17892  * Tree4: Computing metadata for TRAIN data;
17893  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
18305  data WORK.MODELTEMP_INFO;
18306  set EMWS1.Tree4_EMINFO;
18307  where DATA='Tree4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18308  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE4_EMINFO.
      WHERE (DATA='Tree4') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18309  data EMWS1.Tree4_EMINFO;
18310  length TARGET KEY $32 DATA $43;
18311  input TARGET KEY DATA $;
18312  cards;
 
NOTE: The data set EMWS1.TREE4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18316  run;
18317  data EMWS1.Tree4_EMINFO;
18318  set EMWS1.Tree4_EMINFO WORK.MODELTEMP_INFO;
18319  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE4_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18320  proc sort data = EMWS1.Tree4_EMINFO NOTHREADS;
18321  by TARGET KEY;
18322  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE4_EMINFO.
NOTE: The data set EMWS1.TREE4_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18323  proc sort data = EMWS1.Ids2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18324  by TARGET KEY;
18325  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS2_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
18326  proc sort data = EMWS1.Tree4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18327  by TARGET KEY;
18328  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE4_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18329  data EMWS1.Tree4_EMINFO;
18330  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18331  by TARGET KEY;
18332  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE4_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18333  proc datasets lib=work nolist;
18334  delete TEMP_INFO SORTEDEMINFO;
18335  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18336  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: View EMWS1.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
NOTE: View EMWS1.TREE4_VALIDATE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                May 09, 2018
Time:                14:55:22
*------------------------------------------------------------*
18360  data EMWS1.Tree4_EMOUTFIT;
18361  set EMWS1.Tree4_EMOUTFIT;
18362  length TargetLabel $200;
18363  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18364  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE4_EMOUTFIT.
NOTE: The data set EMWS1.TREE4_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18365  proc sort data=EMWS1.Tree4_EMREPORTFIT nothreads;
18366  by TARGET;
18367  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE4_EMREPORTFIT.
NOTE: The data set EMWS1.TREE4_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18368  %let _EMwarndup = 0;
18369  %let _EMtargetdup =;
18370  %let _EMASEtargetdup =;
18371  data _null_;
18372  set EMWS1.Tree4_EMOUTFIT;
18373  if .<_ASE_<0.000001 then do;
18374  call symput('_EMwarndup', '1');
18375  call symput('_EMtargetdup', target);
18376  call symput('_EMASEtargetdup', put(_ASE_, best.));
18377  end;
18378  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18379  %let EMEXCEPTIONSTRING=;
18380  *------------------------------------------------------------*;
18381  * REPORT: Tree4;
18382  *------------------------------------------------------------*;
18383  %let EM_ACTION = REPORT;
18384  %let syscc = 0;
18385  %macro main;
18386
18387    %if %upcase(&EM_ACTION) = CREATE %then %do;
18388      filename temp catalog 'sashelp.emmodl.tree_create.source';
18389      %include temp;
18390      filename temp;
18391
18392      %em_tree_create;
18393    %end;
18394
18395     %else
18396     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18397
18398         filename temp catalog 'sashelp.emmodl.tree_train.source';
18399         %include temp;
18400         filename temp;
18401         %em_tree_train;
18402     %end;
18403
18404    %else
18405    %if %upcase(&EM_ACTION) = SCORE %then %do;
18406      filename temp catalog 'sashelp.emmodl.tree_score.source';
18407      %include temp;
18408      filename temp;
18409
18410      %em_tree_score;
18411
18412    %end;
18413
18414    %else
18415    %if %upcase(&EM_ACTION) = REPORT %then %do;
18416
18417         filename temp catalog 'sashelp.emmodl.tree_report.source';
18418         %include temp;
18419         filename temp;
18420
18421         %em_tree_report;
18422     %end;
18423
18424    %else
18425    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18426
18427         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18428         %include temp;
18429         filename temp;
18430         %EM_TREE_OPENTREEVIEWER;
18431
18432     %end;
18433
18434    %else
18435    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18436
18437         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18438         %include temp;
18439         filename temp;
18440         %EM_TREE_CLOSETREEVIEWER;
18441
18442     %end;
18443
18444
18445     %doendm:
18446  %mend main;
18447
18448  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18450 +%macro em_tree_makePlotDs( multipleTar= );
18452 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18453 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18454 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18455 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18457 +  /* determine if validation statistics will be displayed */
18458 +  %let validflag=N;
18459 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18460 +    /* determine if validation data exists */
18461 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18462 +      %let validflag=Y;
18463 +    %end;
18464 +  %end;
18466 +   /* retrieve name of decmeta even in presence of multiple targets */
18467 +   %let decmeta = ;
18468 +   %if &EM_DEC_DECMETA eq %then %do;
18469 +     data _Target;
18470 +       set &em_data_variableset;
18471 +       where ROLE='TARGET' and USE in('D', 'Y');
18472 +       keep NAME;
18473 +     run;
18474 +     proc sort data=_Target;
18475 +       by NAME;
18476 +     run;
18477 +     proc sort data=EM_TARGETDECINFO;
18478 +       by TARGET;
18479 +     run;
18480 +     data _Target;
18481 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18482 +       by NAME;
18483 +       if _a then do;
18484 +         call symput('decmeta', trim(DECMETA));
18485 +       end;
18486 +     run;
18487 +     proc delete data=_Target;run;
18488 +   %end;
18489 +   %else %let decmeta = &EM_DEC_DECMETA;
18492 +  /* retrieve targetEvent from decmeta */
18493 +  %let targetEvent=;
18494 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18495 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18496 +      data _null_;
18497 +       set &DECMETA(where=(_TYPE_="TARGET"));
18498 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18499 +      run;
18500 +    %end;
18501 +  %end;
18503 +  /* retrieve predicted var for targetEvent from decmeta */
18504 +  %let predTarget=;
18505 +  %let predLvl=;
18506 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18507 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18508 +      data _null_;
18509 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18510 +       call symput('predTarget', strip(VARIABLE));
18511 +       call symput('predLvl', strip(LEVEL));
18512 +      run;
18513 +    %end;
18514 +  %end;
18515 +  %else %do;
18516 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18517 +      data _null_;
18518 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18519 +       call symput('predTarget', strip(VARIABLE));
18520 +      run;
18521 +    %end;
18522 +  %end;
18524 +  /* create BelowText value */
18525 +  data belowtext;
18526 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18527 +    keep node belowtext;
18528 +  run;
18530 +  /* replace belowtext with variable label if it exists */
18531 +  data belowtext2;
18532 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18533 +    keep node belowtextlbl;
18534 +  run;
18536 +  proc sort data=belowtext; by node; run;
18537 +  proc sort data=belowtext2; by node; run;
18539 +  data belowtext;
18540 +    merge belowtext belowtext2(in=_a);
18541 +    by node;
18542 +    if _a then belowtext=belowtextlbl;
18543 +    keep node belowtext;
18544 +  run;
18546 +  /* create AboveText value */
18547 +  data abovetext;
18548 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18549 +  run;
18550 +  proc sort data=abovetext; by node numeric_value; run;
18552 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18553 +  data abovetext;
18554 +    set abovetext(rename=(node=parent));
18555 +    by parent numeric_value;
18556 +    retain abovetext tempstring flag branch origval origchar ;
18557 +    length abovetext $256;
18558 +    length tempstring origchar $64;
18560 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18561 +      if first.parent then do;
18562 +        if missing(character_value) then do;
18563 +          numeric_value = round(numeric_value, &sp_precision);
18564 +          abovetext = "< "||strip(NUMERIC_VALUE);
18565 +          branch = 1;
18566 +          origval = numeric_value;
18567 +          output;
18568 +        end;
18569 +        else do;
18570 +          abovetext = "< "||strip(CHARACTER_VALUE);
18571 +          branch = 1;
18572 +          origchar = character_value;
18573 +          output;
18574 +        end;
18576 +        if first.parent AND last.parent then do;
18577 +          if missing(character_value) then do;
18578 +            numeric_value = round(numeric_value, &sp_precision);
18579 +            branch = branch + 1;
18580 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18581 +            output;
18582 +          end;
18583 +          else do;
18584 +            branch = branch + 1;
18585 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18586 +            output;
18587 +          end;
18588 +        end;
18589 +      end;
18590 +      else if last.parent then do;
18591 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18592 +          if missing(character_value) then do;
18593 +            numeric_value = round(numeric_value, &sp_precision);
18594 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18595 +          end;
18596 +          else do;
18597 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18598 +          end;
18599 +          branch = branch + 1;
18600 +          output;
18602 +          if missing(character_value) then do;
18603 +            numeric_value = round(numeric_value, &sp_precision);
18604 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18605 +          end;
18606 +          else do;
18607 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18608 +          end;
18609 +          branch = branch + 1;
18610 +          output;
18611 +        end;
18612 +        else do;
18613 +          if missing(character_value) then do;
18614 +            numeric_value = round(numeric_value, &sp_precision);
18615 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18616 +          end;
18617 +          else do;
18618 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18619 +          end;
18620 +          branch = branch + 1;
18621 +          output;
18622 +        end;
18623 +      end;
18624 +      else do;
18625 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18626 +          if missing(character_value) then do;
18627 +            numeric_value = round(numeric_value,&sp_precision);
18628 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18629 +            origval = numeric_value;
18630 +          end;
18631 +          else do;
18632 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18633 +            origchar = character_value;
18634 +          end;
18635 +          branch = branch + 1;
18636 +          output;
18638 +        end;
18639 +        else do;
18640 +          if missing(character_value) then do;
18641 +            numeric_value = round(numeric_value, &sp_precision);
18642 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18643 +            origval = numeric_value;
18644 +          end;
18645 +          else do;
18646 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18647 +            origval = character_value;
18648 +          end;
18649 +          branch = branch + 1;
18650 +          output;
18651 +        end;
18652 +      end;
18653 +    end;
18654 +    else do;
18655 +       if first.numeric_value then do;
18656 +         flag = 0;
18657 +         abovetext = strip(CHARACTER_VALUE);
18658 +         branch = numeric_value;
18659 +         if first.numeric_value AND last.numeric_value then do;
18660 +           output;
18661 +         end;
18662 +       end;
18663 +       else if last.numeric_value then do;
18664 +         if flag=0 then do;
18665 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18666 +           length = length(strip(tempstring));
18667 +           if length < 32 then do;
18668 +             abovetext = strip(tempstring);
18669 +           end;
18670 +           else do;
18671 +             abovetext = strip(abovetext)||", ...";
18672 +             flag = 1;
18673 +           end;
18674 +         end;
18675 +         branch = numeric_value;
18676 +         output;
18677 +       end;
18678 +       else do;
18679 +         if flag=0 then do;
18680 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18681 +           length = length(strip(tempstring));
18682 +           if length < 32 then do;
18683 +             abovetext = strip(tempstring);
18684 +           end;
18685 +           else do;
18686 +             abovetext = strip(abovetext)||", ...";
18687 +             flag=1;
18688 +           end;
18689 +         end;
18690 +         branch = numeric_value;
18691 +       end;
18692 +    end;
18693 +    keep parent branch abovetext;
18694 +  run;
18696 +  /* Missing value to abovetext */
18697 +  data tempmissing;
18698 +    set &EM_USER_OUTRULES;
18699 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18700 +    rename node=parent numeric_value=branch character_value=misschar;
18701 +  run;
18704 +  proc sort data=abovetext; by parent branch; run;
18705 +  proc sort data=tempmissing; by parent branch; run;
18706 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18708 +  data tempoutnodes;
18709 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18710 +    by parent branch;
18711 +    length traintotal validtotal 8;
18712 +    retain traintotal validtotal;
18714 +    if _a then do;
18715 +      if ^MISSING(abovetext) then do;
18716 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18717 +      end;
18718 +      else do;
18719 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18720 +      end;
18721 +    end;
18722 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18724 +    if node=1 then do;
18725 +      traintotal = N;
18726 +      validtotal=VN;
18727 +    end;
18729 +    drop role rank stat misschar belowtext;
18730 +  run;
18731 +  proc sort data=tempoutnodes; by node; run;
18732 +  proc sort data=belowtext; by node; run;
18734 +  data tempoutnodes;
18735 +    merge tempoutnodes belowtext;
18736 +    by node;
18738 +  run;
18740 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18741 +  %let adjusted = N;
18742 +  %let npriors = 0;
18743 +  data _null_ ;
18744 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18745 +    if eof then do ;
18746 +      call symput("npriors" , strip(put(_N_,best.))) ;
18747 +    end;
18748 +  run;
18749 +  %if &npriors gt 0 %then %let adjusted=Y;
18752 +  /* create a table with targetUsed and targetLevel columns for each node */
18753 +  data temptarmeta;
18754 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18755 +    %if &multipleTar eq N %then %do;
18756 +      AND USE in ('D', 'Y')
18757 +    %end;
18758 +    ));
18759 +    length TARGET $32;
18760 +    Target=name;
18761 +    keep target level;
18762 +  run;
18764 +  %if &multipleTar eq Y %then %do;
18765 +    data temptargetused;
18766 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18767 +      keep node target;
18768 +    run;
18769 +    proc sort data=temptargetused; by target; run;
18770 +    proc sort data=temptarmeta; by target; run;
18771 +    data temptargetused;
18772 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18773 +      by target;
18774 +      if _a and _b;
18775 +    run;
18776 +  %end;
18777 +  %else %do;
18778 +    data temptargetused;
18779 +      set &EM_USER_OUTSTATS;
18780 +      length target $32 tarlevel $10;
18781 +      target="%EM_TARGET";
18782 +      tarlevel="%EM_TARGET_LEVEL";
18783 +      keep node target tarlevel;
18784 +    run;
18785 +    proc sort data=temptargetused nodupkey; by node; run;
18786 +  %end;
18788 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
18789 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18790 +  proc sort data=temptargetused; by node; run;
18793 +  /* create tables for all interval targets as well as all class targets */
18794 +  data tempinterval tempclass;
18795 +    merge tempoutstats temptargetused( rename=(target=targetused));
18796 +    by node;
18797 +    %if "&multipleTar" eq "Y" %then %do;
18798 +      if ((missing(Target)) OR (target=targetused ));
18799 +    %end;
18801 +    if tarlevel="INTERVAL" then output tempinterval;
18802 +    else output tempclass;
18803 +  run;
18805 +  /* initialize intTarget and classTarget flags */
18806 +  %let em_intNobs =0;
18807 +  %let em_classNobs = 0;
18808 +  %let em_intTarget= N;
18809 +  %let em_classTarget= N;
18811 +  proc sql;
18812 +    reset noprint;
18813 +    select count(*) into :em_intNobs from tempinterval;
18814 +  quit;
18815 +  proc sql;
18816 +    reset noprint;
18817 +    select count(*) into :em_classNobs from tempclass;
18818 +  quit;
18820 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18821 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18823 +  /* retrieve all information for interval targets */
18824 +  %if &em_intTarget eq Y %then %do;
18826 +    /* determine if leaf variable exists */
18827 +    %let dsid=%sysfunc(open(tempinterval,i));
18828 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18829 +    %let rc=%sysfunc(close(&dsid));
18831 +    proc transpose data=tempinterval
18832 +      %if &leafexists %then %do;
18833 +        (drop=leaf)
18834 +      %end;
18835 +      %if &validexist %then %do;
18836 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18837 +      %end;
18838 +      %else %do;
18839 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18840 +      %end;
18841 +      by node;
18842 +      id statname;
18843 +    run;
18844 +    data tempinterval;
18845 +      set tempinterval;
18846 +      if missing(N) then delete;
18847 +    run;
18848 +  %end;
18850 +  /* retrieve all information for class targets */
18851 +  %if &em_classTarget eq Y %then %do;
18852 +    proc sort data=tempclass; by node category; run;
18853 +    %if &validflag eq N %then %do;
18854 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18855 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18856 +    %end;
18857 +    %else %do;
18858 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18859 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18860 +    %end;
18861 +      set tempclass;
18863 +      %if &validflag eq N %then %do;
18864 +        %if "&adjusted" eq "N" %then %do;
18865 +          if statname="N" then output tempn;
18866 +        %end;
18867 +        %else %do;
18868 +          if statname="NPRIORS" then output tempn;
18869 +        %end;
18870 +        else if statname="PREDICTION" then output temppredict;
18871 +        else if statname="PROBABILITY" then output tempprob;
18872 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18873 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18874 +      %end;
18875 +      %else %do;
18876 +        %if "&adjusted" eq "N" %then %do;
18877 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18878 +        %end;
18879 +        %else %do;
18880 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18881 +        %end;
18882 +        else if statname="PREDICTION" then output temppredict;
18883 +        else if statname="PROBABILITY" then output tempprob;
18884 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18885 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18886 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18887 +      %end;
18888 +    run;
18891 +    /* determine if profit/loss exists in tempprofit */
18892 +    %let em_profitflag=0;
18893 +    %let em_lossflag=0;
18894 +    proc sql;
18895 +      reset noprint;
18896 +      select count(*) into :em_profitflag from tempprofit;
18897 +    quit;
18898 +    proc sql;
18899 +      reset noprint;
18900 +      select count(*) into :em_lossflag from temploss;
18901 +    quit;
18903 +    %if &validFlag eq Y %then %do;
18904 +      proc transpose data=tempn
18905 +        %if "&adjusted" eq "N" %then %do;
18906 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18907 +        %end;
18908 +        %else %do;
18909 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18910 +        %end;
18911 +        by node;
18912 +        id statname;
18913 +      run;
18914 +      %if &em_profitflag ne 0 %then %do;
18915 +        proc transpose data=tempprofit out=tempprofit;
18916 +          by node category;
18917 +          id statname ;
18918 +        run;
18919 +      %end;
18920 +      %if &em_lossflag ne 0 %then %do;
18921 +        proc transpose data=temploss out=temploss;
18922 +          by node category;
18923 +          id statname ;
18924 +        run;
18925 +      %end;
18926 +      data tempprob;
18927 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18928 +        by node
18929 +        %if &multipleTar eq Y %then %do;
18930 +          target
18931 +        %end;
18932 +        category;
18933 +      run;
18934 +    %end;
18936 +    /* store percentcorrect value */
18937 +    data temppredict;
18938 +      merge tempprob temppredict(in=_a);
18939 +      by node category;
18940 +      if _a then do;
18941 +        percentCorrect = statvalue;
18942 +        %if &validFlag eq Y %then %do;
18943 +          vpercentCorrect= vstatvalue;
18944 +        %end;
18945 +      end;
18946 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18947 +      %if &validFlag eq Y %then %do;
18948 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18949 +      %end;
18950 +      ;
18951 +      if missing(percentCorrect) then delete;
18952 +      drop target;
18953 +    run;
18955 +    /* build profittext */
18956 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18957 +      data tempprofittext(keep= node profittext profitloss);
18958 +        length profittext $800 profitloss 8.;
18959 +        retain profittext profitloss;
18961 +        merge tempprob
18962 +        %if &em_profitflag ne 0 %then %do;
18963 +          tempprofit
18964 +        %end;
18965 +        %else %if &em_lossflag ne 0 %then %do;
18966 +          temploss
18967 +        %end;
18968 +        ;
18969 +        by node category;
18971 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18972 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18973 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18974 +          %let profittype = ALL;
18975 +        %end;
18977 +        /* create the profitloss variable for nodecolor if selected */
18978 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18980 +        %if "&profittype" eq "ALL" %then %do;
18981 +          if strip(CATEGORY)="&targetEvent" then do;
18982 +            profitloss=statvalue;
18983 +          end;
18984 +          if first.node then do;
18985 +            %if &validFlag eq N %then %do;
18986 +             %if &em_profitflag ne 0 %then %do;
18987 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18988 +             %end;
18989 +             %if &em_lossflag ne 0 %then %do;
18990 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18991 +             %end;
18992 +            %end;
18993 +            %else %do;
18994 +             %if &em_profitflag ne 0 %then %do;
18995 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18995!+;
18996 +             %end;
18997 +             %if &em_lossflag ne 0 %then %do;
18998 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18999 +             %end;
19000 +            %end;
19001 +          end;
19002 +          else if last.node then do;
19003 +            %if &validFlag eq N %then %do;
19004 +             %if &em_profitflag ne 0 %then %do;
19005 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19006 +             %end;
19007 +             %if &em_lossflag ne 0 %then %do;
19008 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19009 +             %end;
19010 +             /*if CATEGORY="&targetEvent" then do;
19011 +               profitloss=statvalue;
19012 +             end;*/
19013 +            %end;
19014 +            %else %do;
19015 +             %if &em_profitflag ne 0 %then %do;
19016 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19016!+14.&EM_PROPERTY_SPLITPRECISION);
19017 +                if CATEGORY="&targetEvent" then do;
19018 +                 profitloss=ALTERNATIVE_PROFIT;
19019 +                end;
19020 +             %end;
19021 +             %if &em_lossflag ne 0 %then %do;
19022 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19022!+14.&EM_PROPERTY_SPLITPRECISION);
19023 +                if CATEGORY="&targetEvent" then do;
19024 +                  profitloss=ALTERNATIVE_LOSS;
19025 +                end;
19026 +             %end;
19027 +            %end;
19028 +            output;
19029 +          end;
19030 +          else do;
19031 +            %if &validFlag eq N %then %do;
19032 +             %if &em_profitflag ne 0 %then %do;
19033 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19034 +             %end;
19035 +             %if &em_lossflag ne 0 %then %do;
19036 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19037 +             %end;
19038 +            %end;
19039 +            %else %do;
19040 +             %if &em_profitflag ne 0 %then %do;
19041 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19041!+14.&EM_PROPERTY_SPLITPRECISION);
19042 +             %end;
19043 +             %if &em_lossflag ne 0 %then %do;
19044 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19044!+14.&EM_PROPERTY_SPLITPRECISION);
19045 +             %end;
19046 +            %end;
19047 +          end;
19048 +        %end;
19049 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19050 +          if strip(CATEGORY) = "&targetevent" then do;
19051 +            %if &validFlag eq N %then %do;
19052 +             %if &em_profitflag ne 0 %then %do;
19053 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19054 +             %end;
19055 +             %if &em_lossflag ne 0 %then %do;
19056 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19057 +             %end;
19058 +             profitloss=statvalue;
19059 +            %end;
19060 +            %else %do;
19061 +             %if &em_profitflag ne 0 %then %do;
19062 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19062!+;
19063 +                profitloss=ALTERNATIVE_PROFIT;
19064 +             %end;
19065 +             %if &em_lossflag ne 0 %then %do;
19066 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19067 +                profitloss=ALTERNATIVE_LOSS;
19068 +             %end;
19069 +            %end;
19070 +            output;
19071 +          end;
19072 +        %end;
19073 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19074 +          if strip(CATEGORY) = "&targetevent" then do;
19075 +            %if &validFlag eq N %then %do;
19076 +             profitloss=statvalue;
19077 +            %end;
19078 +            %else %do;
19079 +             %if &em_profitflag ne 0 %then %do;
19080 +                profitloss=ALTERNATIVE_PROFIT;
19081 +             %end;
19082 +             %if &em_lossflag ne 0 %then %do;
19083 +                profitloss=ALTERNATIVE_LOSS;
19084 +             %end;
19085 +            %end;
19086 +            output;
19087 +          end;
19088 +        %end;
19089 +      run;
19090 +    %end;
19092 +    data tempprob(keep= node probtext);
19093 +      length probtext $800;
19094 +      retain probtext;
19095 +      set tempprob ;
19096 +      by node;
19098 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19099 +      %let probtype = &EM_PROPERTY_TARGET;
19100 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19101 +        %let probtype = ALL;
19102 +      %end;
19104 +      %if "&probtype" eq "ALL" %then %do;
19105 +        if first.node then do;
19106 +          %if &validFlag eq N %then %do;
19107 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19108 +          %end;
19109 +          %else %do;
19110 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19111 +          %end;
19112 +        end;
19113 +        else if last.node then do;
19114 +          %if &validFlag eq N %then %do;
19115 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19116 +          %end;
19117 +          %else %do;
19118 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19119 +          %end;
19120 +          output;
19121 +        end;
19122 +        else do;
19123 +          %if &validFlag eq N %then %do;
19124 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19125 +          %end;
19126 +          %else %do;
19127 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19128 +          %end;
19129 +        end;
19130 +      %end;
19131 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19132 +        if strip(CATEGORY) = "&targetevent" then do;
19133 +          %if &validFlag eq N %then %do;
19134 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19135 +          %end;
19136 +          %else %do;
19137 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19138 +          %end;
19139 +          output;
19140 +        end;
19141 +      %end;
19142 +      %else %if "&probtype" eq "NONE" %then %do;
19143 +        if last.node then do;
19144 +          output;
19145 +        end;
19146 +      %end;
19147 +    run;
19148 +  %end;
19150 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19152 +  %let oldexists=0;
19153 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19154 +     data old_tree_plot;
19155 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19156 +        rename nodecolor=oldnodecolor;
19157 +     run;
19159 +     proc sort data=old_tree_plot;
19160 +        by node;
19161 +     run;
19163 +     %let oldexists=1;
19164 +  %end;
19166 +  data &EM_USER_TREE_PLOT;
19167 +    length textall $800;
19168 +    merge tempoutnodes temptargetused
19170 +    %if &em_intTarget eq Y %then %do;
19171 +      tempinterval
19172 +    %end;
19174 +    %if &em_classTarget eq Y %then %do;
19176 +      %if &validFlag eq N %then %do;
19177 +        tempn(rename=(statvalue=N))
19178 +      %end;
19179 +      %else %do;
19180 +        tempn
19181 +      %end;
19183 +      temppredict tempprob
19185 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19186 +        tempprofittext
19187 +      %end;
19188 +    %end;
19189 +    ;
19190 +    by node;
19192 +    /* build nodetext based on user selection */
19193 +    textall="";
19195 +    %if &em_intTarget eq Y %then %do;
19196 +    if tarlevel="INTERVAL" then do;
19197 +      /* Nodeid */
19198 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19199 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19200 +      %end;
19202 +      /* Target identifier if multiple targets are used */
19203 +      %if "&multipleTar" eq "Y" %then %do;
19204 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19205 +      %end;
19207 +      %if &validFlag eq Y %then %do;
19208 +         /* Column labels displayed in validflag eq Y only */
19209 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19210 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19210!+noquote ))";
19211 +         %end;
19213 +         /* Average values */
19214 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19215 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19216 +         %end;
19218 +         /* RASE */
19219 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19220 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19221 +         %end;
19223 +         /* Count */
19224 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19225 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19226 +         %end;
19227 +      %end;
19228 +      %else %do;
19229 +         /* Average values */
19230 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19231 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19232 +         %end;
19234 +         /* RASE */
19235 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19236 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19237 +         %end;
19239 +         /* Count */
19240 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19241 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19242 +         %end;
19243 +      %end;
19245 +      /* nodecolor */
19246 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19247 +        nodecolor=PREDICTION;
19248 +      %end;
19249 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19250 +        nodecolor=RASE;
19251 +      %end;
19252 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19253 +        nodecolor=1;
19254 +      %end;
19256 +    end;
19257 +    %end;
19258 +    %if &em_classTarget eq Y %then %do;
19259 +    if tarlevel^="INTERVAL" then  do;
19261 +      /* Nodeid */
19262 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19263 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19264 +      %end;
19265 +      /* Target identifier if multiple targets are used */
19266 +      %if "&multipleTar" eq "Y" %then %do;
19267 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19268 +      %end;
19270 +      /* Predicted values */
19271 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19272 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19273 +      %end;
19275 +      /* Column labels displayed in validflag eq Y only */
19276 +      %if "&ValidFlag" eq "Y" %then %do;
19277 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19278 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19278!+noquote ))";
19279 +        %end;
19280 +      %end;
19282 +      /* Target Values */
19283 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19284 +        textall=strip(textall)||"0A"x||strip(probtext);
19285 +      %end;
19287 +      /* include profit or loss for all target levels */
19288 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19289 +        textall=strip(textall)||"0A"x||strip(profittext);
19290 +      %end;
19292 +      %if &validFlag eq N %then %do;
19293 +        /* Percent Correct */
19294 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19295 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19296 +        %end;
19298 +         /* Count */
19299 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19300 +          %if "&adjusted" eq "N" %then %do;
19301 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19302 +          %end;
19303 +          %else %do;
19304 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19305 +          %end;
19306 +         %end;
19307 +      %end;
19308 +      %else %do;
19309 +        /* Percent Correct */
19310 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19311 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19312 +        %end;
19314 +         /* Count */
19315 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19316 +          %if "&adjusted" eq "N" %then %do;
19317 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19318 +          %end;
19319 +          %else %do;
19320 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19321 +          %end;
19322 +         %end;
19323 +      %end;
19325 +      /* nodecolor */
19326 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19327 +       %if &multipleTar ne Y %then %do;
19328 +        nodecolor=&predTarget;
19329 +       %end;
19330 +       %else %do;
19331 +         nodecolor=percentcorrect;
19332 +       %end;
19333 +      %end;
19334 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19335 +        nodecolor=percentcorrect;
19336 +      %end;
19337 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19338 +        nodecolor=1;
19339 +      %end;
19340 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19341 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19342 +          nodecolor=percentcorrect;
19343 +        %end;
19344 +        %else %do;
19345 +          nodecolor=profitloss;
19346 +        %end;
19347 +      %end;
19349 +    end;
19350 +    %end;
19351 +    %if &em_intTarget eq Y %then %do;
19352 +     drop  PREDICTION  TARGET TARLEVEL
19353 +     %if &ValidFlag eq Y %then %do;
19354 +         VPREDICTION
19355 +     %end;
19356 +     ;
19357 +    %end;
19358 +    %if &em_classTarget eq Y %then %do;
19359 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19360 +     %if &ValidFlag eq Y %then %do;
19361 +         VSTATVALUE
19362 +     %end;
19363 +     ;
19364 +    %end;
19366 +  run;
19368 +  /* add leaf index information to plotds - based on primary target only*/
19369 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19370 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19371 +      set &EM_USER_OUTSTATS;
19372 +      if ((statname="PROBABILITY"
19373 +      %if &validexist %then %do;
19374 +       or statname="VALID: PROBABILITY"
19375 +      %end;
19376 +      ) AND (CATEGORY="&TARGETEVENT")
19377 +      %if "&multipleTar" eq "Y" %then %do;
19378 +        AND (Target="%EM_TARGET")
19379 +      %end;
19380 +      );
19381 +    run;
19383 +    %if &validexist %then %do;
19384 +      proc sort data=tempprob; by node; run;
19385 +      %let vpredTarget = V%substr(&predTarget, 2);
19386 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19387 +         by node;
19388 +         id statname;
19389 +      run;
19390 +    %end;
19391 +  %end;
19392 +  %else %do;
19393 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19394 +      set &EM_USER_OUTSTATS;
19395 +      if ((statname="PREDICTION"
19396 +      %if &validexist %then %do;
19397 +       or statname="VALID: PREDICTION"
19398 +      %end;
19399 +      )
19400 +      %if "&multipleTar" eq "Y" %then %do;
19401 +        AND (Target="%EM_TARGET")
19402 +      %end;
19403 +      );
19404 +    run;
19405 +    %if &validexist %then %do;
19406 +      proc sort data=tempprob; by node; run;
19407 +      %let vpredTarget = V%substr(&predTarget, 2);
19408 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19409 +         by node;
19410 +         id statname;
19411 +      run;
19412 +    %end;
19413 +  %end;
19415 +  proc sort data=tempprob; by node; run;
19416 +  data tempoutnodes;
19417 +    merge tempoutnodes tempprob;
19418 +    by node;
19419 +  run;
19421 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19422 +  data tempnodes;
19423 +    retain traintotal validtotal;
19424 +    set tempnodes(where=(leaf ne . ));
19425 +    tprob=round(&predTarget, .01);
19426 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19427 +      percevent_train=round(tprob*100, .01);
19428 +    %end;
19429 +    %else %do;
19430 +      percevent_train=tprob;
19431 +    %end;
19433 +    perc_train=round((n/traintotal)*100, 0.01);
19434 +    /* leafwidth already has a *10 multiplier */
19435 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19437 +    %if &validexist %then %do;
19438 +      %let vpredTarget = V%substr(&predTarget,2);
19439 +      vprob=round(&vpredTarget, .01);
19440 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19441 +        percevent_valid=round(vprob*100, .01);
19442 +      %end;
19443 +      %else %do;
19444 +        percevent_valid=vprob;
19445 +      %end;
19446 +      perc_valid=round((vn/validtotal)*100, .01);
19447 +    %end;
19449 +    index=_N_;
19450 +    keep node index tprob perc_train percevent_train
19451 +    %if &validexist %then %do;
19452 +        vprob percevent_valid perc_valid
19453 +    %end;
19454 +    ;
19455 +  run;
19456 +  proc sort data=tempnodes; by node; run;
19457 +  data &EM_USER_TREE_PLOT;
19458 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19459 +    by node;
19460 +    if missing(node) then delete;
19461 +    %if &oldexists %then %do;
19462 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19463 +      drop oldnodecolor;
19464 +    %end;
19465 +    abovetext = compbl(abovetext);
19467 +    /* add variable labels */
19468 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19469 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19470 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19471 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19472 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19473 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19475 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19476 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19477 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19478 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19479 +          %end;
19480 +          %else %do;
19481 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19482 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19483 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19484 +          %end;
19485 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19487 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19488 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19489 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19490 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19491 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19492 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19493 +          %end;
19494 +          %else %do;
19495 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19496 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19497 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19498 +          %end;
19499 +    ;
19500 +  run;
19502 +  /* delete temporary tables */
19503 +  proc datasets lib=work nolist;
19504 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19505 +  run;
19507 +%mend em_tree_makePlotDs;
19511 +%macro em_tree_report;
19513 +   /* report properties */
19514 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19515 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19516 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19517 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19518 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19519 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19520 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19521 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19522 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19523 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19524 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19525 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19526 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19528 +   %let validexist=0;
19529 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19530 +     %let validexist=1;
19531 +   %end;
19533 +   /* determine if multiple targets will be processed */
19534 +   %let em_tree_multipleTargets=N;
19535 +   %let em_tree_numTarget=1;
19536 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19537 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19538 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19539 +         %let em_tree_multipleTargets=N;
19540 +      %end;
19541 +      %else %do;
19542 +        data _null_;
19543 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19544 +          if eof then
19545 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19546 +        run;
19548 +        %if &em_tree_numTarget gt 1 %then %do;
19549 +           %let em_tree_multipleTargets=Y;
19550 +        %end;
19551 +     %end;
19552 +   %end;
19554 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19556 +   /* variable importance */
19557 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19558 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19560 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19561 +     /* and the columns may not be generated                                                                                 */
19562 +     %let em_tree_cvexists=;
19563 +     %let em_tree_surrexists=.;
19564 +     data _null_;
19565 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19566 +       if eof then do ;
19567 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19568 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19569 +       end;
19570 +     run;
19572 +     data &EM_USER_OUTIMPORT;
19573 +         set &EM_USER_OUTIMPORT;
19574 +         /* format columns based on Precison value specified */
19575 +         format importance 15.&EM_PROPERTY_PRECISION
19576 +              %if &validexist %then %do;
19577 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19578 +              %end;
19579 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19580 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19581 +              %end;
19582 +         ;
19583 +     run;
19585 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19586 +     proc print data=&EM_USER_OUTIMPORT
19587 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19588 +          (where=((nrules>0) OR (nsurrogates>0)))
19589 +        %end;
19590 +        %else %do;
19591 +           (where=(nrules>0))
19592 +        %end;
19593 +        label noobs
19594 +        ;
19595 +     run;
19596 +     title10;
19598 +   %end;
19600 +   /* Sequence */
19601 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19602 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19603 +   data _null_ ;
19604 +      set &EM_USER_outseq (obs=2) end=eof ;
19605 +      if eof then do ;
19606 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19607 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19608 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19609 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19610 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19611 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19612 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19613 +      end;
19614 +    run;
19616 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19617 +      data &EM_USER_OUTSEQ;
19618 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19619 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19620 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19621 +           _XMISC_=_VMISC_
19622 +        %end;
19623 +        %if "&em_tree_aprof" ne "."  %then %do;
19624 +           _XAPROF_=_VAPROF_
19625 +           _XPROF_ = _VPROF_
19626 +        %end;
19627 +        %if "&em_tree_aloss" ne "."  %then %do;
19628 +           _XALOSS_=_VALOSS_
19629 +        %end;
19630 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19631 +           _XPASE_ = _VPASE_
19632 +           _XPMISC_ = _VPMISC_
19633 +        %end;
19635 +        ));
19636 +     %end;
19637 +     %else %do;
19638 +        set &EM_USER_OUTSEQ;
19639 +     %end;
19641 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19642 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19643 +            _MISC_   15.&EM_PROPERTY_PRECISION
19644 +         %end;
19645 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19646 +            _PASE_  15.&EM_PROPERTY_PRECISION
19647 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19648 +         %end;
19649 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19650 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19651 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19652 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19653 +            %end;
19654 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19655 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19656 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19657 +            %end;
19658 +         %end;
19659 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19660 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19661 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19662 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19663 +            %end;
19664 +         %end;
19665 +         %if "&em_tree_seq" ne "." %then %do;
19666 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19667 +         %end;
19668 +         %if "&em_tree_vseq" ne "." %then %do;
19669 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19670 +         %end;
19671 +         %if "&em_tree_aprof" ne "." %then %do;
19672 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19673 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19674 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19675 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19676 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19677 +           %end;
19678 +         %end;
19679 +         %else %if "&em_tree_aloss" ne "." %then %do;
19680 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19681 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19682 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19683 +           %end;
19684 +         %end;
19685 +      ;
19686 +    run;
19687 +   %end;
19689 +   /* Observation Based Importance */
19690 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19692 +      /* need to check for 0 obs */
19693 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19694 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19695 +      %let rc=%sysfunc(close(&dsid));
19697 +      %if &onobs %then %do;
19698 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19699 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19701 +         data &EM_USER_OUTOBSIMP;
19702 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19703 +           if _a;
19704 +           by _INPUT1_;
19705 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19706 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19707 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19708 +                   %end;
19709 +                   ;
19710 +         run;
19711 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19712 +      %end;
19713 +   %end;
19715 +  %end;
19717 +  /* create dataset to support tree diagram and icicle plot */
19718 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19719 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19721 +  /* display tree diagram */
19722 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19723 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19725 +  /* display icicle diagram */
19726 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19727 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19729 +  /* Leaf Statistics Plot */
19730 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19732 +  /* print leaf information to output window */
19733 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19735 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19736 +       by descending N;
19737 +     run;
19739 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19740 +     %local vn;
19741 +     data _null_;
19742 +       set t (obs=2) end=eof;
19743 +       if eof then do;
19744 +         call symput("vn", strip(put(vn, best.)));
19745 +       end;
19746 +     run;
19748 +     data t;
19749 +       set t;
19750 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19751 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19752 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19753 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19754 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19755 +       %end;
19756 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19757 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19758 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19759 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19760 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19761 +          %end;
19762 +       %end;
19763 +       ;
19764 +     run;
19766 +     /* determine if rase is found in t */
19767 +    %let dsid=%sysfunc(open(t,i));
19768 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19769 +    %let rc=%sysfunc(close(&dsid));
19771 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19772 +     proc print data=t noobs label;
19773 +       where tprob ne .;
19774 +       var node depth N tprob
19775 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19776 +         %if "&vn" ne "." %then %do;
19777 +           VN
19778 +         %end;
19779 +         vprob
19780 +       %end;
19781 +       %if &raseexists %then %do;
19782 +            RASE
19783 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19784 +              VRASE
19785 +            %end;
19786 +       %end;
19787 +       ;
19788 +     run;
19789 +     title10;
19790 +  %end;
19792 +  /* create plots that are done during training of node */
19793 +  /* display iterative plot, including reference line */
19794 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19795 +   /* %if &nleaves eq  %then %do; */
19796 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19797 +      data _null_;
19798 +        set &EM_USER_OUTTOPOLOGY end=eof;
19799 +        if eof then do;
19800 +          call symput('nleaves', LEAF);
19801 +        end;
19802 +      run;
19803 +   /* %end; */
19805 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19806 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19807 +  %end;
19809 +  /* display leaf statistics */
19810 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19812 +  /* stats by node if multiple targets = Y */
19813 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19814 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19815 +    data &EM_USER_OUTSTATS;
19816 +      set &EM_USER_OUTSTATS;
19818 +     * if STATNAME="TARGET" then delete;
19819 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19820 +      drop leaf;
19821 +    run;
19822 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19824 +  %end;
19825 +  %else %do;
19826 +    /* add outstats and outdescribe to spk but not results */
19827 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19828 +  %end;
19830 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: The data set EMWS1.TREE4_OUTIMPORT has 18 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS1.TREE4_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set EMWS1.TREE4_OUTSEQ.
NOTE: The data set EMWS1.TREE4_OUTSEQ has 17 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set EMWS1.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS1.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 9 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 9 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 181 observations read from the data set EMWS1.TREE4_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 12 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.TREE4_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 6 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 6 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE4_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 91 observations read from the data set EMWS1.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 91 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 91 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 78 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 13 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 91 observations read from the data set EMWS1.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 91 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 91 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 13 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 91 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 91 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 91 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 91 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 26 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 13 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 26 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 26 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 13 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: There were 26 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 26 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: There were 13 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 13 observations read from the data set WORK.TEMPN.
NOTE: There were 13 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE4_TREE_PLOT has 13 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 91 observations read from the data set EMWS1.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 26 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 13 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 13 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 7 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.TREE4_TREE_PLOT.
NOTE: There were 7 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE4_TREE_PLOT has 13 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.TREE4_TREE_PLOT.
NOTE: The data set WORK.T has 13 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 13 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      297:141
NOTE: There were 13 observations read from the data set EMWS1.TREE4_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
19831
19832  *------------------------------------------------------------*;
19833  * End REPORT: Tree4;
19834  *------------------------------------------------------------*;
 
19835  /* Reset EM Options */
19836  options formchar="|----|+|---+=|-/\<>*";
19837  options nocenter ls=256 ps=10000;
19838  goptions reset=all device=GIF NODISPLAY;
 
19839  proc sort data=WORK.EM_USER_REPORT;
19840  by ID VIEW;
19841  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19842  proc sort data=EMWS1.Impt2_CMeta_TRAIN out=WORK.SUBSETINMETA;
19843  by NAME;
19844  run;
 
NOTE: There were 31 observations read from the data set EMWS1.IMPT2_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 31 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
19845  proc sort data=EMWS1.Tree4_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19846  by NAME;
19847  run;
 
NOTE: There were 31 observations read from the data set EMWS1.TREE4_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 31 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19848  data WORK.ASSESS_META;
19849  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19850  by NAME;
19851  run;
 
NOTE: There were 31 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 31 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 31 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19852  data EM_temp_assessMeta;
19853  set EMWS1.Tree4_CMeta_TRAIN;
19854  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19855  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19856  data EM_temp_assessdata;
19857  set EMWS1.Tree4_TRAIN(keep=
19858  F_TargetBuy
19859  I_TargetBuy
19860  P_TargetBuy0
19861  P_TargetBuy1
19862  Q_TargetBuy0
19863  Q_TargetBuy1
19864  R_TargetBuy0
19865  R_TargetBuy1
19866  U_TargetBuy
19867  V_TargetBuy0
19868  V_TargetBuy1
19869  _WARN_
19870  TargetBuy
19871  );
19872  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 893 observations read from the data set EMWS1.PART3_TRAIN.
NOTE: View EMWS1.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
NOTE: There were 893 observations read from the data set EMWS1.IMPT2_TRAIN.
NOTE: There were 893 observations read from the data set EMWS1.TREE4_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 893 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24153   data EM_temp_assessMeta;
24154   set EMWS1.Tree4_CMeta_TRAIN;
24155   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24156   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24157   data EM_temp_assessdata;
24158   set EMWS1.Tree4_VALIDATE(keep=
24159   F_TargetBuy
24160   I_TargetBuy
24161   P_TargetBuy0
24162   P_TargetBuy1
24163   Q_TargetBuy0
24164   Q_TargetBuy1
24165   R_TargetBuy0
24166   R_TargetBuy1
24167   U_TargetBuy
24168   V_TargetBuy0
24169   V_TargetBuy1
24170   _WARN_
24171   TargetBuy
24172   );
24173   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 894 observations read from the data set EMWS1.PART3_VALIDATE.
NOTE: View EMWS1.TREE4_VALIDATE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
NOTE: There were 894 observations read from the data set EMWS1.IMPT2_VALIDATE.
NOTE: There were 894 observations read from the data set EMWS1.TREE4_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 894 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.17 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28463   %let _cn = %sysfunc(getoption(CENTER));
28464   options nocenter;
28465   proc print data=EMWS1.Tree4_EMREPORTFIT noobs label;
28466   var STAT LABEL TRAIN
28467   VALIDATE
28468   ;
28469   by TARGET TARGETLABEL;
28470   title9 ' ';
28471   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28472   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE4_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28473   title10;
28474   options &_cn;
 
28475   proc sort data=EMWS1.Tree4_EMCLASSIFICATION nothreads;
28476   by DATAROLE TARGET TARGETLABEL;
28477   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE4_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE4_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28478   %let _cn = %sysfunc(getoption(CENTER));
28479   options nocenter;
28480   proc print data=EMWS1.Tree4_EMCLASSIFICATION noobs label;
28481   var from into pct_row pct_col count percent
28482   ;
28483   by DATAROLE TARGET TARGETLABEL;
28484   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28485   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28486   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28487   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28488   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28489   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28490   where _TYPE_='PREDICTION';
28491   title9 ' ';
28492   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28493   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE4_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
28494   title9;
28495   title10;
28496   options &_cn;
 
28497   %let _cn = %sysfunc(getoption(CENTER));
28498   options nocenter;
28499   data EMWS1.Tree4_EMEVENTREPORT;
28500   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28500 !  8;
28501   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28501 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28501 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28501 ! FALSEEVENT
28502   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28502 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28502 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28503      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28504   FALSEEVENT=0;
28505   FALSENEVENT=0;
28506   TRUEEVENT=0;
28507   TRUENEVENT=0;
28508   set EMWS1.Tree4_EMEVENTREPORT;
28509   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE4_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE4_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
28510   proc print data=EMWS1.Tree4_EMEVENTREPORT noobs label;
28511   title9 ' ';
28512   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28513   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28514   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE4_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28515   title10;
28516   options &_cn;
 
28517   proc datasets library=EMWS1 nolist;
28518   modify Tree4_EMRANK;
28519   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28520   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28521   run;
 
NOTE: MODIFY was successful for EMWS1.TREE4_EMRANK.DATA.
28522   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
 
28523   %let _cn = %sysfunc(getoption(CENTER));
28524   options nocenter;
28525   proc print data=EMWS1.Tree4_EMRANK label noobs;
28526   var
28527   decile gain lift liftc resp respc N _meanP_;
28528   by
28529   notsorted DATAROLE
28530   notsorted TARGET
28531   notsorted TARGETLABEL
28532   ;
28533   title9 ' ';
28534   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28535   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE4_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28536   title10;
28537   options &_cn;
 
28538   proc datasets library=EMWS1 nolist;
28539   modify Tree4_EMSCOREDIST;
28540   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28541   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28542   run;
 
NOTE: MODIFY was successful for EMWS1.TREE4_EMSCOREDIST.DATA.
28543   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
