*------------------------------------------------------------*
User:                Mohamed
Date:                May 09, 2018
Time:                14:20:11
Site:                12400032
Platform:            X64_10HOME
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
*------------------------------------------------------------*
* Training Log
Date:                May 09, 2018
Time:                14:19:58
*------------------------------------------------------------*
15254  proc freq data=EMWS1.Tree3_VariableSet noprint;
15255  table ROLE*LEVEL/out=WORK.Tree3META;
15256  run;
 
NOTE: There were 28 observations read from the data set EMWS1.TREE3_VARIABLESET.
NOTE: The data set WORK.TREE3META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
15257  proc print data=WORK.Tree3META label noobs;
15258  var ROLE LEVEL COUNT;
15259  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15260  title9 ' ';
15261  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15262  run;
 
NOTE: There were 8 observations read from the data set WORK.TREE3META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
15263  title10;
 
15264  %let EMNORLEN = %DMNORLEN;
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN EMWS1 Part2_TRAIN
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN EMWS1 Part2_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15293  data WORK.Tree3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15294  length ORDER $20;
15295  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15296     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15297  set EMWS1.IDS2_TARGETBUY_DM( where=(_TYPE_="TARGET"));
15298  NumLevels=2;
15299  select(upcase(ORDER));
15300  when('DESC') ORDER = 'Descending';
15301  when('ASC') ORDER = 'Ascending';
15302  when('FMTDESC') ORDER = 'Formatted Descending';
15303  when('FMTASC') ORDER = 'Formatted Ascending';
15304  otherwise ORDER = 'Descending';
15305  end;
15306  output;
15307  run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE3_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
15308  title9 ' ';
15309  proc print data=WORK.Tree3_EVENT noobs label;
15310  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15311  title9 ' ';
15312  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15313  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE3_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15314  title10;
 
"No decisions defined for target "TargetBuy"."
15315  proc print data = EMWS1.Ids2_TargetBuy_DM noobs label;
15316  var _type_ variable label;
15317  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15318  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15319  title9 ' ';
15320  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15321  run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15322  title10;
 
15323  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15841  *------------------------------------------------------------*;
15842  * Tree3: Generation of macros and macro variables;
15843  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15844  *------------------------------------------------------------*;
 
15845  %let EMEXCEPTIONSTRING=;
15846  *------------------------------------------------------------*;
15847  * TRAIN: Tree3;
15848  *------------------------------------------------------------*;
15849  %let EM_ACTION = TRAIN;
15850  %let syscc = 0;
15851  %macro main;
15852
15853    %if %upcase(&EM_ACTION) = CREATE %then %do;
15854      filename temp catalog 'sashelp.emmodl.tree_create.source';
15855      %include temp;
15856      filename temp;
15857
15858      %em_tree_create;
15859    %end;
15860
15861     %else
15862     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15863
15864         filename temp catalog 'sashelp.emmodl.tree_train.source';
15865         %include temp;
15866         filename temp;
15867         %em_tree_train;
15868     %end;
15869
15870    %else
15871    %if %upcase(&EM_ACTION) = SCORE %then %do;
15872      filename temp catalog 'sashelp.emmodl.tree_score.source';
15873      %include temp;
15874      filename temp;
15875
15876      %em_tree_score;
15877
15878    %end;
15879
15880    %else
15881    %if %upcase(&EM_ACTION) = REPORT %then %do;
15882
15883         filename temp catalog 'sashelp.emmodl.tree_report.source';
15884         %include temp;
15885         filename temp;
15886
15887         %em_tree_report;
15888     %end;
15889
15890    %else
15891    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15892
15893         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15894         %include temp;
15895         filename temp;
15896         %EM_TREE_OPENTREEVIEWER;
15897
15898     %end;
15899
15900    %else
15901    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15902
15903         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15904         %include temp;
15905         filename temp;
15906         %EM_TREE_CLOSETREEVIEWER;
15907
15908     %end;
15909
15910
15911     %doendm:
15912  %mend main;
15913
15914  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15916 +%macro em_tree_train;
15918 +   %if &EM_IMPORT_DATA eq %then %do;
15919 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15920 +       %put &em_codebar;
15921 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15922 +       %put &errormsg;
15923 +       %put &em_codebar;
15924 +       %goto doendm;
15925 +   %end;
15926 +   %else
15927 +       %let EMEXCEPTIONSTRING =;
15929 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15930 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15931 +        %put &em_codebar;
15932 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15933 +        %put &errormsg;
15934 +        %put &em_codebar;
15935 +        %goto doendm;
15936 +   %end;
15938 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15939 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15940 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15941 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15942 +        %put &em_codebar;
15943 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15944 +        %put &errormsg;
15945 +        %put &em_codebar;
15946 +        %goto doendm;
15947 +   %end;
15949 +   /* Initialize property macro variables */
15950 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15951 +   %include temp;
15952 +   filename temp;
15954 +   %EM_SetProperties;
15956 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15957 +   %EM_GETNAME(key=EMTREE, type=DATA);
15958 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15959 +     /* if import eq Y and no importtable defined, throw an exception */
15960 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15961 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15962 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15963 +         %put &em_codebar;
15964 +         %put &errmsg;
15965 +         %put &em_codebar;
15966 +         %goto doendm;
15967 +      %end;
15968 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15969 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15970 +         %put &em_codebar;
15971 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15972 +         %put &errormsg;
15973 +         %put &em_codebar;
15974 +         %goto doendm;
15975 +      %end;
15976 +      %else %do;
15977 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15978 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15979 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15980 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15981 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15982 +         %let dsid = %sysfunc(close(&dsid));
15983 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15984 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15985 +            %put &em_codebar;
15986 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15987 +            %put &errormsg;
15988 +            %put &em_codebar;
15989 +            %goto doendm;
15990 +         %end;
15991 +      %end;
15992 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15993 +         proc delete data=&EM_USER_EMTREE;
15994 +         run;
15995 +      %end;
15996 +   %end;
15997 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15998 +      proc delete data=&EM_USER_EMTREE;
15999 +      run;
16000 +   %end;
16002 +   /* load tree macros */
16003 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16004 +   %include temp;
16005 +   filename temp;
16007 +   /* data sets */
16008 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
16009 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
16010 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
16012 +   /* files */
16013 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
16015 +   /* check actual num of target levels */
16016 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
16017 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16018 +                              nLevel=_nTargetLevel );
16019 +      %if &_nTargetLevel  > 2 %then %do;
16020 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16021 +        %put &em_codebar;
16022 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16023 +        %put &errormsg;
16024 +        %put &em_codebar;
16025 +        %goto doendm;
16026 +      %end;
16027 +   %end;
16029 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16030 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16031 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16032 +        %let costflag=0;
16033 +        data _null_;
16034 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16035 +          if eof then call symput("costflag", _N_);
16036 +        run;
16037 +        %if &costflag gt 0 %then %do;
16038 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16039 +          %put &em_codebar;
16040 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16041 +          %put &errormsg;
16042 +          %put &em_codebar;
16043 +          %goto doendm;
16044 +       %end;
16045 +     %end;
16046 +   %end;
16048 +   /* determine if multiple targets will be processed */
16049 +   %let em_tree_multipleTargets=N;
16050 +   %let em_tree_numTarget = 1;
16051 +   %let em_tree_targetVars=;
16053 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16054 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16055 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16056 +         %let em_tree_multipleTargets=N;
16057 +      %end;
16058 +      %else %do;
16059 +         /* create macro array of targets  */
16060 +         data _null_;
16061 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16062 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16063 +           if eof then
16064 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16065 +        run;
16067 +        %if &em_tree_numTarget gt 1 %then %do;
16068 +           %let em_tree_multipleTargets=Y;
16069 +        %end;
16070 +      %end;
16071 +   %end;
16073 +   /* create view of only necessary variable for performance reasons */
16074 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16075 +   data &tempData / view=&tempData;
16076 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16077 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16078 +       %EM_TARGET
16079 +     %end;
16080 +     %else %do;
16081 +       %if &em_tree_numTarget ne 0 %then %do;
16082 +         %do i=1 %to &em_tree_numTarget;
16083 +            &&em_tree_targetVars&i
16084 +         %end;
16085 +       %end;
16086 +     %end;
16087 +     );
16088 +   run;
16090 +   /* run Tree procedure */
16091 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16093 +   /* Check return code and throw exception if error is detected */
16094 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16095 +   %if &syserr %then %do;
16096 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16097 +     %goto doendm;
16098 +   %end;
16100 +   /* add decision score code if multiple targets are processed */
16101 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16102 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16103 +   %end;
16105 +   /* create outfit dataset if multiple score statements have been executed */
16106 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16108 +   /* create English Rules */
16109 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16110 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16111 +       %em_tree_makeEnglishRules;
16113 +       /* English Rules */
16114 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16116 +     %end;
16117 +   filename x;
16119 +   %doendm:
16120 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16121 +%macro EM_SetProperties;
16123 +   /* train properties */
16124 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16125 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16126 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16127 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16128 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16129 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16130 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16131 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16132 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16133 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16134 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16135 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16136 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16137 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16138 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16139 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16140 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16141 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16142 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16143 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16148 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16149 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16150 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16153 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16154 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16155 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16163 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16166 +   /* properties for interactive sample */
16167 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16168 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16169 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16170 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16172 +   /* report properties */
16173 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16174 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16175 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16176 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16177 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16178 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16179 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16180 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16181 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16182 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16183 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16184 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16185 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16187 +   /* score properties */
16188 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16189 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16191 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16193 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16194 +  %global &nLevel;
16195 +  proc dmdb batch data=&indata
16196 +    classout=_tmp_dmdbout;
16197 +    class &target;
16198 +  run;
16199 +  data _tmp_dmdbout;
16200 +    set _tmp_dmdbout;
16201 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16202 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16203 +  run;
16204 +  data _null_;
16205 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16206 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16207 +    %let dsid = %sysfunc(close(&dsid));
16208 +     call symput("&nLevel", put(&_obs, Best12.));
16209 +  run;
16211 +  proc datasets lib=work nolist;
16212 +     delete _tmp_dmdbout;
16213 +  run;
16214 +  quit;
16215 +%Mend EM_CheckBinaryTargetLevel;
16218 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16220 +  /* determine the number of obs in training data */
16221 +  proc sql;
16222 +    reset noprint;
16223 +    select count(*) into :em_nobs from &indata;
16224 +  quit;
16226 +  /* determine the number of input variables */
16227 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16228 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16230 +  /* retrieve targetEvent from decmeta */
16231 +  %let targetEvent=;
16232 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16233 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16234 +      data _null_;
16235 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16236 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16237 +      run;
16238 +    %end;
16239 +  %end;
16241 +  /* create targetTable if multipleTar eq Y */
16242 +  data temptarget;
16243 +    set &EM_DATA_VARIABLESET;
16244 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16245 +  run;
16247 + /* data sets */
16248 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16249 + %EM_GETNAME(key=EMTREE,        type=DATA);
16250 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16251 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16252 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16253 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16254 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16255 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16256 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16257 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16259 + /* files */
16260 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16261 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16263 + /* turn on pmml if requested */
16264 + %let nnpmml=0;
16265 + %if %symexist(EM_PMML) %then %do;
16266 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16267 +       %let nnpmml=1;
16269 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16270 +   %end;
16271 +%end;
16273 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16275 +%if &nnpmml or &numClassTarget %then %do;
16277 +    /* create dmdb needed for pmml generation */
16278 +    %let tree_maxlevel = 512;
16279 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16280 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16281 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16282 +      %end;
16283 +    %end;
16284 +    %if &tree_maxlevel gt 0 %then %do;
16285 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16286 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16287 +    %end;
16289 +    %let targetOrderString =;
16290 +    %let targetString = ;
16291 +    data _null_;
16292 +       length orderString nameString $10000;
16293 +       retain orderString nameString;
16294 +       set &em_data_variableset end=eof;
16295 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16296 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16297 +       %end;
16298 +       %else %do;
16299 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16300 +       %end;          select(order);
16301 +         when('')        order ='DESC';
16302 +         when('FMTASC')  order='ASCFMT';
16303 +         when('FMTDESC') order='DESFMT';
16304 +         otherwise;
16305 +       end;
16306 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16307 +       nameString = trim(nameString)!!' '!!trim(NAME);
16309 +       if eof then do;
16310 +          call symput('targetOrderString', trim(orderString));
16311 +          call symput('targetString', trim(nameString));
16312 +       end;
16313 +    run;
16315 +    %let arborkluge= "work._treeDMDB";
16317 +    proc dmdb batch data=&indata
16318 +    %if &nnpmml %then %do;
16319 +        PMML
16320 +    %end;
16321 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16323 +      %if &nnpmml %then %do;
16324 +           %if "%EM_ID" ne "" %then %do;
16325 +             id %EM_ID;
16326 +           %end;
16327 +           %if &EM_NUM_CLASS gt 0 %then %do;
16328 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16329 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16330 +                  &targetOrderString;
16331 +           %end;
16332 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16333 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16334 +           %end;
16335 +           target &targetString %EM_INTERVAL_TARGET;
16336 +           %if "%EM_FREQ" ne "" %then %do;
16337 +             freq %EM_FREQ;
16338 +           %end;
16339 +      %end;
16340 +      %else %do;
16341 +         class  &targetOrderString;
16342 +         target &targetString %EM_INTERVAL_TARGET;
16343 +      %end;
16344 +    run;
16345 +    quit;
16347 +    proc datasets lib=work nolist;
16348 +       delete classout varout;
16349 +    run;
16350 +    quit;
16352 + %end;
16355 + /* run Arbor procedure */
16356 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16357 +  proc arbor data=&INDATA
16359 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16360 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16361 +  %end;
16363 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16364 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16365 +  %end;
16367 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16368 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16369 +  %end;
16371 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16372 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16373 +  %end;
16375 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16376 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16377 +  %end;
16379 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16380 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16381 +  %end;
16382 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16383 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16384 +  %end;
16385 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16386 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16387 +  %end;
16389 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16390 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16391 +      alpha = &EM_PROPERTY_SIGLEVEL
16392 +    %end;
16393 +  %end;
16395 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16396 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16397 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16398 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16399 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16401 +        padjust =
16402 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16403 +          &chaid
16404 +        %end;
16405 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16406 +          DEPTH
16407 +        %end;
16408 +      %end;
16409 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16410 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16411 +         pvars = &num_inputs
16412 +      %end;
16413 +    %end;
16414 +  %end;
16415 +  %else %do;
16416 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16417 +         padjust = NONE
16418 +      %end;
16419 +  %end;
16421 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16422 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16423 +    Maxrules = &num_nrules
16424 +  %end;
16426 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16427 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16428 +    Maxsurrs = &num_nsurrs
16429 +  %end;
16431 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16432 +     Missing=&EM_PROPERTY_MISSINGVALUE
16433 +  %end;
16435 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16436 +     USEVARONCE
16437 +  %end;
16439 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16440 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16441 +  %end;
16444 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16445 +    event = "&targetEvent"
16446 +  %end;
16448 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16449 +     DECSEARCH
16450 +  %end;
16452 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16453 +     PRIORSSEARCH
16454 +  %end;
16456 +  %if &arbor_1 ne %then %do;
16457 +    &arbor_1
16458 +  %end;
16460 +  %if &em_arbor ne %then %do;
16461 +     &em_arbor
16462 +  %end;
16463 +  ;
16464 + %end;
16465 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16466 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16467 +       Performance &EM_PROPERTY_PERFORMANCE
16468 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16469 +         nodesize=&EM_PROPERTY_NODESAMPLE
16470 +       %end;
16471 +       ;
16472 +       interact;
16473 + %end;
16474 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16475 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16476 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16477 +    %put &em_codebar;
16478 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16479 +    %put &errormsg;
16480 +    %put &em_codebar;
16481 +    %goto doendm;
16482 +   %end;
16483 +   %else %do;
16484 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16485 +       Performance &EM_PROPERTY_PERFORMANCE
16486 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16487 +         nodesize=&EM_PROPERTY_NODESAMPLE
16488 +       %end;
16489 +       ;
16490 +       interact;
16491 +   %end;
16492 + %end;
16494 + %else %do;
16495 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16496 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16497 +    %put &em_codebar;
16498 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16499 +    %put &errormsg;
16500 +    %put &em_codebar;
16501 +    %goto doendm;
16502 +   %end;
16503 +   %else %do;
16504 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16505 +       Performance &EM_PROPERTY_PERFORMANCE
16506 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16507 +         nodesize=&EM_PROPERTY_NODESAMPLE
16508 +       %end;
16509 +       ;
16510 +        interact;
16511 +   %end;
16512 + %end;
16514 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16515 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16516 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16517 +    %end;
16519 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16520 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16521 +    %end;
16523 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16524 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16525 +    %end;
16527 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16528 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16529 +    %end;
16531 +    %if "%EM_FREQ" ne "" %then %do;
16532 +       freq %EM_FREQ;
16533 +    %end;
16535 +    %if "&multipleTar" eq "Y" %then %do;
16536 +       /* cycle through all target vars in variableset */
16537 +       %let tdsid = %sysfunc(open(temptarget));
16538 +       %if &tdsid %then %do;
16539 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16540 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16541 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16542 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16543 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16544 +             target &var / level = &lvl
16545 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16546 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16547 +             %end;
16548 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16549 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16550 +             %end;
16551 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16552 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16553 +             %end;
16554 +          %end;
16555 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16556 +       %end;
16557 +       useTarget variable = %EM_TARGET;
16558 +    %end;
16559 +    %else %do;
16560 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16561 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16562 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16563 +      %end;
16564 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16565 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16566 +      %end;
16567 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16568 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16569 +      %end;
16570 +    %end;
16572 +    %if "&multipleTar" eq "N" %then %do;
16573 +      &EM_DEC_STATEMENT;
16574 +    %end;
16576 +    Performance &EM_PROPERTY_PERFORMANCE
16577 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16578 +      nodesize=&EM_PROPERTY_NODESAMPLE
16579 +    %end;
16580 +    ;
16582 +    %if "&intFlag" eq "Y" %then %do;
16583 +       INTERACT Largest;
16584 +       Train maxnewdepth=0;
16585 +    %end;
16587 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16588 +         Assess
16589 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16590 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16591 +              %put &em_codebar;
16592 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16593 +              %put &errormsg;
16594 +              %put &em_codebar;
16595 +            %end;
16596 +            %else %do;
16597 +               Validata=&EM_IMPORT_VALIDATE
16598 +            %end;
16599 +         %end;
16600 +         %else %do;
16601 +           NoValidata
16602 +         %end;
16603 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16604 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16605 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16606 +               %if &dsid %then %do;
16607 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16608 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16609 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16610 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16611 +                   %else %do;
16612 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16613 +                      %else %let measure= MISC;
16614 +                   %end;
16615 +                 %end;
16616 +               %end;
16617 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16618 +            %end;
16619 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16620 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16621 +                 %let measure=ASE;
16622 +              %end;
16623 +              %else %do;
16624 +                 %let measure=MISC;
16625 +              %end;
16626 +            %end;
16627 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16628 +              %let measure=ASE;
16629 +            %end;
16630 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16631 +               %let measure = LIFT;
16632 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16633 +               %if &dsid %then %do;
16634 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16635 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16636 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16637 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16638 +                 %end;
16639 +               %end;
16640 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16641 +            %end;
16642 +            measure=&measure
16643 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16644 +               event = "&targetEvent"
16645 +            %end;
16646 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16647 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16648 +            %end;
16649 +         %end;
16650 +         %if "&multipleTar" eq "N" %then %do;
16651 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16652 +               CV
16653 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16654 +                 CVNITer = &EM_PROPERTY_CVNITER
16655 +               %end;
16656 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16657 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16658 +               %end;
16659 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16660 +                 CVSeed = &EM_PROPERTY_CVSEED
16661 +               %end;
16662 +            %end;
16663 +         %end;
16664 +       %end;
16665 +      ;
16667 +      %if "&intFlag" ne "Y" %then %do;
16668 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16669 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16670 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16671 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16673 +          SUBTREE &subtree
16674 +          %if "&subtree" eq "NLEAVES" %then %do;
16675 +            =&EM_PROPERTY_NSUBTREE
16676 +          %end;
16677 +          ;
16678 +        %end;
16680 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16681 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16682 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16683 +          %end;
16684 +       %end;
16685 +      %end;
16686 + %end;
16689 + MakeMacro nleaves = nleaves;
16690 + save
16691 + %if "&EM_USER_EMTREE" ne "" %then %do;
16692 +   MODEL=&EM_USER_EMTREE
16693 + %end;
16694 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16695 +   SEQUENCE=&EM_USER_OUTSEQ
16696 + %end;
16697 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16698 +   IMPORTANCE=&EM_USER_OUTIMPORT
16699 + %end;
16700 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16701 +   NODESTAT=&EM_USER_OUTNODES
16702 + %end;
16703 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16704 +   SUMMARY=&EM_USER_OUTSUMMARY
16705 + %end;
16706 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16707 +   STATSBYNODE=&EM_USER_OUTSTATS
16708 + %end;
16709 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16710 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16711 + %end;
16712 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16713 +   Pathlistnonmissing=&EM_USER_OUTPATH
16714 + %end;
16715 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16716 +   RULES = &EM_USER_OUTRULES
16717 + %end;
16718 + ;
16720 + %if "&intFlag" ne "Y" %then %do;
16722 +   %let lookupString = ;
16723 +   %if ^%symexist(EM_OPTION) %then
16724 +      %let EM_OPTION=;
16726 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16727 +      %let lookupString = LOOKUP=SELECT;
16728 +   %end;
16730 +   %let codetext=;
16731 +   %let norescodetxt=;
16733 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16734 +     %let codetext=&codetext DUMMY;
16735 +     %let norescodetxt=&norescodetxt DUMMY;
16736 +   %end;
16737 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16738 +     %let codetext=&codetext NOLEAFID;
16739 +     %let norescodetxt=&norescodetxt NOLEAFID;
16740 +   %end;
16741 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16742 +     %let norescodetxt=&norescodetxt NOPRED;
16743 +   %end;
16745 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16746 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16748 +   %if &nnpmml %then %do;
16749 +     code pmml;
16750 +   %end;
16752 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16753 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16754 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16755 +   %end;
16756 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16757 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16758 +   %end;
16759 + %end;
16761 + run;
16762 + quit;
16764 + /*%em_checkerror(); */
16765 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16766 +   /* Delete DMDB catalog */
16767 +   proc datasets lib=work nolist;
16768 +       delete _treeDMDB / mt=cat;
16769 +  run;
16770 +  %end;
16772 + %if &nnpmml %then %do;
16773 +    ods pmml close;
16774 + %end;
16776 +  %doendm:
16778 +%mend em_tree_runTreeProcedure;
16780 +%macro em_tree_createFitStats( multipleTar= );
16783 +  /* create targetTable is multipleTar eq Y */
16784 +  data temptarget;
16785 +    set &EM_DATA_VARIABLESET;
16786 +    where ROLE="TARGET";
16787 +  run;
16789 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16790 +   data &EM_USER_EMOUTFIT;
16791 +     length target $32;
16792 +     merge work.fit_train
16793 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16794 +       work.fit_valid
16795 +     %end;
16796 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16797 +       work.fit_test
16798 +     %end;
16799 +     ;
16800 +     %if "&multipleTar" eq "N" %then %do;
16801 +       target="%EM_TARGET";
16802 +     %end;
16803 +     %else %do;
16804 +       target = _TARGET_;
16805 +     %end;
16806 +     drop _NW_ _SUMW_
16807 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16808 +        _VSUMW_
16809 +     %end;
16810 +     ;
16811 +   run;
16813 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16814 +     proc datasets library=work nolist;
16815 +       delete fit_valid;
16816 +     run;
16817 +   %end;
16818 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16819 +     proc datasets library=work nolist;
16820 +       delete fit_test;
16821 +     run;
16822 +   %end;
16824 +%mend em_tree_createFitStats;
16827 +%macro em_tree_makeEnglishRules;
16829 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16830 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16832 +  /* verify that necessary tables exist and if not, skip processing */
16833 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16834 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16835 +    %goto doendm;
16836 +  %end;
16837 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16838 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16839 +    %goto doendm;
16840 +  %end;
16842 +  /* determine length of variable in outpath dataset */
16843 +  %let vlength= ;
16844 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16845 +  %if &dsid ne %then %do;
16846 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16847 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16848 +  %end;
16849 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16851 +  data tempoutpath;
16852 +    length varname $&vlength;
16853 +    retain varname;
16854 +    set &EM_USER_OUTPATH;
16856 +    if ^missing(variable) then varname=variable;
16857 +    else if ^missing(var_name) then varname=var_name;
16858 +    output;
16859 +  run;
16861 +  /* create an array of generated predicted variable names */
16862 +  %let tree_pred_vars = ;
16863 +  %let tree_pred_label = ;
16864 +  %let numpred= 0;
16865 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16867 +    data _null_;
16868 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16869 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16870 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16871 +     if eof then
16872 +       call symput('numpred', strip(put(_N_, BEST.)));
16873 +    run;
16874 +  %end;
16876 +  /* determine if NPRIORS exists in outnodes  */
16877 +  %local nprior_flag;
16878 +  data _null_;
16879 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16880 +    if eof then do;
16881 +      call symput('nprior_flag', strip(put(npriors, best.)));
16882 +    end;
16883 +  run;
16885 +  proc sort data=tempoutpath; by node; run;
16886 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16888 +  data tempoutpath;
16889 +    merge tempoutpath(in=_a) outnodes(keep= node
16890 +    %if "&nprior_flag" ne "." %then %do;
16891 +      NPRIORS
16892 +    %end;
16893 +    %else %do;
16894 +      N
16895 +    %end;
16896 +    %if &numpred gt 0 %then %do;
16897 +      %do i=1 %to &numpred;
16898 +        &&tree_pred_vars&i
16899 +      %end;
16900 +    %end;
16901 +    );
16902 +    by node;
16903 +    if _a;
16904 +  run;
16906 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16908 +  data _null_;
16909 +    file x;
16910 +    set tempoutpath;
16911 +    by node descending varname;
16912 +    retain origvar oldnode string;
16913 +    length origvar $32 oldnode 8 string $200;
16915 +    if _N_ = 1 then do;
16916 +      origvar = varname;
16917 +      oldnode = node;
16918 +    end;
16920 +    if first.node then do;
16921 +       put "&EM_CODEBAR";
16922 +       put " Node = " node;
16923 +       put "&EM_CODEBAR";
16924 +    end;
16926 +      if first.varname then do;
16927 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16928 +            if MISSING(CHARACTER_VALUE) then do;
16929 +             if NUMERIC_VALUE ne .  then do;
16930 +              if ^first.node then do;
16931 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16932 +              end;
16933 +              else do;
16934 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16935 +              end;
16936 +             end;
16937 +            end;
16938 +            else do;
16939 +              if ^first.node then do;
16940 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16941 +              end;
16942 +              else do;
16943 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16944 +              end;
16945 +             end;
16946 +         end;
16947 +         else if RELATION in ("=") then do;
16948 +            if ^first.node then do;
16949 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16950 +            end;
16951 +            else do;
16952 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16953 +            end;
16954 +         end;
16955 +         else if RELATION in ("ISMISSING") then do;
16956 +            if ^first.node then do;
16957 +              string = " AND "|| strip(varname) || " equals Missing";
16958 +            end;
16959 +            else do;
16960 +              string = "if "|| strip(varname) ||" equals Missing";
16961 +            end;
16962 +         end;
16963 +         else if RELATION in ("ISNOTMISSING") then do;
16964 +            if ^first.node then do;
16965 +              string = " AND "|| strip(varname) || " equals All Values";
16966 +            end;
16967 +            else do;
16968 +              string = "if "|| strip(varname) ||" equals All Values";
16969 +            end;
16970 +         end;
16971 +         if ^missing(varname) then origvar = varname;
16972 +         oldnode=node;
16974 +      end;
16975 +      else do;
16976 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16977 +          if MISSING(CHARACTER_VALUE) then do;
16978 +           if  NUMERIC_VALUE ne .  then do;
16979 +            if ^MISSING(string) then
16980 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16981 +            else
16982 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16983 +           end;
16984 +          end;
16985 +          else do;
16986 +            if ^MISSING(string) then
16987 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16988 +            else
16989 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16990 +          end;
16992 +         end;
16993 +         else if RELATION in ("=") then do;
16994 +           string = strip(string)||", "||strip(character_value);
16995 +         end;
16996 +         else if RELATION in ("ISMISSING") then do;
16998 +         end;
16999 +         if ^missing(varname) then origvar = varname;
17000 +         oldnode=node;
17001 +      end;
17002 +      if last.varname then do;
17003 +         if RELATION in ("ISMISSING") then do;
17004 +           if ^first.varname then do;
17005 +             string = strip(string) || " or MISSING";
17006 +           end;
17007 +         end;
17008 +         put string;
17009 +         if ^missing(varname) then origvar = varname;
17010 +         oldnode=node;
17011 +      end;
17013 +      if last.node then do;
17014 +         put "then ";
17015 +         put " Tree Node Identifier   = " node;
17017 +         %if "&nprior_flag" ne "." %then %do;
17018 +           put " Number of Observations = " NPRIORS;
17019 +         %end;
17020 +         %else %do;
17021 +           put " Number of Observations = " N;
17022 +         %end;
17024 +         %if &numpred gt 0 %then %do;
17025 +           %do i=1 %to &numpred;
17026 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17027 +           %end;
17028 +         %end;
17030 +         put " ";
17031 +         if ^missing(varname) then origvar = varname;
17032 +         oldnode=node;
17033 +      end;
17035 +  run;
17037 +  proc datasets lib=work nolist;
17038 +    delete tempoutpath outnodes;
17039 +  run;
17041 +  %doendm:
17042 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 10016   Memory used = 511K.
NOTE: There were 10016 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE3.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 10016 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 10016   Memory used = 511K.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: There were 10016 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: There were 10016 observations read from the data set EMWS1.EM_TREE3.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: 1596882 kilobytes of physical memory.
NOTE: Will use 10016 out of 10016 training cases.
NOTE: Using memory pool with 313381888 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 4742968 bytes of work memory.
NOTE: The subtree sequence contains 43 subtrees. The largest has 85 nodes and 43 leaves.
NOTE: Using subtree with 39 nodes and 20 leaves.
NOTE: Using subtree with 39 nodes and 20 leaves.
NOTE: Created macro variable NLEAVES equal to 20.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 18 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_EMTREE has 2645 observations and 4 variables.
NOTE: The data set EMWS1.TREE3_OUTNODES has 39 observations and 24 variables.
NOTE: The data set EMWS1.TREE3_OUTPATH has 177 observations and 7 variables.
NOTE: The data set EMWS1.TREE3_OUTRULES has 601 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_OUTSEQ has 43 observations and 20 variables.
NOTE: The data set EMWS1.TREE3_OUTSTATS has 273 observations and 5 variables.
NOTE: The data set EMWS1.TREE3_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_OUTTOPOLOGY has 39 observations and 5 variables.
NOTE: External file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree3\TREEFLOW.sas opened.
NOTE: External file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree3\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
NOTE: There were 10016 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           1.89 seconds
      cpu time            1.65 seconds
 
NOTE: There were 10016 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: There were 10016 observations read from the data set EMWS1.EM_TREE3.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.92 seconds
      cpu time            1.67 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE3_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 177 observations read from the data set EMWS1.TREE3_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 177 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 177 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 177 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 39 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: The data set WORK.OUTNODES has 39 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 177 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 39 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 177 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 177 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 177 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree3\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=09May2018:14:20:02,
      Create Time=09May2018:14:20:02
 
NOTE: 259 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 67.
NOTE: There were 177 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
NOTE: Fileref X has been deassigned.
17044
17045  *------------------------------------------------------------*;
17046  * End TRAIN: Tree3;
17047  *------------------------------------------------------------*;
 
17048  *------------------------------------------------------------*;
17049  * Close any missing semi colons;
17050  *------------------------------------------------------------*;
17051  ;
17052  ;
17053  ;
17054  ;
17055  quit;
17056  *------------------------------------------------------------*;
17057  * Close any unbalanced quotes;
17058  *------------------------------------------------------------*;
17059  /*; *"; *'; */
17060  ;
17061  run;
17062  quit;
17063  /* Reset EM Options */
17064  options formchar="|----|+|---+=|-/\<>*";
17065  options nocenter ls=256 ps=10000;
17066  goptions reset=all device=GIF NODISPLAY;
 
17067  proc sort data=WORK.EM_USER_REPORT;
17068  by ID VIEW;
17069  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                May 09, 2018
Time:                14:20:03
*------------------------------------------------------------*
17171  %let EMEXCEPTIONSTRING=;
17172  *------------------------------------------------------------*;
17173  * SCORE: Tree3;
17174  *------------------------------------------------------------*;
17175  %let EM_ACTION = SCORE;
17176  %let syscc = 0;
17177  %macro main;
17178
17179    %if %upcase(&EM_ACTION) = CREATE %then %do;
17180      filename temp catalog 'sashelp.emmodl.tree_create.source';
17181      %include temp;
17182      filename temp;
17183
17184      %em_tree_create;
17185    %end;
17186
17187     %else
17188     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17189
17190         filename temp catalog 'sashelp.emmodl.tree_train.source';
17191         %include temp;
17192         filename temp;
17193         %em_tree_train;
17194     %end;
17195
17196    %else
17197    %if %upcase(&EM_ACTION) = SCORE %then %do;
17198      filename temp catalog 'sashelp.emmodl.tree_score.source';
17199      %include temp;
17200      filename temp;
17201
17202      %em_tree_score;
17203
17204    %end;
17205
17206    %else
17207    %if %upcase(&EM_ACTION) = REPORT %then %do;
17208
17209         filename temp catalog 'sashelp.emmodl.tree_report.source';
17210         %include temp;
17211         filename temp;
17212
17213         %em_tree_report;
17214     %end;
17215
17216    %else
17217    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17218
17219         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17220         %include temp;
17221         filename temp;
17222         %EM_TREE_OPENTREEVIEWER;
17223
17224     %end;
17225
17226    %else
17227    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17228
17229         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17230         %include temp;
17231         filename temp;
17232         %EM_TREE_CLOSETREEVIEWER;
17233
17234     %end;
17235
17236
17237     %doendm:
17238  %mend main;
17239
17240  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17242 +%macro em_tree_score;
17244 +   /* determine if multiple targets will be processed */
17245 +   %let em_tree_multipleTargets=N;
17246 +   %let em_tree_numTarget=1;
17247 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17248 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17249 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17250 +         %let em_tree_multipleTargets=N;
17251 +      %end;
17252 +      %else %do;
17253 +         /* create macro array of targets  */
17254 +         data _null_;
17255 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17256 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17257 +           if eof then
17258 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17259 +        run;
17261 +        %if &em_tree_numTarget gt 1 %then %do;
17262 +           %let em_tree_multipleTargets=Y;
17263 +        %end;
17264 +      %end;
17265 +   %end;
17267 +   /* build flow and publish scoring code */
17268 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17269 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17271 +   filename treeflow "&EM_USER_TREEFLOW";
17272 +   filename treepub "&EM_USER_TREEPUBLISH";
17274 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17275 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17277 +   %em_copyfile(infref=treeflow, outfref=flowref);
17278 +   %em_copyfile(infref=treepub, outfref=pubref);
17280 +   filename treeflow;
17281 +   filename treepub;
17283 +   /* if priors are used, add code to generate unadjusted residuals in export */
17284 +   %let useAdjPriors = N;
17285 +   data _null_;
17286 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17287 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17288 +   run;
17289 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17290 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17291 +      %include temp;
17292 +      filename temp;
17294 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17295 +      filename adjref "&EM_USER_adjResidualCode";
17296 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17298 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17300 +      filename adjref;
17301 +   %end;
17303 +   /* LEAF */
17304 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17305 +      data _null_;
17306 +        file flowref mod;
17307 +        put 'drop _LEAF_;';
17308 +      run;
17310 +      data _null_;
17311 +        file pubref mod;
17312 +        put 'drop _LEAF_;';
17313 +      run;
17315 +   %end;
17317 +   filename flowref;
17318 +   filename pubref;
17320 +   /* em_metachange code */
17321 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17322 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17323 +   %end;
17325 +   /* variable selection based on importance stat    */
17326 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17327 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17328 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17329 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17330 +     %let obs = %sysfunc(fetch(&dsid));
17331 +     %do %while(&obs=0);
17332 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17333 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17334 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17335 +       %let obs = %sysfunc(fetch(&dsid));
17336 +     %end;
17337 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17338 +   %end;
17340 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17341 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17342 +    %let tree_pred_vars = ;
17343 +    %let tree_pred_lvl =;
17344 +    %let numpred= 0;
17346 +    data _null_;
17347 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17348 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17349 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17350 +     if eof then
17351 +       call symput('numpred', strip(put(_N_, BEST.)));
17352 +    run;
17353 +   %end;
17355 +   %if &numpred ne 0 %then %do;
17356 +    %do i=1 %to &numpred;
17357 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17358 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17359 +    %end;
17360 +   %end;
17362 +   /* determine if multiple targets will be processed */
17363 +   %let em_tree_multipleTargets=N;
17364 +   %let em_tree_numTarget=1;
17365 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17366 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17367 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17368 +         %let em_tree_multipleTargets=N;
17369 +      %end;
17370 +      %else %do;
17371 +        data _null_;
17372 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17373 +          if eof then
17374 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17375 +        run;
17377 +        %if &em_tree_numTarget gt 1 %then %do;
17378 +           %let em_tree_multipleTargets=Y;
17379 +        %end;
17380 +     %end;
17381 +   %end;
17383 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17384 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17386 +      /* variable importance */
17387 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17388 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17390 +         %let validexist=0;
17391 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17392 +           %let validexist=1;
17393 +         %end;
17395 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17396 +         /* and the columns may not be generated                                                                                 */
17397 +         %let em_tree_cvexists=;
17398 +         %let em_tree_surrexists=.;
17399 +         data _null_;
17400 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17401 +            if eof then do ;
17402 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17403 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17404 +            end;
17405 +         run;
17407 +         data &EM_USER_OUTIMPORT;
17408 +            set &EM_USER_OUTIMPORT;
17410 +            /* format columns based on Precison value specified */
17411 +            format importance 15.&EM_PROPERTY_PRECISION
17412 +                 %if &validexist %then %do;
17413 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17414 +                 %end;
17415 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17416 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17417 +                 %end;
17418 +            ;
17419 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17420 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17421 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17422 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17423 +                 %if "&em_tree_surrexists" ne "" %then %do;
17424 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17425 +                 %end;
17426 +                 %if &validexist %then %do;
17427 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17428 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17429 +                 %end;
17430 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17431 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17432 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17433 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17434 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17435 +                 %end;
17436 +            ;
17437 +         run;
17439 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17440 +      %end;
17441 +   %end;
17443 +   %doendm:
17444 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=09May2018:14:20:03,
      Create Time=09May2018:14:20:03
 
NOTE: 358 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=09May2018:14:20:03,
      Create Time=09May2018:14:20:03
 
NOTE: 336 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=14046,
      Last Modified=09May2018:14:20:03,
      Create Time=09May2018:14:20:03
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=13373,
      Last Modified=09May2018:14:20:03,
      Create Time=09May2018:14:20:03
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 18 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 18 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
 
17445
17446  *------------------------------------------------------------*;
17447  * End SCORE: Tree3;
17448  *------------------------------------------------------------*;
 
17449  proc sort data=WORK.EM_METACHANGE;
17450  by key uname;
17451  run;
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17452  filename x "D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree3\CDELTA_TRAIN.sas";
17453  data _null_;
17454  file x;
17455  put 'if upcase(NAME) = "CAMPAIGNVIEWEDEMAIL" then do;';
17456  put 'ROLE = "REJECTED";';
17457  put 'end;';
17458  put 'else ';
17459  put 'if upcase(NAME) = "CLEANSERPRODUCTS" then do;';
17460  put 'ROLE = "REJECTED";';
17461  put 'end;';
17462  put 'else ';
17463  put 'if upcase(NAME) = "LOYALTYCLASS" then do;';
17464  put 'ROLE = "REJECTED";';
17465  put 'end;';
17466  put 'else ';
17467  put 'if upcase(NAME) = "PREVIOUSCAMPAIGN" then do;';
17468  put 'ROLE = "REJECTED";';
17469  put 'end;';
17470  put 'else ';
17471  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
17472  put 'ROLE = "ASSESS";';
17473  put 'end;';
17474  put 'else ';
17475  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
17476  put 'ROLE = "ASSESS";';
17477  put 'end;';
17478  put 'else ';
17479  put 'if upcase(NAME) = "REP_ADVERTISEMENTZONE" then do;';
17480  put 'ROLE = "REJECTED";';
17481  put 'end;';
17482  put 'else ';
17483  put 'if upcase(NAME) = "REP_CLUSTERGROUP" then do;';
17484  put 'ROLE = "REJECTED";';
17485  put 'end;';
17486  put 'else ';
17487  put 'if upcase(NAME) = "REP_LOYALTYTIME" then do;';
17488  put 'ROLE = "REJECTED";';
17489  put 'end;';
17490  put 'else ';
17491  put 'if upcase(NAME) = "REP_REGION" then do;';
17492  put 'ROLE = "REJECTED";';
17493  put 'end;';
17494  put 'else ';
17495  put 'if upcase(NAME) = "TIMESINCELASTPURCHASE" then do;';
17496  put 'ROLE = "REJECTED";';
17497  put 'end;';
17498  put 'else ';
17499  put 'if upcase(NAME) = "TOTALSPEND" then do;';
17500  put 'ROLE = "REJECTED";';
17501  put 'end;';
17502  put 'else ';
17503  put 'if upcase(NAME) = "_NODE_" then do;';
17504  put 'ROLE = "SEGMENT";';
17505  put 'LEVEL = "NOMINAL";';
17506  put 'end;';
17507  run;
 
NOTE: The file X is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree3\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=09May2018:14:20:03,
      Create Time=01May2018:17:03:05
 
NOTE: 52 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17508  filename x;
NOTE: Fileref X has been deassigned.
 
17509  filename emflow "D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
17510  *------------------------------------------------------------*;
17511  * Tree3: Scoring DATA data;
17512  *------------------------------------------------------------*;
17513  data EMWS1.Tree3_TRAIN
17514  / view=EMWS1.Tree3_TRAIN
17515  ;
17516  set EMWS1.Part2_TRAIN
17517  ;
17518  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas.
17519 +****************************************************************;
17520 +******             DECISION TREE SCORING CODE             ******;
17521 +****************************************************************;
17522 +
17523 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17524 +LENGTH F_TargetBuy  $   12;
17525 +LENGTH I_TargetBuy  $   12;
17526 +LENGTH _WARN_  $    4;
17527 +
17528 +******              LABELS FOR NEW VARIABLES              ******;
17529 +label _NODE_ = 'Node' ;
17530 +label _LEAF_ = 'Leaf' ;
17531 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17532 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17533 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17534 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17535 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17536 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17537 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17538 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17539 +label F_TargetBuy = 'From: TargetBuy' ;
17540 +label I_TargetBuy = 'Into: TargetBuy' ;
17541 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17542 +label _WARN_ = 'Warnings' ;
17543 +
17544 +
17545 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17546 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17547 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17548 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17549 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17550 +
17551 +
17552 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17553 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17554 +
17555 +******             ASSIGN OBSERVATION TO NODE             ******;
17556 +IF  NOT MISSING(REP_Age ) AND
17557 +  REP_Age  <                 44.5 THEN DO;
17558 +  _ARBFMT_1 = PUT( REP_Gender , $CHAR1.);
17559 +   %DMNORMIP( _ARBFMT_1);
17560 +  IF _ARBFMT_1 IN ('M' ,'U' ) THEN DO;
17561 +    IF  NOT MISSING(AffluenceGrade ) AND
17562 +                      10.5 <= AffluenceGrade  THEN DO;
17563 +      IF  NOT MISSING(AffluenceGrade ) AND
17564 +                        15.5 <= AffluenceGrade  THEN DO;
17565 +        _NODE_  =                   19;
17566 +        _LEAF_  =                    6;
17567 +        P_TargetBuy0  =     0.12195121951219;
17568 +        P_TargetBuy1  =      0.8780487804878;
17569 +        Q_TargetBuy0  =     0.12195121951219;
17570 +        Q_TargetBuy1  =      0.8780487804878;
17571 +        V_TargetBuy0  =     0.20930232558139;
17572 +        V_TargetBuy1  =      0.7906976744186;
17573 +        I_TargetBuy  = '1' ;
17574 +        U_TargetBuy  =                    1;
17575 +        END;
17576 +      ELSE DO;
17577 +        IF  NOT MISSING(NightRepairProducts ) AND
17578 +          NightRepairProducts  <                  0.5 THEN DO;
17579 +          _NODE_  =                   36;
17580 +          _LEAF_  =                    4;
17581 +          P_TargetBuy0  =     0.64516129032258;
17582 +          P_TargetBuy1  =     0.35483870967741;
17583 +          Q_TargetBuy0  =     0.64516129032258;
17584 +          Q_TargetBuy1  =     0.35483870967741;
17585 +          V_TargetBuy0  =             0.546875;
17586 +          V_TargetBuy1  =             0.453125;
17587 +          I_TargetBuy  = '0' ;
17588 +          U_TargetBuy  =                    0;
17589 +          END;
17590 +        ELSE DO;
17591 +          _NODE_  =                   37;
17592 +          _LEAF_  =                    5;
17593 +          P_TargetBuy0  =     0.41666666666666;
17594 +          P_TargetBuy1  =     0.58333333333333;
17595 +          Q_TargetBuy0  =     0.41666666666666;
17596 +          Q_TargetBuy1  =     0.58333333333333;
17597 +          V_TargetBuy0  =     0.51351351351351;
17598 +          V_TargetBuy1  =     0.48648648648648;
17599 +          I_TargetBuy  = '1' ;
17600 +          U_TargetBuy  =                    1;
17601 +          END;
17602 +        END;
17603 +      END;
17604 +    ELSE DO;
17605 +      IF  NOT MISSING(REP_Age ) AND
17606 +        REP_Age  <                 29.5 THEN DO;
17607 +        _ARBFMT_12 = PUT( MobileApplications , BEST12.);
17608 +         %DMNORMIP( _ARBFMT_12);
17609 +        IF _ARBFMT_12 IN ('1' ) THEN DO;
17610 +          _NODE_  =                   33;
17611 +          _LEAF_  =                    2;
17612 +          P_TargetBuy0  =     0.09090909090909;
17613 +          P_TargetBuy1  =      0.9090909090909;
17614 +          Q_TargetBuy0  =     0.09090909090909;
17615 +          Q_TargetBuy1  =      0.9090909090909;
17616 +          V_TargetBuy0  =     0.03703703703703;
17617 +          V_TargetBuy1  =     0.96296296296296;
17618 +          I_TargetBuy  = '1' ;
17619 +          U_TargetBuy  =                    1;
17620 +          END;
17621 +        ELSE DO;
17622 +          _NODE_  =                   32;
17623 +          _LEAF_  =                    1;
17624 +          P_TargetBuy0  =     0.73170731707317;
17625 +          P_TargetBuy1  =     0.26829268292682;
17626 +          Q_TargetBuy0  =     0.73170731707317;
17627 +          Q_TargetBuy1  =     0.26829268292682;
17628 +          V_TargetBuy0  =     0.65116279069767;
17629 +          V_TargetBuy1  =     0.34883720930232;
17630 +          I_TargetBuy  = '0' ;
17631 +          U_TargetBuy  =                    0;
17632 +          END;
17633 +        END;
17634 +      ELSE DO;
17635 +        _NODE_  =                   17;
17636 +        _LEAF_  =                    3;
17637 +        P_TargetBuy0  =     0.80877742946708;
17638 +        P_TargetBuy1  =     0.19122257053291;
17639 +        Q_TargetBuy0  =     0.80877742946708;
17640 +        Q_TargetBuy1  =     0.19122257053291;
17641 +        V_TargetBuy0  =     0.79756468797564;
17642 +        V_TargetBuy1  =     0.20243531202435;
17643 +        I_TargetBuy  = '0' ;
17644 +        U_TargetBuy  =                    0;
17645 +        END;
17646 +      END;
17647 +    END;
17648 +  ELSE DO;
17649 +    IF  NOT MISSING(AffluenceGrade ) AND
17650 +      AffluenceGrade  <                  8.5 THEN DO;
17651 +      IF  NOT MISSING(REP_Age ) AND
17652 +        REP_Age  <                 31.5 THEN DO;
17653 +        _NODE_  =                   20;
17654 +        _LEAF_  =                    7;
17655 +        P_TargetBuy0  =     0.17582417582417;
17656 +        P_TargetBuy1  =     0.82417582417582;
17657 +        Q_TargetBuy0  =     0.17582417582417;
17658 +        Q_TargetBuy1  =     0.82417582417582;
17659 +        V_TargetBuy0  =     0.31683168316831;
17660 +        V_TargetBuy1  =     0.68316831683168;
17661 +        I_TargetBuy  = '1' ;
17662 +        U_TargetBuy  =                    1;
17663 +        END;
17664 +      ELSE DO;
17665 +        IF  NOT MISSING(NightRepairProducts ) AND
17666 +          NightRepairProducts  <                  0.5 THEN DO;
17667 +          _NODE_  =                   42;
17668 +          _LEAF_  =                    8;
17669 +          P_TargetBuy0  =     0.73142857142857;
17670 +          P_TargetBuy1  =     0.26857142857142;
17671 +          Q_TargetBuy0  =     0.73142857142857;
17672 +          Q_TargetBuy1  =     0.26857142857142;
17673 +          V_TargetBuy0  =     0.65340909090909;
17674 +          V_TargetBuy1  =      0.3465909090909;
17675 +          I_TargetBuy  = '0' ;
17676 +          U_TargetBuy  =                    0;
17677 +          END;
17678 +        ELSE DO;
17679 +          _ARBFMT_12 = PUT( FacebookLike , BEST12.);
17680 +           %DMNORMIP( _ARBFMT_12);
17681 +          IF _ARBFMT_12 IN ('1' ) THEN DO;
17682 +            _NODE_  =                   65;
17683 +            _LEAF_  =                   10;
17684 +            P_TargetBuy0  =     0.37426900584795;
17685 +            P_TargetBuy1  =     0.62573099415204;
17686 +            Q_TargetBuy0  =     0.37426900584795;
17687 +            Q_TargetBuy1  =     0.62573099415204;
17688 +            V_TargetBuy0  =     0.38541666666666;
17689 +            V_TargetBuy1  =     0.61458333333333;
17690 +            I_TargetBuy  = '1' ;
17691 +            U_TargetBuy  =                    1;
17692 +            END;
17693 +          ELSE DO;
17694 +            _NODE_  =                   64;
17695 +            _LEAF_  =                    9;
17696 +            P_TargetBuy0  =     0.56950672645739;
17697 +            P_TargetBuy1  =      0.4304932735426;
17698 +            Q_TargetBuy0  =     0.56950672645739;
17699 +            Q_TargetBuy1  =      0.4304932735426;
17700 +            V_TargetBuy0  =     0.63084112149532;
17701 +            V_TargetBuy1  =     0.36915887850467;
17702 +            I_TargetBuy  = '0' ;
17703 +            U_TargetBuy  =                    0;
17704 +            END;
17705 +          END;
17706 +        END;
17707 +      END;
17708 +    ELSE DO;
17709 +      _ARBFMT_12 = PUT( MobileApplications , BEST12.);
17710 +       %DMNORMIP( _ARBFMT_12);
17711 +      IF _ARBFMT_12 IN ('0' ) THEN DO;
17712 +        IF  NOT MISSING(AffluenceGrade ) AND
17713 +                          11.5 <= AffluenceGrade  THEN DO;
17714 +          _NODE_  =                   45;
17715 +          _LEAF_  =                   13;
17716 +          P_TargetBuy0  =     0.23170731707317;
17717 +          P_TargetBuy1  =     0.76829268292682;
17718 +          Q_TargetBuy0  =     0.23170731707317;
17719 +          Q_TargetBuy1  =     0.76829268292682;
17720 +          V_TargetBuy0  =     0.19642857142857;
17721 +          V_TargetBuy1  =     0.80357142857142;
17722 +          I_TargetBuy  = '1' ;
17723 +          U_TargetBuy  =                    1;
17724 +          END;
17725 +        ELSE DO;
17726 +          IF  NOT MISSING(LotionProducts ) AND
17727 +                             4.5 <= LotionProducts  THEN DO;
17728 +            _NODE_  =                   67;
17729 +            _LEAF_  =                   12;
17730 +            P_TargetBuy0  =     0.61904761904761;
17731 +            P_TargetBuy1  =     0.38095238095238;
17732 +            Q_TargetBuy0  =     0.61904761904761;
17733 +            Q_TargetBuy1  =     0.38095238095238;
17734 +            V_TargetBuy0  =     0.53658536585365;
17735 +            V_TargetBuy1  =     0.46341463414634;
17736 +            I_TargetBuy  = '0' ;
17737 +            U_TargetBuy  =                    0;
17738 +            END;
17739 +          ELSE DO;
17740 +            _NODE_  =                   66;
17741 +            _LEAF_  =                   11;
17742 +            P_TargetBuy0  =     0.34269662921348;
17743 +            P_TargetBuy1  =     0.65730337078651;
17744 +            Q_TargetBuy0  =     0.34269662921348;
17745 +            Q_TargetBuy1  =     0.65730337078651;
17746 +            V_TargetBuy0  =     0.41545893719806;
17747 +            V_TargetBuy1  =     0.58454106280193;
17748 +            I_TargetBuy  = '1' ;
17749 +            U_TargetBuy  =                    1;
17750 +            END;
17751 +          END;
17752 +        END;
17753 +      ELSE DO;
17754 +        _NODE_  =                   23;
17755 +        _LEAF_  =                   14;
17756 +        P_TargetBuy0  =                 0.15;
17757 +        P_TargetBuy1  =                 0.85;
17758 +        Q_TargetBuy0  =                 0.15;
17759 +        Q_TargetBuy1  =                 0.85;
17760 +        V_TargetBuy0  =     0.18568994889267;
17761 +        V_TargetBuy1  =     0.81431005110732;
17762 +        I_TargetBuy  = '1' ;
17763 +        U_TargetBuy  =                    1;
17764 +        END;
17765 +      END;
17766 +    END;
17767 +  END;
17768 +ELSE DO;
17769 +  IF  NOT MISSING(AffluenceGrade ) AND
17770 +                    12.5 <= AffluenceGrade  THEN DO;
17771 +    _ARBFMT_1 = PUT( REP_Gender , $CHAR1.);
17772 +     %DMNORMIP( _ARBFMT_1);
17773 +    IF _ARBFMT_1 IN ('M' ,'U' ) THEN DO;
17774 +      IF  NOT MISSING(AffluenceGrade ) AND
17775 +                        18.5 <= AffluenceGrade  THEN DO;
17776 +        _NODE_  =                   29;
17777 +        _LEAF_  =                   17;
17778 +        P_TargetBuy0  =     0.16666666666666;
17779 +        P_TargetBuy1  =     0.83333333333333;
17780 +        Q_TargetBuy0  =     0.16666666666666;
17781 +        Q_TargetBuy1  =     0.83333333333333;
17782 +        V_TargetBuy0  =     0.16666666666666;
17783 +        V_TargetBuy1  =     0.83333333333333;
17784 +        I_TargetBuy  = '1' ;
17785 +        U_TargetBuy  =                    1;
17786 +        END;
17787 +      ELSE DO;
17788 +        _NODE_  =                   28;
17789 +        _LEAF_  =                   16;
17790 +        P_TargetBuy0  =     0.81617647058823;
17791 +        P_TargetBuy1  =     0.18382352941176;
17792 +        Q_TargetBuy0  =     0.81617647058823;
17793 +        Q_TargetBuy1  =     0.18382352941176;
17794 +        V_TargetBuy0  =     0.79856115107913;
17795 +        V_TargetBuy1  =     0.20143884892086;
17796 +        I_TargetBuy  = '0' ;
17797 +        U_TargetBuy  =                    0;
17798 +        END;
17799 +      END;
17800 +    ELSE DO;
17801 +      _ARBFMT_12 = PUT( MobileApplications , BEST12.);
17802 +       %DMNORMIP( _ARBFMT_12);
17803 +      IF _ARBFMT_12 IN ('0' ) THEN DO;
17804 +        _NODE_  =                   31;
17805 +        _LEAF_  =                   20;
17806 +        P_TargetBuy0  =     0.58522727272727;
17807 +        P_TargetBuy1  =     0.41477272727272;
17808 +        Q_TargetBuy0  =     0.58522727272727;
17809 +        Q_TargetBuy1  =     0.41477272727272;
17810 +        V_TargetBuy0  =      0.6021505376344;
17811 +        V_TargetBuy1  =     0.39784946236559;
17812 +        I_TargetBuy  = '0' ;
17813 +        U_TargetBuy  =                    0;
17814 +        END;
17815 +      ELSE DO;
17816 +        IF  NOT MISSING(DayCareProducts ) AND
17817 +          DayCareProducts  <                  0.5 THEN DO;
17818 +          _NODE_  =                   58;
17819 +          _LEAF_  =                   18;
17820 +          P_TargetBuy0  =               0.6875;
17821 +          P_TargetBuy1  =               0.3125;
17822 +          Q_TargetBuy0  =               0.6875;
17823 +          Q_TargetBuy1  =               0.3125;
17824 +          V_TargetBuy0  =     0.59090909090909;
17825 +          V_TargetBuy1  =      0.4090909090909;
17826 +          I_TargetBuy  = '0' ;
17827 +          U_TargetBuy  =                    0;
17828 +          END;
17829 +        ELSE DO;
17830 +          _NODE_  =                   59;
17831 +          _LEAF_  =                   19;
17832 +          P_TargetBuy0  =     0.25925925925925;
17833 +          P_TargetBuy1  =     0.74074074074074;
17834 +          Q_TargetBuy0  =     0.25925925925925;
17835 +          Q_TargetBuy1  =     0.74074074074074;
17836 +          V_TargetBuy0  =     0.27536231884057;
17837 +          V_TargetBuy1  =     0.72463768115942;
17838 +          I_TargetBuy  = '1' ;
17839 +          U_TargetBuy  =                    1;
17840 +          END;
17841 +        END;
17842 +      END;
17843 +    END;
17844 +  ELSE DO;
17845 +    _NODE_  =                    6;
17846 +    _LEAF_  =                   15;
17847 +    P_TargetBuy0  =     0.88150029886431;
17848 +    P_TargetBuy1  =     0.11849970113568;
17849 +    Q_TargetBuy0  =     0.88150029886431;
17850 +    Q_TargetBuy1  =     0.11849970113568;
17851 +    V_TargetBuy0  =     0.87782805429864;
17852 +    V_TargetBuy1  =     0.12217194570135;
17853 +    I_TargetBuy  = '0' ;
17854 +    U_TargetBuy  =                    0;
17855 +    END;
17856 +  END;
17857 +
17858 +*****  RESIDUALS R_ *************;
17859 +IF  F_TargetBuy  NE '0'
17860 +AND F_TargetBuy  NE '1'  THEN DO;
17861 +        R_TargetBuy0  = .;
17862 +        R_TargetBuy1  = .;
17863 + END;
17864 + ELSE DO;
17865 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17866 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17867 +       SELECT( F_TargetBuy  );
17868 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17869 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17870 +       END;
17871 + END;
17872 +
17873 +****************************************************************;
17874 +******          END OF DECISION TREE SCORING CODE         ******;
17875 +****************************************************************;
17876 +
17877 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17878  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE3_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17879  quit;
17880  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17881  filename emflow "D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
17882  *------------------------------------------------------------*;
17883  * Tree3: Scoring VALIDATE data;
17884  *------------------------------------------------------------*;
17885  data EMWS1.Tree3_VALIDATE
17886  / view=EMWS1.Tree3_VALIDATE
17887  ;
17888  set EMWS1.Part2_VALIDATE
17889  ;
17890  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas.
17891 +****************************************************************;
17892 +******             DECISION TREE SCORING CODE             ******;
17893 +****************************************************************;
17894 +
17895 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17896 +LENGTH F_TargetBuy  $   12;
17897 +LENGTH I_TargetBuy  $   12;
17898 +LENGTH _WARN_  $    4;
17899 +
17900 +******              LABELS FOR NEW VARIABLES              ******;
17901 +label _NODE_ = 'Node' ;
17902 +label _LEAF_ = 'Leaf' ;
17903 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17904 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17905 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17906 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17907 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17908 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17909 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17910 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17911 +label F_TargetBuy = 'From: TargetBuy' ;
17912 +label I_TargetBuy = 'Into: TargetBuy' ;
17913 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17914 +label _WARN_ = 'Warnings' ;
17915 +
17916 +
17917 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17918 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17919 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17920 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17921 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17922 +
17923 +
17924 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17925 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17926 +
17927 +******             ASSIGN OBSERVATION TO NODE             ******;
17928 +IF  NOT MISSING(REP_Age ) AND
17929 +  REP_Age  <                 44.5 THEN DO;
17930 +  _ARBFMT_1 = PUT( REP_Gender , $CHAR1.);
17931 +   %DMNORMIP( _ARBFMT_1);
17932 +  IF _ARBFMT_1 IN ('M' ,'U' ) THEN DO;
17933 +    IF  NOT MISSING(AffluenceGrade ) AND
17934 +                      10.5 <= AffluenceGrade  THEN DO;
17935 +      IF  NOT MISSING(AffluenceGrade ) AND
17936 +                        15.5 <= AffluenceGrade  THEN DO;
17937 +        _NODE_  =                   19;
17938 +        _LEAF_  =                    6;
17939 +        P_TargetBuy0  =     0.12195121951219;
17940 +        P_TargetBuy1  =      0.8780487804878;
17941 +        Q_TargetBuy0  =     0.12195121951219;
17942 +        Q_TargetBuy1  =      0.8780487804878;
17943 +        V_TargetBuy0  =     0.20930232558139;
17944 +        V_TargetBuy1  =      0.7906976744186;
17945 +        I_TargetBuy  = '1' ;
17946 +        U_TargetBuy  =                    1;
17947 +        END;
17948 +      ELSE DO;
17949 +        IF  NOT MISSING(NightRepairProducts ) AND
17950 +          NightRepairProducts  <                  0.5 THEN DO;
17951 +          _NODE_  =                   36;
17952 +          _LEAF_  =                    4;
17953 +          P_TargetBuy0  =     0.64516129032258;
17954 +          P_TargetBuy1  =     0.35483870967741;
17955 +          Q_TargetBuy0  =     0.64516129032258;
17956 +          Q_TargetBuy1  =     0.35483870967741;
17957 +          V_TargetBuy0  =             0.546875;
17958 +          V_TargetBuy1  =             0.453125;
17959 +          I_TargetBuy  = '0' ;
17960 +          U_TargetBuy  =                    0;
17961 +          END;
17962 +        ELSE DO;
17963 +          _NODE_  =                   37;
17964 +          _LEAF_  =                    5;
17965 +          P_TargetBuy0  =     0.41666666666666;
17966 +          P_TargetBuy1  =     0.58333333333333;
17967 +          Q_TargetBuy0  =     0.41666666666666;
17968 +          Q_TargetBuy1  =     0.58333333333333;
17969 +          V_TargetBuy0  =     0.51351351351351;
17970 +          V_TargetBuy1  =     0.48648648648648;
17971 +          I_TargetBuy  = '1' ;
17972 +          U_TargetBuy  =                    1;
17973 +          END;
17974 +        END;
17975 +      END;
17976 +    ELSE DO;
17977 +      IF  NOT MISSING(REP_Age ) AND
17978 +        REP_Age  <                 29.5 THEN DO;
17979 +        _ARBFMT_12 = PUT( MobileApplications , BEST12.);
17980 +         %DMNORMIP( _ARBFMT_12);
17981 +        IF _ARBFMT_12 IN ('1' ) THEN DO;
17982 +          _NODE_  =                   33;
17983 +          _LEAF_  =                    2;
17984 +          P_TargetBuy0  =     0.09090909090909;
17985 +          P_TargetBuy1  =      0.9090909090909;
17986 +          Q_TargetBuy0  =     0.09090909090909;
17987 +          Q_TargetBuy1  =      0.9090909090909;
17988 +          V_TargetBuy0  =     0.03703703703703;
17989 +          V_TargetBuy1  =     0.96296296296296;
17990 +          I_TargetBuy  = '1' ;
17991 +          U_TargetBuy  =                    1;
17992 +          END;
17993 +        ELSE DO;
17994 +          _NODE_  =                   32;
17995 +          _LEAF_  =                    1;
17996 +          P_TargetBuy0  =     0.73170731707317;
17997 +          P_TargetBuy1  =     0.26829268292682;
17998 +          Q_TargetBuy0  =     0.73170731707317;
17999 +          Q_TargetBuy1  =     0.26829268292682;
18000 +          V_TargetBuy0  =     0.65116279069767;
18001 +          V_TargetBuy1  =     0.34883720930232;
18002 +          I_TargetBuy  = '0' ;
18003 +          U_TargetBuy  =                    0;
18004 +          END;
18005 +        END;
18006 +      ELSE DO;
18007 +        _NODE_  =                   17;
18008 +        _LEAF_  =                    3;
18009 +        P_TargetBuy0  =     0.80877742946708;
18010 +        P_TargetBuy1  =     0.19122257053291;
18011 +        Q_TargetBuy0  =     0.80877742946708;
18012 +        Q_TargetBuy1  =     0.19122257053291;
18013 +        V_TargetBuy0  =     0.79756468797564;
18014 +        V_TargetBuy1  =     0.20243531202435;
18015 +        I_TargetBuy  = '0' ;
18016 +        U_TargetBuy  =                    0;
18017 +        END;
18018 +      END;
18019 +    END;
18020 +  ELSE DO;
18021 +    IF  NOT MISSING(AffluenceGrade ) AND
18022 +      AffluenceGrade  <                  8.5 THEN DO;
18023 +      IF  NOT MISSING(REP_Age ) AND
18024 +        REP_Age  <                 31.5 THEN DO;
18025 +        _NODE_  =                   20;
18026 +        _LEAF_  =                    7;
18027 +        P_TargetBuy0  =     0.17582417582417;
18028 +        P_TargetBuy1  =     0.82417582417582;
18029 +        Q_TargetBuy0  =     0.17582417582417;
18030 +        Q_TargetBuy1  =     0.82417582417582;
18031 +        V_TargetBuy0  =     0.31683168316831;
18032 +        V_TargetBuy1  =     0.68316831683168;
18033 +        I_TargetBuy  = '1' ;
18034 +        U_TargetBuy  =                    1;
18035 +        END;
18036 +      ELSE DO;
18037 +        IF  NOT MISSING(NightRepairProducts ) AND
18038 +          NightRepairProducts  <                  0.5 THEN DO;
18039 +          _NODE_  =                   42;
18040 +          _LEAF_  =                    8;
18041 +          P_TargetBuy0  =     0.73142857142857;
18042 +          P_TargetBuy1  =     0.26857142857142;
18043 +          Q_TargetBuy0  =     0.73142857142857;
18044 +          Q_TargetBuy1  =     0.26857142857142;
18045 +          V_TargetBuy0  =     0.65340909090909;
18046 +          V_TargetBuy1  =      0.3465909090909;
18047 +          I_TargetBuy  = '0' ;
18048 +          U_TargetBuy  =                    0;
18049 +          END;
18050 +        ELSE DO;
18051 +          _ARBFMT_12 = PUT( FacebookLike , BEST12.);
18052 +           %DMNORMIP( _ARBFMT_12);
18053 +          IF _ARBFMT_12 IN ('1' ) THEN DO;
18054 +            _NODE_  =                   65;
18055 +            _LEAF_  =                   10;
18056 +            P_TargetBuy0  =     0.37426900584795;
18057 +            P_TargetBuy1  =     0.62573099415204;
18058 +            Q_TargetBuy0  =     0.37426900584795;
18059 +            Q_TargetBuy1  =     0.62573099415204;
18060 +            V_TargetBuy0  =     0.38541666666666;
18061 +            V_TargetBuy1  =     0.61458333333333;
18062 +            I_TargetBuy  = '1' ;
18063 +            U_TargetBuy  =                    1;
18064 +            END;
18065 +          ELSE DO;
18066 +            _NODE_  =                   64;
18067 +            _LEAF_  =                    9;
18068 +            P_TargetBuy0  =     0.56950672645739;
18069 +            P_TargetBuy1  =      0.4304932735426;
18070 +            Q_TargetBuy0  =     0.56950672645739;
18071 +            Q_TargetBuy1  =      0.4304932735426;
18072 +            V_TargetBuy0  =     0.63084112149532;
18073 +            V_TargetBuy1  =     0.36915887850467;
18074 +            I_TargetBuy  = '0' ;
18075 +            U_TargetBuy  =                    0;
18076 +            END;
18077 +          END;
18078 +        END;
18079 +      END;
18080 +    ELSE DO;
18081 +      _ARBFMT_12 = PUT( MobileApplications , BEST12.);
18082 +       %DMNORMIP( _ARBFMT_12);
18083 +      IF _ARBFMT_12 IN ('0' ) THEN DO;
18084 +        IF  NOT MISSING(AffluenceGrade ) AND
18085 +                          11.5 <= AffluenceGrade  THEN DO;
18086 +          _NODE_  =                   45;
18087 +          _LEAF_  =                   13;
18088 +          P_TargetBuy0  =     0.23170731707317;
18089 +          P_TargetBuy1  =     0.76829268292682;
18090 +          Q_TargetBuy0  =     0.23170731707317;
18091 +          Q_TargetBuy1  =     0.76829268292682;
18092 +          V_TargetBuy0  =     0.19642857142857;
18093 +          V_TargetBuy1  =     0.80357142857142;
18094 +          I_TargetBuy  = '1' ;
18095 +          U_TargetBuy  =                    1;
18096 +          END;
18097 +        ELSE DO;
18098 +          IF  NOT MISSING(LotionProducts ) AND
18099 +                             4.5 <= LotionProducts  THEN DO;
18100 +            _NODE_  =                   67;
18101 +            _LEAF_  =                   12;
18102 +            P_TargetBuy0  =     0.61904761904761;
18103 +            P_TargetBuy1  =     0.38095238095238;
18104 +            Q_TargetBuy0  =     0.61904761904761;
18105 +            Q_TargetBuy1  =     0.38095238095238;
18106 +            V_TargetBuy0  =     0.53658536585365;
18107 +            V_TargetBuy1  =     0.46341463414634;
18108 +            I_TargetBuy  = '0' ;
18109 +            U_TargetBuy  =                    0;
18110 +            END;
18111 +          ELSE DO;
18112 +            _NODE_  =                   66;
18113 +            _LEAF_  =                   11;
18114 +            P_TargetBuy0  =     0.34269662921348;
18115 +            P_TargetBuy1  =     0.65730337078651;
18116 +            Q_TargetBuy0  =     0.34269662921348;
18117 +            Q_TargetBuy1  =     0.65730337078651;
18118 +            V_TargetBuy0  =     0.41545893719806;
18119 +            V_TargetBuy1  =     0.58454106280193;
18120 +            I_TargetBuy  = '1' ;
18121 +            U_TargetBuy  =                    1;
18122 +            END;
18123 +          END;
18124 +        END;
18125 +      ELSE DO;
18126 +        _NODE_  =                   23;
18127 +        _LEAF_  =                   14;
18128 +        P_TargetBuy0  =                 0.15;
18129 +        P_TargetBuy1  =                 0.85;
18130 +        Q_TargetBuy0  =                 0.15;
18131 +        Q_TargetBuy1  =                 0.85;
18132 +        V_TargetBuy0  =     0.18568994889267;
18133 +        V_TargetBuy1  =     0.81431005110732;
18134 +        I_TargetBuy  = '1' ;
18135 +        U_TargetBuy  =                    1;
18136 +        END;
18137 +      END;
18138 +    END;
18139 +  END;
18140 +ELSE DO;
18141 +  IF  NOT MISSING(AffluenceGrade ) AND
18142 +                    12.5 <= AffluenceGrade  THEN DO;
18143 +    _ARBFMT_1 = PUT( REP_Gender , $CHAR1.);
18144 +     %DMNORMIP( _ARBFMT_1);
18145 +    IF _ARBFMT_1 IN ('M' ,'U' ) THEN DO;
18146 +      IF  NOT MISSING(AffluenceGrade ) AND
18147 +                        18.5 <= AffluenceGrade  THEN DO;
18148 +        _NODE_  =                   29;
18149 +        _LEAF_  =                   17;
18150 +        P_TargetBuy0  =     0.16666666666666;
18151 +        P_TargetBuy1  =     0.83333333333333;
18152 +        Q_TargetBuy0  =     0.16666666666666;
18153 +        Q_TargetBuy1  =     0.83333333333333;
18154 +        V_TargetBuy0  =     0.16666666666666;
18155 +        V_TargetBuy1  =     0.83333333333333;
18156 +        I_TargetBuy  = '1' ;
18157 +        U_TargetBuy  =                    1;
18158 +        END;
18159 +      ELSE DO;
18160 +        _NODE_  =                   28;
18161 +        _LEAF_  =                   16;
18162 +        P_TargetBuy0  =     0.81617647058823;
18163 +        P_TargetBuy1  =     0.18382352941176;
18164 +        Q_TargetBuy0  =     0.81617647058823;
18165 +        Q_TargetBuy1  =     0.18382352941176;
18166 +        V_TargetBuy0  =     0.79856115107913;
18167 +        V_TargetBuy1  =     0.20143884892086;
18168 +        I_TargetBuy  = '0' ;
18169 +        U_TargetBuy  =                    0;
18170 +        END;
18171 +      END;
18172 +    ELSE DO;
18173 +      _ARBFMT_12 = PUT( MobileApplications , BEST12.);
18174 +       %DMNORMIP( _ARBFMT_12);
18175 +      IF _ARBFMT_12 IN ('0' ) THEN DO;
18176 +        _NODE_  =                   31;
18177 +        _LEAF_  =                   20;
18178 +        P_TargetBuy0  =     0.58522727272727;
18179 +        P_TargetBuy1  =     0.41477272727272;
18180 +        Q_TargetBuy0  =     0.58522727272727;
18181 +        Q_TargetBuy1  =     0.41477272727272;
18182 +        V_TargetBuy0  =      0.6021505376344;
18183 +        V_TargetBuy1  =     0.39784946236559;
18184 +        I_TargetBuy  = '0' ;
18185 +        U_TargetBuy  =                    0;
18186 +        END;
18187 +      ELSE DO;
18188 +        IF  NOT MISSING(DayCareProducts ) AND
18189 +          DayCareProducts  <                  0.5 THEN DO;
18190 +          _NODE_  =                   58;
18191 +          _LEAF_  =                   18;
18192 +          P_TargetBuy0  =               0.6875;
18193 +          P_TargetBuy1  =               0.3125;
18194 +          Q_TargetBuy0  =               0.6875;
18195 +          Q_TargetBuy1  =               0.3125;
18196 +          V_TargetBuy0  =     0.59090909090909;
18197 +          V_TargetBuy1  =      0.4090909090909;
18198 +          I_TargetBuy  = '0' ;
18199 +          U_TargetBuy  =                    0;
18200 +          END;
18201 +        ELSE DO;
18202 +          _NODE_  =                   59;
18203 +          _LEAF_  =                   19;
18204 +          P_TargetBuy0  =     0.25925925925925;
18205 +          P_TargetBuy1  =     0.74074074074074;
18206 +          Q_TargetBuy0  =     0.25925925925925;
18207 +          Q_TargetBuy1  =     0.74074074074074;
18208 +          V_TargetBuy0  =     0.27536231884057;
18209 +          V_TargetBuy1  =     0.72463768115942;
18210 +          I_TargetBuy  = '1' ;
18211 +          U_TargetBuy  =                    1;
18212 +          END;
18213 +        END;
18214 +      END;
18215 +    END;
18216 +  ELSE DO;
18217 +    _NODE_  =                    6;
18218 +    _LEAF_  =                   15;
18219 +    P_TargetBuy0  =     0.88150029886431;
18220 +    P_TargetBuy1  =     0.11849970113568;
18221 +    Q_TargetBuy0  =     0.88150029886431;
18222 +    Q_TargetBuy1  =     0.11849970113568;
18223 +    V_TargetBuy0  =     0.87782805429864;
18224 +    V_TargetBuy1  =     0.12217194570135;
18225 +    I_TargetBuy  = '0' ;
18226 +    U_TargetBuy  =                    0;
18227 +    END;
18228 +  END;
18229 +
18230 +*****  RESIDUALS R_ *************;
18231 +IF  F_TargetBuy  NE '0'
18232 +AND F_TargetBuy  NE '1'  THEN DO;
18233 +        R_TargetBuy0  = .;
18234 +        R_TargetBuy1  = .;
18235 + END;
18236 + ELSE DO;
18237 +       R_TargetBuy0  =  -P_TargetBuy0 ;
18238 +       R_TargetBuy1  =  -P_TargetBuy1 ;
18239 +       SELECT( F_TargetBuy  );
18240 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
18241 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
18242 +       END;
18243 + END;
18244 +
18245 +****************************************************************;
18246 +******          END OF DECISION TREE SCORING CODE         ******;
18247 +****************************************************************;
18248 +
18249 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18250  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE3_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
18251  quit;
18252  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
18254  proc sort data=WORK.EM_USER_REPORT;
18255  by ID VIEW;
18256  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18257  *------------------------------------------------------------*;
18258  * Tree3: Computing metadata for TRAIN data;
18259  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
18656  data EMWS1.Tree3_EMINFO;
18657  length TARGET KEY $32 DATA $43;
18658  input TARGET KEY DATA $;
18659  cards;
 
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18663  run;
18664  proc sort data = EMWS1.Tree3_EMINFO NOTHREADS;
18665  by TARGET KEY;
18666  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE3_EMINFO.
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18667  proc sort data = EMWS1.Ids2_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18668  by TARGET KEY;
18669  run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS2_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18670  proc sort data = EMWS1.Tree3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18671  by TARGET KEY;
18672  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE3_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18673  data EMWS1.Tree3_EMINFO;
18674  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18675  by TARGET KEY;
18676  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE3_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18677  proc datasets lib=work nolist;
18678  delete TEMP_INFO SORTEDEMINFO;
18679  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18680  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: View EMWS1.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                May 09, 2018
Time:                14:20:05
*------------------------------------------------------------*
18704  data EMWS1.Tree3_EMOUTFIT;
18705  set EMWS1.Tree3_EMOUTFIT;
18706  length TargetLabel $200;
18707  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18708  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMOUTFIT.
NOTE: The data set EMWS1.TREE3_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18709  proc sort data=EMWS1.Tree3_EMREPORTFIT nothreads;
18710  by TARGET;
18711  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMREPORTFIT.
NOTE: The data set EMWS1.TREE3_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18712  %let _EMwarndup = 0;
18713  %let _EMtargetdup =;
18714  %let _EMASEtargetdup =;
18715  data _null_;
18716  set EMWS1.Tree3_EMOUTFIT;
18717  if .<_ASE_<0.000001 then do;
18718  call symput('_EMwarndup', '1');
18719  call symput('_EMtargetdup', target);
18720  call symput('_EMASEtargetdup', put(_ASE_, best.));
18721  end;
18722  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18723  %let EMEXCEPTIONSTRING=;
18724  *------------------------------------------------------------*;
18725  * REPORT: Tree3;
18726  *------------------------------------------------------------*;
18727  %let EM_ACTION = REPORT;
18728  %let syscc = 0;
18729  %macro main;
18730
18731    %if %upcase(&EM_ACTION) = CREATE %then %do;
18732      filename temp catalog 'sashelp.emmodl.tree_create.source';
18733      %include temp;
18734      filename temp;
18735
18736      %em_tree_create;
18737    %end;
18738
18739     %else
18740     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18741
18742         filename temp catalog 'sashelp.emmodl.tree_train.source';
18743         %include temp;
18744         filename temp;
18745         %em_tree_train;
18746     %end;
18747
18748    %else
18749    %if %upcase(&EM_ACTION) = SCORE %then %do;
18750      filename temp catalog 'sashelp.emmodl.tree_score.source';
18751      %include temp;
18752      filename temp;
18753
18754      %em_tree_score;
18755
18756    %end;
18757
18758    %else
18759    %if %upcase(&EM_ACTION) = REPORT %then %do;
18760
18761         filename temp catalog 'sashelp.emmodl.tree_report.source';
18762         %include temp;
18763         filename temp;
18764
18765         %em_tree_report;
18766     %end;
18767
18768    %else
18769    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18770
18771         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18772         %include temp;
18773         filename temp;
18774         %EM_TREE_OPENTREEVIEWER;
18775
18776     %end;
18777
18778    %else
18779    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18780
18781         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18782         %include temp;
18783         filename temp;
18784         %EM_TREE_CLOSETREEVIEWER;
18785
18786     %end;
18787
18788
18789     %doendm:
18790  %mend main;
18791
18792  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18794 +%macro em_tree_makePlotDs( multipleTar= );
18796 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18797 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18798 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18799 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18801 +  /* determine if validation statistics will be displayed */
18802 +  %let validflag=N;
18803 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18804 +    /* determine if validation data exists */
18805 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18806 +      %let validflag=Y;
18807 +    %end;
18808 +  %end;
18810 +   /* retrieve name of decmeta even in presence of multiple targets */
18811 +   %let decmeta = ;
18812 +   %if &EM_DEC_DECMETA eq %then %do;
18813 +     data _Target;
18814 +       set &em_data_variableset;
18815 +       where ROLE='TARGET' and USE in('D', 'Y');
18816 +       keep NAME;
18817 +     run;
18818 +     proc sort data=_Target;
18819 +       by NAME;
18820 +     run;
18821 +     proc sort data=EM_TARGETDECINFO;
18822 +       by TARGET;
18823 +     run;
18824 +     data _Target;
18825 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18826 +       by NAME;
18827 +       if _a then do;
18828 +         call symput('decmeta', trim(DECMETA));
18829 +       end;
18830 +     run;
18831 +     proc delete data=_Target;run;
18832 +   %end;
18833 +   %else %let decmeta = &EM_DEC_DECMETA;
18836 +  /* retrieve targetEvent from decmeta */
18837 +  %let targetEvent=;
18838 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18839 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18840 +      data _null_;
18841 +       set &DECMETA(where=(_TYPE_="TARGET"));
18842 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18843 +      run;
18844 +    %end;
18845 +  %end;
18847 +  /* retrieve predicted var for targetEvent from decmeta */
18848 +  %let predTarget=;
18849 +  %let predLvl=;
18850 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18851 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18852 +      data _null_;
18853 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18854 +       call symput('predTarget', strip(VARIABLE));
18855 +       call symput('predLvl', strip(LEVEL));
18856 +      run;
18857 +    %end;
18858 +  %end;
18859 +  %else %do;
18860 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18861 +      data _null_;
18862 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18863 +       call symput('predTarget', strip(VARIABLE));
18864 +      run;
18865 +    %end;
18866 +  %end;
18868 +  /* create BelowText value */
18869 +  data belowtext;
18870 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18871 +    keep node belowtext;
18872 +  run;
18874 +  /* replace belowtext with variable label if it exists */
18875 +  data belowtext2;
18876 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18877 +    keep node belowtextlbl;
18878 +  run;
18880 +  proc sort data=belowtext; by node; run;
18881 +  proc sort data=belowtext2; by node; run;
18883 +  data belowtext;
18884 +    merge belowtext belowtext2(in=_a);
18885 +    by node;
18886 +    if _a then belowtext=belowtextlbl;
18887 +    keep node belowtext;
18888 +  run;
18890 +  /* create AboveText value */
18891 +  data abovetext;
18892 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18893 +  run;
18894 +  proc sort data=abovetext; by node numeric_value; run;
18896 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18897 +  data abovetext;
18898 +    set abovetext(rename=(node=parent));
18899 +    by parent numeric_value;
18900 +    retain abovetext tempstring flag branch origval origchar ;
18901 +    length abovetext $256;
18902 +    length tempstring origchar $64;
18904 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18905 +      if first.parent then do;
18906 +        if missing(character_value) then do;
18907 +          numeric_value = round(numeric_value, &sp_precision);
18908 +          abovetext = "< "||strip(NUMERIC_VALUE);
18909 +          branch = 1;
18910 +          origval = numeric_value;
18911 +          output;
18912 +        end;
18913 +        else do;
18914 +          abovetext = "< "||strip(CHARACTER_VALUE);
18915 +          branch = 1;
18916 +          origchar = character_value;
18917 +          output;
18918 +        end;
18920 +        if first.parent AND last.parent then do;
18921 +          if missing(character_value) then do;
18922 +            numeric_value = round(numeric_value, &sp_precision);
18923 +            branch = branch + 1;
18924 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18925 +            output;
18926 +          end;
18927 +          else do;
18928 +            branch = branch + 1;
18929 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18930 +            output;
18931 +          end;
18932 +        end;
18933 +      end;
18934 +      else if last.parent then do;
18935 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18936 +          if missing(character_value) then do;
18937 +            numeric_value = round(numeric_value, &sp_precision);
18938 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18939 +          end;
18940 +          else do;
18941 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18942 +          end;
18943 +          branch = branch + 1;
18944 +          output;
18946 +          if missing(character_value) then do;
18947 +            numeric_value = round(numeric_value, &sp_precision);
18948 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18949 +          end;
18950 +          else do;
18951 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18952 +          end;
18953 +          branch = branch + 1;
18954 +          output;
18955 +        end;
18956 +        else do;
18957 +          if missing(character_value) then do;
18958 +            numeric_value = round(numeric_value, &sp_precision);
18959 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18960 +          end;
18961 +          else do;
18962 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18963 +          end;
18964 +          branch = branch + 1;
18965 +          output;
18966 +        end;
18967 +      end;
18968 +      else do;
18969 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18970 +          if missing(character_value) then do;
18971 +            numeric_value = round(numeric_value,&sp_precision);
18972 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18973 +            origval = numeric_value;
18974 +          end;
18975 +          else do;
18976 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18977 +            origchar = character_value;
18978 +          end;
18979 +          branch = branch + 1;
18980 +          output;
18982 +        end;
18983 +        else do;
18984 +          if missing(character_value) then do;
18985 +            numeric_value = round(numeric_value, &sp_precision);
18986 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18987 +            origval = numeric_value;
18988 +          end;
18989 +          else do;
18990 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18991 +            origval = character_value;
18992 +          end;
18993 +          branch = branch + 1;
18994 +          output;
18995 +        end;
18996 +      end;
18997 +    end;
18998 +    else do;
18999 +       if first.numeric_value then do;
19000 +         flag = 0;
19001 +         abovetext = strip(CHARACTER_VALUE);
19002 +         branch = numeric_value;
19003 +         if first.numeric_value AND last.numeric_value then do;
19004 +           output;
19005 +         end;
19006 +       end;
19007 +       else if last.numeric_value then do;
19008 +         if flag=0 then do;
19009 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19010 +           length = length(strip(tempstring));
19011 +           if length < 32 then do;
19012 +             abovetext = strip(tempstring);
19013 +           end;
19014 +           else do;
19015 +             abovetext = strip(abovetext)||", ...";
19016 +             flag = 1;
19017 +           end;
19018 +         end;
19019 +         branch = numeric_value;
19020 +         output;
19021 +       end;
19022 +       else do;
19023 +         if flag=0 then do;
19024 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19025 +           length = length(strip(tempstring));
19026 +           if length < 32 then do;
19027 +             abovetext = strip(tempstring);
19028 +           end;
19029 +           else do;
19030 +             abovetext = strip(abovetext)||", ...";
19031 +             flag=1;
19032 +           end;
19033 +         end;
19034 +         branch = numeric_value;
19035 +       end;
19036 +    end;
19037 +    keep parent branch abovetext;
19038 +  run;
19040 +  /* Missing value to abovetext */
19041 +  data tempmissing;
19042 +    set &EM_USER_OUTRULES;
19043 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
19044 +    rename node=parent numeric_value=branch character_value=misschar;
19045 +  run;
19048 +  proc sort data=abovetext; by parent branch; run;
19049 +  proc sort data=tempmissing; by parent branch; run;
19050 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
19052 +  data tempoutnodes;
19053 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
19054 +    by parent branch;
19055 +    length traintotal validtotal 8;
19056 +    retain traintotal validtotal;
19058 +    if _a then do;
19059 +      if ^MISSING(abovetext) then do;
19060 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
19061 +      end;
19062 +      else do;
19063 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
19064 +      end;
19065 +    end;
19066 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
19068 +    if node=1 then do;
19069 +      traintotal = N;
19070 +      validtotal=VN;
19071 +    end;
19073 +    drop role rank stat misschar belowtext;
19074 +  run;
19075 +  proc sort data=tempoutnodes; by node; run;
19076 +  proc sort data=belowtext; by node; run;
19078 +  data tempoutnodes;
19079 +    merge tempoutnodes belowtext;
19080 +    by node;
19082 +  run;
19084 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19085 +  %let adjusted = N;
19086 +  %let npriors = 0;
19087 +  data _null_ ;
19088 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19089 +    if eof then do ;
19090 +      call symput("npriors" , strip(put(_N_,best.))) ;
19091 +    end;
19092 +  run;
19093 +  %if &npriors gt 0 %then %let adjusted=Y;
19096 +  /* create a table with targetUsed and targetLevel columns for each node */
19097 +  data temptarmeta;
19098 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19099 +    %if &multipleTar eq N %then %do;
19100 +      AND USE in ('D', 'Y')
19101 +    %end;
19102 +    ));
19103 +    length TARGET $32;
19104 +    Target=name;
19105 +    keep target level;
19106 +  run;
19108 +  %if &multipleTar eq Y %then %do;
19109 +    data temptargetused;
19110 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19111 +      keep node target;
19112 +    run;
19113 +    proc sort data=temptargetused; by target; run;
19114 +    proc sort data=temptarmeta; by target; run;
19115 +    data temptargetused;
19116 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19117 +      by target;
19118 +      if _a and _b;
19119 +    run;
19120 +  %end;
19121 +  %else %do;
19122 +    data temptargetused;
19123 +      set &EM_USER_OUTSTATS;
19124 +      length target $32 tarlevel $10;
19125 +      target="%EM_TARGET";
19126 +      tarlevel="%EM_TARGET_LEVEL";
19127 +      keep node target tarlevel;
19128 +    run;
19129 +    proc sort data=temptargetused nodupkey; by node; run;
19130 +  %end;
19132 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
19133 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19134 +  proc sort data=temptargetused; by node; run;
19137 +  /* create tables for all interval targets as well as all class targets */
19138 +  data tempinterval tempclass;
19139 +    merge tempoutstats temptargetused( rename=(target=targetused));
19140 +    by node;
19141 +    %if "&multipleTar" eq "Y" %then %do;
19142 +      if ((missing(Target)) OR (target=targetused ));
19143 +    %end;
19145 +    if tarlevel="INTERVAL" then output tempinterval;
19146 +    else output tempclass;
19147 +  run;
19149 +  /* initialize intTarget and classTarget flags */
19150 +  %let em_intNobs =0;
19151 +  %let em_classNobs = 0;
19152 +  %let em_intTarget= N;
19153 +  %let em_classTarget= N;
19155 +  proc sql;
19156 +    reset noprint;
19157 +    select count(*) into :em_intNobs from tempinterval;
19158 +  quit;
19159 +  proc sql;
19160 +    reset noprint;
19161 +    select count(*) into :em_classNobs from tempclass;
19162 +  quit;
19164 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19165 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19167 +  /* retrieve all information for interval targets */
19168 +  %if &em_intTarget eq Y %then %do;
19170 +    /* determine if leaf variable exists */
19171 +    %let dsid=%sysfunc(open(tempinterval,i));
19172 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19173 +    %let rc=%sysfunc(close(&dsid));
19175 +    proc transpose data=tempinterval
19176 +      %if &leafexists %then %do;
19177 +        (drop=leaf)
19178 +      %end;
19179 +      %if &validexist %then %do;
19180 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19181 +      %end;
19182 +      %else %do;
19183 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19184 +      %end;
19185 +      by node;
19186 +      id statname;
19187 +    run;
19188 +    data tempinterval;
19189 +      set tempinterval;
19190 +      if missing(N) then delete;
19191 +    run;
19192 +  %end;
19194 +  /* retrieve all information for class targets */
19195 +  %if &em_classTarget eq Y %then %do;
19196 +    proc sort data=tempclass; by node category; run;
19197 +    %if &validflag eq N %then %do;
19198 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19199 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19200 +    %end;
19201 +    %else %do;
19202 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19203 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19204 +    %end;
19205 +      set tempclass;
19207 +      %if &validflag eq N %then %do;
19208 +        %if "&adjusted" eq "N" %then %do;
19209 +          if statname="N" then output tempn;
19210 +        %end;
19211 +        %else %do;
19212 +          if statname="NPRIORS" then output tempn;
19213 +        %end;
19214 +        else if statname="PREDICTION" then output temppredict;
19215 +        else if statname="PROBABILITY" then output tempprob;
19216 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19217 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19218 +      %end;
19219 +      %else %do;
19220 +        %if "&adjusted" eq "N" %then %do;
19221 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19222 +        %end;
19223 +        %else %do;
19224 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19225 +        %end;
19226 +        else if statname="PREDICTION" then output temppredict;
19227 +        else if statname="PROBABILITY" then output tempprob;
19228 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19229 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19230 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19231 +      %end;
19232 +    run;
19235 +    /* determine if profit/loss exists in tempprofit */
19236 +    %let em_profitflag=0;
19237 +    %let em_lossflag=0;
19238 +    proc sql;
19239 +      reset noprint;
19240 +      select count(*) into :em_profitflag from tempprofit;
19241 +    quit;
19242 +    proc sql;
19243 +      reset noprint;
19244 +      select count(*) into :em_lossflag from temploss;
19245 +    quit;
19247 +    %if &validFlag eq Y %then %do;
19248 +      proc transpose data=tempn
19249 +        %if "&adjusted" eq "N" %then %do;
19250 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19251 +        %end;
19252 +        %else %do;
19253 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19254 +        %end;
19255 +        by node;
19256 +        id statname;
19257 +      run;
19258 +      %if &em_profitflag ne 0 %then %do;
19259 +        proc transpose data=tempprofit out=tempprofit;
19260 +          by node category;
19261 +          id statname ;
19262 +        run;
19263 +      %end;
19264 +      %if &em_lossflag ne 0 %then %do;
19265 +        proc transpose data=temploss out=temploss;
19266 +          by node category;
19267 +          id statname ;
19268 +        run;
19269 +      %end;
19270 +      data tempprob;
19271 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19272 +        by node
19273 +        %if &multipleTar eq Y %then %do;
19274 +          target
19275 +        %end;
19276 +        category;
19277 +      run;
19278 +    %end;
19280 +    /* store percentcorrect value */
19281 +    data temppredict;
19282 +      merge tempprob temppredict(in=_a);
19283 +      by node category;
19284 +      if _a then do;
19285 +        percentCorrect = statvalue;
19286 +        %if &validFlag eq Y %then %do;
19287 +          vpercentCorrect= vstatvalue;
19288 +        %end;
19289 +      end;
19290 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19291 +      %if &validFlag eq Y %then %do;
19292 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19293 +      %end;
19294 +      ;
19295 +      if missing(percentCorrect) then delete;
19296 +      drop target;
19297 +    run;
19299 +    /* build profittext */
19300 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19301 +      data tempprofittext(keep= node profittext profitloss);
19302 +        length profittext $800 profitloss 8.;
19303 +        retain profittext profitloss;
19305 +        merge tempprob
19306 +        %if &em_profitflag ne 0 %then %do;
19307 +          tempprofit
19308 +        %end;
19309 +        %else %if &em_lossflag ne 0 %then %do;
19310 +          temploss
19311 +        %end;
19312 +        ;
19313 +        by node category;
19315 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19316 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19317 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19318 +          %let profittype = ALL;
19319 +        %end;
19321 +        /* create the profitloss variable for nodecolor if selected */
19322 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19324 +        %if "&profittype" eq "ALL" %then %do;
19325 +          if strip(CATEGORY)="&targetEvent" then do;
19326 +            profitloss=statvalue;
19327 +          end;
19328 +          if first.node then do;
19329 +            %if &validFlag eq N %then %do;
19330 +             %if &em_profitflag ne 0 %then %do;
19331 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19332 +             %end;
19333 +             %if &em_lossflag ne 0 %then %do;
19334 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19335 +             %end;
19336 +            %end;
19337 +            %else %do;
19338 +             %if &em_profitflag ne 0 %then %do;
19339 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19339!+;
19340 +             %end;
19341 +             %if &em_lossflag ne 0 %then %do;
19342 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19343 +             %end;
19344 +            %end;
19345 +          end;
19346 +          else if last.node then do;
19347 +            %if &validFlag eq N %then %do;
19348 +             %if &em_profitflag ne 0 %then %do;
19349 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19350 +             %end;
19351 +             %if &em_lossflag ne 0 %then %do;
19352 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19353 +             %end;
19354 +             /*if CATEGORY="&targetEvent" then do;
19355 +               profitloss=statvalue;
19356 +             end;*/
19357 +            %end;
19358 +            %else %do;
19359 +             %if &em_profitflag ne 0 %then %do;
19360 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19360!+14.&EM_PROPERTY_SPLITPRECISION);
19361 +                if CATEGORY="&targetEvent" then do;
19362 +                 profitloss=ALTERNATIVE_PROFIT;
19363 +                end;
19364 +             %end;
19365 +             %if &em_lossflag ne 0 %then %do;
19366 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19366!+14.&EM_PROPERTY_SPLITPRECISION);
19367 +                if CATEGORY="&targetEvent" then do;
19368 +                  profitloss=ALTERNATIVE_LOSS;
19369 +                end;
19370 +             %end;
19371 +            %end;
19372 +            output;
19373 +          end;
19374 +          else do;
19375 +            %if &validFlag eq N %then %do;
19376 +             %if &em_profitflag ne 0 %then %do;
19377 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19378 +             %end;
19379 +             %if &em_lossflag ne 0 %then %do;
19380 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19381 +             %end;
19382 +            %end;
19383 +            %else %do;
19384 +             %if &em_profitflag ne 0 %then %do;
19385 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19385!+14.&EM_PROPERTY_SPLITPRECISION);
19386 +             %end;
19387 +             %if &em_lossflag ne 0 %then %do;
19388 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19388!+14.&EM_PROPERTY_SPLITPRECISION);
19389 +             %end;
19390 +            %end;
19391 +          end;
19392 +        %end;
19393 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19394 +          if strip(CATEGORY) = "&targetevent" then do;
19395 +            %if &validFlag eq N %then %do;
19396 +             %if &em_profitflag ne 0 %then %do;
19397 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19398 +             %end;
19399 +             %if &em_lossflag ne 0 %then %do;
19400 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19401 +             %end;
19402 +             profitloss=statvalue;
19403 +            %end;
19404 +            %else %do;
19405 +             %if &em_profitflag ne 0 %then %do;
19406 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19406!+;
19407 +                profitloss=ALTERNATIVE_PROFIT;
19408 +             %end;
19409 +             %if &em_lossflag ne 0 %then %do;
19410 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19411 +                profitloss=ALTERNATIVE_LOSS;
19412 +             %end;
19413 +            %end;
19414 +            output;
19415 +          end;
19416 +        %end;
19417 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19418 +          if strip(CATEGORY) = "&targetevent" then do;
19419 +            %if &validFlag eq N %then %do;
19420 +             profitloss=statvalue;
19421 +            %end;
19422 +            %else %do;
19423 +             %if &em_profitflag ne 0 %then %do;
19424 +                profitloss=ALTERNATIVE_PROFIT;
19425 +             %end;
19426 +             %if &em_lossflag ne 0 %then %do;
19427 +                profitloss=ALTERNATIVE_LOSS;
19428 +             %end;
19429 +            %end;
19430 +            output;
19431 +          end;
19432 +        %end;
19433 +      run;
19434 +    %end;
19436 +    data tempprob(keep= node probtext);
19437 +      length probtext $800;
19438 +      retain probtext;
19439 +      set tempprob ;
19440 +      by node;
19442 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19443 +      %let probtype = &EM_PROPERTY_TARGET;
19444 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19445 +        %let probtype = ALL;
19446 +      %end;
19448 +      %if "&probtype" eq "ALL" %then %do;
19449 +        if first.node then do;
19450 +          %if &validFlag eq N %then %do;
19451 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19452 +          %end;
19453 +          %else %do;
19454 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19455 +          %end;
19456 +        end;
19457 +        else if last.node then do;
19458 +          %if &validFlag eq N %then %do;
19459 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19460 +          %end;
19461 +          %else %do;
19462 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19463 +          %end;
19464 +          output;
19465 +        end;
19466 +        else do;
19467 +          %if &validFlag eq N %then %do;
19468 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19469 +          %end;
19470 +          %else %do;
19471 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19472 +          %end;
19473 +        end;
19474 +      %end;
19475 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19476 +        if strip(CATEGORY) = "&targetevent" then do;
19477 +          %if &validFlag eq N %then %do;
19478 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19479 +          %end;
19480 +          %else %do;
19481 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19482 +          %end;
19483 +          output;
19484 +        end;
19485 +      %end;
19486 +      %else %if "&probtype" eq "NONE" %then %do;
19487 +        if last.node then do;
19488 +          output;
19489 +        end;
19490 +      %end;
19491 +    run;
19492 +  %end;
19494 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19496 +  %let oldexists=0;
19497 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19498 +     data old_tree_plot;
19499 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19500 +        rename nodecolor=oldnodecolor;
19501 +     run;
19503 +     proc sort data=old_tree_plot;
19504 +        by node;
19505 +     run;
19507 +     %let oldexists=1;
19508 +  %end;
19510 +  data &EM_USER_TREE_PLOT;
19511 +    length textall $800;
19512 +    merge tempoutnodes temptargetused
19514 +    %if &em_intTarget eq Y %then %do;
19515 +      tempinterval
19516 +    %end;
19518 +    %if &em_classTarget eq Y %then %do;
19520 +      %if &validFlag eq N %then %do;
19521 +        tempn(rename=(statvalue=N))
19522 +      %end;
19523 +      %else %do;
19524 +        tempn
19525 +      %end;
19527 +      temppredict tempprob
19529 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19530 +        tempprofittext
19531 +      %end;
19532 +    %end;
19533 +    ;
19534 +    by node;
19536 +    /* build nodetext based on user selection */
19537 +    textall="";
19539 +    %if &em_intTarget eq Y %then %do;
19540 +    if tarlevel="INTERVAL" then do;
19541 +      /* Nodeid */
19542 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19543 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19544 +      %end;
19546 +      /* Target identifier if multiple targets are used */
19547 +      %if "&multipleTar" eq "Y" %then %do;
19548 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19549 +      %end;
19551 +      %if &validFlag eq Y %then %do;
19552 +         /* Column labels displayed in validflag eq Y only */
19553 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19554 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19554!+noquote ))";
19555 +         %end;
19557 +         /* Average values */
19558 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19559 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19560 +         %end;
19562 +         /* RASE */
19563 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19564 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19565 +         %end;
19567 +         /* Count */
19568 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19569 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19570 +         %end;
19571 +      %end;
19572 +      %else %do;
19573 +         /* Average values */
19574 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19575 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19576 +         %end;
19578 +         /* RASE */
19579 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19580 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19581 +         %end;
19583 +         /* Count */
19584 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19585 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19586 +         %end;
19587 +      %end;
19589 +      /* nodecolor */
19590 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19591 +        nodecolor=PREDICTION;
19592 +      %end;
19593 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19594 +        nodecolor=RASE;
19595 +      %end;
19596 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19597 +        nodecolor=1;
19598 +      %end;
19600 +    end;
19601 +    %end;
19602 +    %if &em_classTarget eq Y %then %do;
19603 +    if tarlevel^="INTERVAL" then  do;
19605 +      /* Nodeid */
19606 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19607 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19608 +      %end;
19609 +      /* Target identifier if multiple targets are used */
19610 +      %if "&multipleTar" eq "Y" %then %do;
19611 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19612 +      %end;
19614 +      /* Predicted values */
19615 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19616 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19617 +      %end;
19619 +      /* Column labels displayed in validflag eq Y only */
19620 +      %if "&ValidFlag" eq "Y" %then %do;
19621 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19622 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19622!+noquote ))";
19623 +        %end;
19624 +      %end;
19626 +      /* Target Values */
19627 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19628 +        textall=strip(textall)||"0A"x||strip(probtext);
19629 +      %end;
19631 +      /* include profit or loss for all target levels */
19632 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19633 +        textall=strip(textall)||"0A"x||strip(profittext);
19634 +      %end;
19636 +      %if &validFlag eq N %then %do;
19637 +        /* Percent Correct */
19638 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19639 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19640 +        %end;
19642 +         /* Count */
19643 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19644 +          %if "&adjusted" eq "N" %then %do;
19645 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19646 +          %end;
19647 +          %else %do;
19648 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19649 +          %end;
19650 +         %end;
19651 +      %end;
19652 +      %else %do;
19653 +        /* Percent Correct */
19654 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19655 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19656 +        %end;
19658 +         /* Count */
19659 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19660 +          %if "&adjusted" eq "N" %then %do;
19661 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19662 +          %end;
19663 +          %else %do;
19664 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19665 +          %end;
19666 +         %end;
19667 +      %end;
19669 +      /* nodecolor */
19670 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19671 +       %if &multipleTar ne Y %then %do;
19672 +        nodecolor=&predTarget;
19673 +       %end;
19674 +       %else %do;
19675 +         nodecolor=percentcorrect;
19676 +       %end;
19677 +      %end;
19678 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19679 +        nodecolor=percentcorrect;
19680 +      %end;
19681 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19682 +        nodecolor=1;
19683 +      %end;
19684 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19685 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19686 +          nodecolor=percentcorrect;
19687 +        %end;
19688 +        %else %do;
19689 +          nodecolor=profitloss;
19690 +        %end;
19691 +      %end;
19693 +    end;
19694 +    %end;
19695 +    %if &em_intTarget eq Y %then %do;
19696 +     drop  PREDICTION  TARGET TARLEVEL
19697 +     %if &ValidFlag eq Y %then %do;
19698 +         VPREDICTION
19699 +     %end;
19700 +     ;
19701 +    %end;
19702 +    %if &em_classTarget eq Y %then %do;
19703 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19704 +     %if &ValidFlag eq Y %then %do;
19705 +         VSTATVALUE
19706 +     %end;
19707 +     ;
19708 +    %end;
19710 +  run;
19712 +  /* add leaf index information to plotds - based on primary target only*/
19713 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19714 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19715 +      set &EM_USER_OUTSTATS;
19716 +      if ((statname="PROBABILITY"
19717 +      %if &validexist %then %do;
19718 +       or statname="VALID: PROBABILITY"
19719 +      %end;
19720 +      ) AND (CATEGORY="&TARGETEVENT")
19721 +      %if "&multipleTar" eq "Y" %then %do;
19722 +        AND (Target="%EM_TARGET")
19723 +      %end;
19724 +      );
19725 +    run;
19727 +    %if &validexist %then %do;
19728 +      proc sort data=tempprob; by node; run;
19729 +      %let vpredTarget = V%substr(&predTarget, 2);
19730 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19731 +         by node;
19732 +         id statname;
19733 +      run;
19734 +    %end;
19735 +  %end;
19736 +  %else %do;
19737 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19738 +      set &EM_USER_OUTSTATS;
19739 +      if ((statname="PREDICTION"
19740 +      %if &validexist %then %do;
19741 +       or statname="VALID: PREDICTION"
19742 +      %end;
19743 +      )
19744 +      %if "&multipleTar" eq "Y" %then %do;
19745 +        AND (Target="%EM_TARGET")
19746 +      %end;
19747 +      );
19748 +    run;
19749 +    %if &validexist %then %do;
19750 +      proc sort data=tempprob; by node; run;
19751 +      %let vpredTarget = V%substr(&predTarget, 2);
19752 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19753 +         by node;
19754 +         id statname;
19755 +      run;
19756 +    %end;
19757 +  %end;
19759 +  proc sort data=tempprob; by node; run;
19760 +  data tempoutnodes;
19761 +    merge tempoutnodes tempprob;
19762 +    by node;
19763 +  run;
19765 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19766 +  data tempnodes;
19767 +    retain traintotal validtotal;
19768 +    set tempnodes(where=(leaf ne . ));
19769 +    tprob=round(&predTarget, .01);
19770 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19771 +      percevent_train=round(tprob*100, .01);
19772 +    %end;
19773 +    %else %do;
19774 +      percevent_train=tprob;
19775 +    %end;
19777 +    perc_train=round((n/traintotal)*100, 0.01);
19778 +    /* leafwidth already has a *10 multiplier */
19779 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19781 +    %if &validexist %then %do;
19782 +      %let vpredTarget = V%substr(&predTarget,2);
19783 +      vprob=round(&vpredTarget, .01);
19784 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19785 +        percevent_valid=round(vprob*100, .01);
19786 +      %end;
19787 +      %else %do;
19788 +        percevent_valid=vprob;
19789 +      %end;
19790 +      perc_valid=round((vn/validtotal)*100, .01);
19791 +    %end;
19793 +    index=_N_;
19794 +    keep node index tprob perc_train percevent_train
19795 +    %if &validexist %then %do;
19796 +        vprob percevent_valid perc_valid
19797 +    %end;
19798 +    ;
19799 +  run;
19800 +  proc sort data=tempnodes; by node; run;
19801 +  data &EM_USER_TREE_PLOT;
19802 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19803 +    by node;
19804 +    if missing(node) then delete;
19805 +    %if &oldexists %then %do;
19806 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19807 +      drop oldnodecolor;
19808 +    %end;
19809 +    abovetext = compbl(abovetext);
19811 +    /* add variable labels */
19812 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19813 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19814 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19815 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19816 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19817 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19819 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19820 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19821 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19822 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19823 +          %end;
19824 +          %else %do;
19825 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19826 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19827 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19828 +          %end;
19829 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19831 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19832 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19833 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19834 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19835 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19836 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19837 +          %end;
19838 +          %else %do;
19839 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19840 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19841 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19842 +          %end;
19843 +    ;
19844 +  run;
19846 +  /* delete temporary tables */
19847 +  proc datasets lib=work nolist;
19848 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19849 +  run;
19851 +%mend em_tree_makePlotDs;
19855 +%macro em_tree_report;
19857 +   /* report properties */
19858 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19859 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19860 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19861 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19862 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19863 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19864 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19865 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19866 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19867 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19868 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19869 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19870 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19872 +   %let validexist=0;
19873 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19874 +     %let validexist=1;
19875 +   %end;
19877 +   /* determine if multiple targets will be processed */
19878 +   %let em_tree_multipleTargets=N;
19879 +   %let em_tree_numTarget=1;
19880 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19881 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19882 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19883 +         %let em_tree_multipleTargets=N;
19884 +      %end;
19885 +      %else %do;
19886 +        data _null_;
19887 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19888 +          if eof then
19889 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19890 +        run;
19892 +        %if &em_tree_numTarget gt 1 %then %do;
19893 +           %let em_tree_multipleTargets=Y;
19894 +        %end;
19895 +     %end;
19896 +   %end;
19898 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19900 +   /* variable importance */
19901 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19902 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19904 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19905 +     /* and the columns may not be generated                                                                                 */
19906 +     %let em_tree_cvexists=;
19907 +     %let em_tree_surrexists=.;
19908 +     data _null_;
19909 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19910 +       if eof then do ;
19911 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19912 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19913 +       end;
19914 +     run;
19916 +     data &EM_USER_OUTIMPORT;
19917 +         set &EM_USER_OUTIMPORT;
19918 +         /* format columns based on Precison value specified */
19919 +         format importance 15.&EM_PROPERTY_PRECISION
19920 +              %if &validexist %then %do;
19921 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19922 +              %end;
19923 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19924 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19925 +              %end;
19926 +         ;
19927 +     run;
19929 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19930 +     proc print data=&EM_USER_OUTIMPORT
19931 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19932 +          (where=((nrules>0) OR (nsurrogates>0)))
19933 +        %end;
19934 +        %else %do;
19935 +           (where=(nrules>0))
19936 +        %end;
19937 +        label noobs
19938 +        ;
19939 +     run;
19940 +     title10;
19942 +   %end;
19944 +   /* Sequence */
19945 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19946 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19947 +   data _null_ ;
19948 +      set &EM_USER_outseq (obs=2) end=eof ;
19949 +      if eof then do ;
19950 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19951 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19952 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19953 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19954 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19955 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19956 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19957 +      end;
19958 +    run;
19960 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19961 +      data &EM_USER_OUTSEQ;
19962 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19963 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19964 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19965 +           _XMISC_=_VMISC_
19966 +        %end;
19967 +        %if "&em_tree_aprof" ne "."  %then %do;
19968 +           _XAPROF_=_VAPROF_
19969 +           _XPROF_ = _VPROF_
19970 +        %end;
19971 +        %if "&em_tree_aloss" ne "."  %then %do;
19972 +           _XALOSS_=_VALOSS_
19973 +        %end;
19974 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19975 +           _XPASE_ = _VPASE_
19976 +           _XPMISC_ = _VPMISC_
19977 +        %end;
19979 +        ));
19980 +     %end;
19981 +     %else %do;
19982 +        set &EM_USER_OUTSEQ;
19983 +     %end;
19985 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19986 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19987 +            _MISC_   15.&EM_PROPERTY_PRECISION
19988 +         %end;
19989 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19990 +            _PASE_  15.&EM_PROPERTY_PRECISION
19991 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19992 +         %end;
19993 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19994 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19995 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19996 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19997 +            %end;
19998 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19999 +              _VPASE_  15.&EM_PROPERTY_PRECISION
20000 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
20001 +            %end;
20002 +         %end;
20003 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
20004 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
20005 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20006 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20007 +            %end;
20008 +         %end;
20009 +         %if "&em_tree_seq" ne "." %then %do;
20010 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
20011 +         %end;
20012 +         %if "&em_tree_vseq" ne "." %then %do;
20013 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
20014 +         %end;
20015 +         %if "&em_tree_aprof" ne "." %then %do;
20016 +           _APROF_ 15.&EM_PROPERTY_PRECISION
20017 +           _PROF_ 15.&EM_PROPERTY_PRECISION
20018 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20019 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
20020 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
20021 +           %end;
20022 +         %end;
20023 +         %else %if "&em_tree_aloss" ne "." %then %do;
20024 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
20025 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20026 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
20027 +           %end;
20028 +         %end;
20029 +      ;
20030 +    run;
20031 +   %end;
20033 +   /* Observation Based Importance */
20034 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
20036 +      /* need to check for 0 obs */
20037 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
20038 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
20039 +      %let rc=%sysfunc(close(&dsid));
20041 +      %if &onobs %then %do;
20042 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
20043 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
20045 +         data &EM_USER_OUTOBSIMP;
20046 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
20047 +           if _a;
20048 +           by _INPUT1_;
20049 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
20050 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20051 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
20052 +                   %end;
20053 +                   ;
20054 +         run;
20055 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
20056 +      %end;
20057 +   %end;
20059 +  %end;
20061 +  /* create dataset to support tree diagram and icicle plot */
20062 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20063 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
20065 +  /* display tree diagram */
20066 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
20067 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
20069 +  /* display icicle diagram */
20070 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
20071 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
20073 +  /* Leaf Statistics Plot */
20074 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
20076 +  /* print leaf information to output window */
20077 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
20079 +     proc sort data=&EM_USER_TREE_PLOT out=t;
20080 +       by descending N;
20081 +     run;
20083 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20084 +     %local vn;
20085 +     data _null_;
20086 +       set t (obs=2) end=eof;
20087 +       if eof then do;
20088 +         call symput("vn", strip(put(vn, best.)));
20089 +       end;
20090 +     run;
20092 +     data t;
20093 +       set t;
20094 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20095 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20096 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20097 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20098 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20099 +       %end;
20100 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20101 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20102 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20103 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20104 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20105 +          %end;
20106 +       %end;
20107 +       ;
20108 +     run;
20110 +     /* determine if rase is found in t */
20111 +    %let dsid=%sysfunc(open(t,i));
20112 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20113 +    %let rc=%sysfunc(close(&dsid));
20115 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20116 +     proc print data=t noobs label;
20117 +       where tprob ne .;
20118 +       var node depth N tprob
20119 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20120 +         %if "&vn" ne "." %then %do;
20121 +           VN
20122 +         %end;
20123 +         vprob
20124 +       %end;
20125 +       %if &raseexists %then %do;
20126 +            RASE
20127 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20128 +              VRASE
20129 +            %end;
20130 +       %end;
20131 +       ;
20132 +     run;
20133 +     title10;
20134 +  %end;
20136 +  /* create plots that are done during training of node */
20137 +  /* display iterative plot, including reference line */
20138 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20139 +   /* %if &nleaves eq  %then %do; */
20140 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20141 +      data _null_;
20142 +        set &EM_USER_OUTTOPOLOGY end=eof;
20143 +        if eof then do;
20144 +          call symput('nleaves', LEAF);
20145 +        end;
20146 +      run;
20147 +   /* %end; */
20149 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20150 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20151 +  %end;
20153 +  /* display leaf statistics */
20154 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20156 +  /* stats by node if multiple targets = Y */
20157 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20158 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20159 +    data &EM_USER_OUTSTATS;
20160 +      set &EM_USER_OUTSTATS;
20162 +     * if STATNAME="TARGET" then delete;
20163 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20164 +      drop leaf;
20165 +    run;
20166 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20168 +  %end;
20169 +  %else %do;
20170 +    /* add outstats and outdescribe to spk but not results */
20171 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20172 +  %end;
20174 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 18 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 43 observations read from the data set EMWS1.TREE3_OUTSEQ.
NOTE: The data set EMWS1.TREE3_OUTSEQ has 43 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.IDS2_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 19 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 19 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 19 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 5 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 19 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 27 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 27 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 27 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 38 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 601 observations read from the data set EMWS1.TREE3_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 19 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 38 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 19 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 39 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 39 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 38 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 39 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 19 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 39 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 39 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 19 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 19 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 39 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE3_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 273 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 273 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 273 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 234 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 39 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 273 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 273 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 273 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 39 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 273 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 273 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 273 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 273 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 78 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 39 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 78 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 78 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 39 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.TEMPPROB.
NOTE: There were 78 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 78 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 78 observations read from the data set WORK.TEMPPROB.
NOTE: There were 39 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 39 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 39 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 39 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 39 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 39 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 39 observations read from the data set WORK.TEMPN.
NOTE: There were 39 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 39 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE3_TREE_PLOT has 39 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 273 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 78 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 78 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 78 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 39 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 39 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 39 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 39 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 39 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 20 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 20 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set EMWS1.TREE3_TREE_PLOT.
NOTE: There were 20 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE3_TREE_PLOT has 39 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
 
NOTE: There were 39 observations read from the data set EMWS1.TREE3_TREE_PLOT.
NOTE: The data set WORK.T has 39 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 39 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 39 observations read from the data set EMWS1.TREE3_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
20175
20176  *------------------------------------------------------------*;
20177  * End REPORT: Tree3;
20178  *------------------------------------------------------------*;
 
20179  /* Reset EM Options */
20180  options formchar="|----|+|---+=|-/\<>*";
20181  options nocenter ls=256 ps=10000;
20182  goptions reset=all device=GIF NODISPLAY;
 
20183  proc sort data=WORK.EM_USER_REPORT;
20184  by ID VIEW;
20185  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
20186  proc sort data=EMWS1.Part2_CMeta_TRAIN out=WORK.SUBSETINMETA;
20187  by NAME;
20188  run;
 
NOTE: There were 28 observations read from the data set EMWS1.PART2_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 28 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
20189  proc sort data=EMWS1.Tree3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20190  by NAME;
20191  run;
 
NOTE: There were 28 observations read from the data set EMWS1.TREE3_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 28 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20192  data WORK.ASSESS_META;
20193  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20194  by NAME;
20195  run;
 
NOTE: There were 28 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 28 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 28 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20196  data EM_temp_assessMeta;
20197  set EMWS1.Tree3_CMeta_TRAIN;
20198  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20199  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
20200  data EM_temp_assessdata;
20201  set EMWS1.Tree3_TRAIN(keep=
20202  F_TargetBuy
20203  I_TargetBuy
20204  P_TargetBuy0
20205  P_TargetBuy1
20206  Q_TargetBuy0
20207  Q_TargetBuy1
20208  R_TargetBuy0
20209  R_TargetBuy1
20210  U_TargetBuy
20211  V_TargetBuy0
20212  V_TargetBuy1
20213  _WARN_
20214  TargetBuy
20215  );
20216  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
NOTE: There were 10016 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: There were 10016 observations read from the data set EMWS1.TREE3_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 10016 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24497   data EM_temp_assessMeta;
24498   set EMWS1.Tree3_CMeta_TRAIN;
24499   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24500   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
24501   data EM_temp_assessdata;
24502   set EMWS1.Tree3_VALIDATE(keep=
24503   F_TargetBuy
24504   I_TargetBuy
24505   P_TargetBuy0
24506   P_TargetBuy1
24507   Q_TargetBuy0
24508   Q_TargetBuy1
24509   R_TargetBuy0
24510   R_TargetBuy1
24511   U_TargetBuy
24512   V_TargetBuy0
24513   V_TargetBuy1
24514   _WARN_
24515   TargetBuy
24516   );
24517   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: There were 10019 observations read from the data set EMWS1.PART2_VALIDATE.
NOTE: There were 10019 observations read from the data set EMWS1.TREE3_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 10019 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28807   %let _cn = %sysfunc(getoption(CENTER));
28808   options nocenter;
28809   proc print data=EMWS1.Tree3_EMREPORTFIT noobs label;
28810   var STAT LABEL TRAIN
28811   VALIDATE
28812   ;
28813   by TARGET TARGETLABEL;
28814   title9 ' ';
28815   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28816   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28817   title10;
28818   options &_cn;
 
28819   proc sort data=EMWS1.Tree3_EMCLASSIFICATION nothreads;
28820   by DATAROLE TARGET TARGETLABEL;
28821   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE3_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28822   %let _cn = %sysfunc(getoption(CENTER));
28823   options nocenter;
28824   proc print data=EMWS1.Tree3_EMCLASSIFICATION noobs label;
28825   var from into pct_row pct_col count percent
28826   ;
28827   by DATAROLE TARGET TARGETLABEL;
28828   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28829   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28830   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28831   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28832   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28833   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28834   where _TYPE_='PREDICTION';
28835   title9 ' ';
28836   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28837   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
28838   title9;
28839   title10;
28840   options &_cn;
 
28841   %let _cn = %sysfunc(getoption(CENTER));
28842   options nocenter;
28843   data EMWS1.Tree3_EMEVENTREPORT;
28844   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28844 !  8;
28845   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28845 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28845 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28845 ! FALSEEVENT
28846   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28846 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28846 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28847      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28848   FALSEEVENT=0;
28849   FALSENEVENT=0;
28850   TRUEEVENT=0;
28851   TRUENEVENT=0;
28852   set EMWS1.Tree3_EMEVENTREPORT;
28853   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE3_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
28854   proc print data=EMWS1.Tree3_EMEVENTREPORT noobs label;
28855   title9 ' ';
28856   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28857   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28858   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28859   title10;
28860   options &_cn;
 
28861   proc datasets library=EMWS1 nolist;
28862   modify Tree3_EMRANK;
28863   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28864   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28865   run;
 
NOTE: MODIFY was successful for EMWS1.TREE3_EMRANK.DATA.
28866   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
28867   %let _cn = %sysfunc(getoption(CENTER));
28868   options nocenter;
28869   proc print data=EMWS1.Tree3_EMRANK label noobs;
28870   var
28871   decile gain lift liftc resp respc N _meanP_;
28872   by
28873   notsorted DATAROLE
28874   notsorted TARGET
28875   notsorted TARGETLABEL
28876   ;
28877   title9 ' ';
28878   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28879   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE3_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28880   title10;
28881   options &_cn;
 
28882   proc datasets library=EMWS1 nolist;
28883   modify Tree3_EMSCOREDIST;
28884   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28885   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28886   run;
 
NOTE: MODIFY was successful for EMWS1.TREE3_EMSCOREDIST.DATA.
28887   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
