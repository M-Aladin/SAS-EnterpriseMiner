*****************************************;
*** Begin Scoring Code from PROC DMVQ ***;
*****************************************;


*** Begin Class Look-up, Standardization, Replacement ;
drop _dm_bad; _dm_bad = 0;

*** Standardize AffluenceGrade ;
drop T_AffluenceGrade ;
if missing( AffluenceGrade ) then T_AffluenceGrade = .;
else T_AffluenceGrade = (AffluenceGrade - 1) * 0.03571428571428;

*** Standardize CleanserProducts ;
drop T_CleanserProducts ;
if missing( CleanserProducts ) then T_CleanserProducts = .;
else T_CleanserProducts = (CleanserProducts - 0) * 0.25;

*** Standardize DayCareProducts ;
drop T_DayCareProducts ;
if missing( DayCareProducts ) then T_DayCareProducts = .;
else T_DayCareProducts = (DayCareProducts - 0) * 0.33333333333333;

*** Standardize LotionProducts ;
drop T_LotionProducts ;
if missing( LotionProducts ) then T_LotionProducts = .;
else T_LotionProducts = (LotionProducts - 0) * 0.2;

*** Standardize NightRepairProducts ;
drop T_NightRepairProducts ;
if missing( NightRepairProducts ) then T_NightRepairProducts = .;
else T_NightRepairProducts = (NightRepairProducts - 0) * 0.5;

*** Standardize REP_Age ;
drop T_REP_Age ;
if missing( REP_Age ) then T_REP_Age = .;
else T_REP_Age = (REP_Age - 18) * 0.01639344262295;

*** Standardize REP_LoyaltyTime ;
drop T_REP_LoyaltyTime ;
if missing( REP_LoyaltyTime ) then T_REP_LoyaltyTime = .;
else T_REP_LoyaltyTime = (REP_LoyaltyTime - 0) * 0.02777777777777;

*** Standardize TimeSinceLastPurchase ;
drop T_TimeSinceLastPurchase ;
if missing( TimeSinceLastPurchase ) then T_TimeSinceLastPurchase = .;
else T_TimeSinceLastPurchase = (TimeSinceLastPurchase - 1) * 0.03030303030303;

*** Standardize TotalSpend ;
drop T_TotalSpend ;
if missing( TotalSpend ) then T_TotalSpend = .;
else T_TotalSpend = (TotalSpend - 10) * 0.0000500250125;

*** Generate dummy variables for CampaignViewedEmail ;
drop CampaignViewedEmail0 CampaignViewedEmail1 ;
if missing( CampaignViewedEmail ) then do;
   CampaignViewedEmail0 = .;
   CampaignViewedEmail1 = .;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( CampaignViewedEmail , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      CampaignViewedEmail0 = 1;
      CampaignViewedEmail1 = 0;
   end;
   else if _dm12 = '1'  then do;
      CampaignViewedEmail0 = 0;
      CampaignViewedEmail1 = 1;
   end;
   else do;
      CampaignViewedEmail0 = .;
      CampaignViewedEmail1 = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for LoyaltyClass ;
drop LoyaltyClassGold LoyaltyClassPlatinum ;
if missing( LoyaltyClass ) then do;
   LoyaltyClassGold = .;
   LoyaltyClassPlatinum = .;
end;
else do;
   length _dm8 $ 8; drop _dm8 ;
   _dm8 = put( LoyaltyClass , $CHAR8. );
   %DMNORMIP( _dm8 )
   if _dm8 = 'GOLD'  then do;
      LoyaltyClassGold = 1;
      LoyaltyClassPlatinum = 0;
   end;
   else if _dm8 = 'PLATINUM'  then do;
      LoyaltyClassGold = 0;
      LoyaltyClassPlatinum = 1;
   end;
   else do;
      LoyaltyClassGold = .;
      LoyaltyClassPlatinum = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for MobileApplications ;
drop MobileApplications0 MobileApplications1 ;
if missing( MobileApplications ) then do;
   MobileApplications0 = .;
   MobileApplications1 = .;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( MobileApplications , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      MobileApplications0 = 1;
      MobileApplications1 = 0;
   end;
   else if _dm12 = '1'  then do;
      MobileApplications0 = 0;
      MobileApplications1 = 1;
   end;
   else do;
      MobileApplications0 = .;
      MobileApplications1 = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for PreviousCampaign ;
drop PreviousCampaign0 PreviousCampaign1 ;
if missing( PreviousCampaign ) then do;
   PreviousCampaign0 = .;
   PreviousCampaign1 = .;
end;
else do;
   length _dm12 $ 12; drop _dm12 ;
   _dm12 = put( PreviousCampaign , BEST12. );
   %DMNORMIP( _dm12 )
   if _dm12 = '0'  then do;
      PreviousCampaign0 = 1;
      PreviousCampaign1 = 0;
   end;
   else if _dm12 = '1'  then do;
      PreviousCampaign0 = 0;
      PreviousCampaign1 = 1;
   end;
   else do;
      PreviousCampaign0 = .;
      PreviousCampaign1 = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for REP_AdvertisementZone ;
drop REP_AdvertisementZBorder REP_AdvertisementZCentral_Z1
        REP_AdvertisementZE_Central REP_AdvertisementZN_Central
        REP_AdvertisementZN_East REP_AdvertisementZN_West
        REP_AdvertisementZNE_Z1 REP_AdvertisementZNE_Z2
        REP_AdvertisementZNE_Z3 REP_AdvertisementZS_Central
        REP_AdvertisementZS_East REP_AdvertisementZS_West REP_AdvertisementZU
        REP_AdvertisementZW_Central ;
*** encoding is sparse, initialize to zero;
REP_AdvertisementZBorder = 0;
REP_AdvertisementZCentral_Z1 = 0;
REP_AdvertisementZE_Central = 0;
REP_AdvertisementZN_Central = 0;
REP_AdvertisementZN_East = 0;
REP_AdvertisementZN_West = 0;
REP_AdvertisementZNE_Z1 = 0;
REP_AdvertisementZNE_Z2 = 0;
REP_AdvertisementZNE_Z3 = 0;
REP_AdvertisementZS_Central = 0;
REP_AdvertisementZS_East = 0;
REP_AdvertisementZS_West = 0;
REP_AdvertisementZU = 0;
REP_AdvertisementZW_Central = 0;
if missing( REP_AdvertisementZone ) then do;
   REP_AdvertisementZBorder = .;
   REP_AdvertisementZCentral_Z1 = .;
   REP_AdvertisementZE_Central = .;
   REP_AdvertisementZN_Central = .;
   REP_AdvertisementZN_East = .;
   REP_AdvertisementZN_West = .;
   REP_AdvertisementZNE_Z1 = .;
   REP_AdvertisementZNE_Z2 = .;
   REP_AdvertisementZNE_Z3 = .;
   REP_AdvertisementZS_Central = .;
   REP_AdvertisementZS_East = .;
   REP_AdvertisementZS_West = .;
   REP_AdvertisementZU = .;
   REP_AdvertisementZW_Central = .;
end;
else do;
   length _dm10 $ 10; drop _dm10 ;
   _dm10 = put( REP_AdvertisementZone , $CHAR10. );
   %DMNORMIP( _dm10 )
   if _dm10 = 'E CENTRAL'  then do;
      REP_AdvertisementZE_Central = 1;
   end;
   else if _dm10 = 'S CENTRAL'  then do;
      REP_AdvertisementZS_Central = 1;
   end;
   else if _dm10 = 'S EAST'  then do;
      REP_AdvertisementZS_East = 1;
   end;
   else if _dm10 = 'N WEST'  then do;
      REP_AdvertisementZN_West = 1;
   end;
   else if _dm10 = 'W CENTRAL'  then do;
      REP_AdvertisementZW_Central = 1;
   end;
   else if _dm10 = 'CENTRAL Z1'  then do;
      REP_AdvertisementZCentral_Z1 = 1;
   end;
   else if _dm10 = 'NE Z3'  then do;
      REP_AdvertisementZNE_Z3 = 1;
   end;
   else if _dm10 = 'NE Z1'  then do;
      REP_AdvertisementZNE_Z1 = 1;
   end;
   else if _dm10 = 'N EAST'  then do;
      REP_AdvertisementZN_East = 1;
   end;
   else if _dm10 = 'S WEST'  then do;
      REP_AdvertisementZS_West = 1;
   end;
   else if _dm10 = 'U'  then do;
      REP_AdvertisementZU = 1;
   end;
   else if _dm10 = 'NE Z2'  then do;
      REP_AdvertisementZNE_Z2 = 1;
   end;
   else if _dm10 = 'N CENTRAL'  then do;
      REP_AdvertisementZN_Central = 1;
   end;
   else if _dm10 = 'BORDER'  then do;
      REP_AdvertisementZBorder = 1;
   end;
   else do;
      REP_AdvertisementZBorder = .;
      REP_AdvertisementZCentral_Z1 = .;
      REP_AdvertisementZE_Central = .;
      REP_AdvertisementZN_Central = .;
      REP_AdvertisementZN_East = .;
      REP_AdvertisementZN_West = .;
      REP_AdvertisementZNE_Z1 = .;
      REP_AdvertisementZNE_Z2 = .;
      REP_AdvertisementZNE_Z3 = .;
      REP_AdvertisementZS_Central = .;
      REP_AdvertisementZS_East = .;
      REP_AdvertisementZS_West = .;
      REP_AdvertisementZU = .;
      REP_AdvertisementZW_Central = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for REP_ClusterGroup ;
drop REP_ClusterGroupA REP_ClusterGroupB REP_ClusterGroupC REP_ClusterGroupD
        REP_ClusterGroupE REP_ClusterGroupF REP_ClusterGroupU ;
*** encoding is sparse, initialize to zero;
REP_ClusterGroupA = 0;
REP_ClusterGroupB = 0;
REP_ClusterGroupC = 0;
REP_ClusterGroupD = 0;
REP_ClusterGroupE = 0;
REP_ClusterGroupF = 0;
REP_ClusterGroupU = 0;
if missing( REP_ClusterGroup ) then do;
   REP_ClusterGroupA = .;
   REP_ClusterGroupB = .;
   REP_ClusterGroupC = .;
   REP_ClusterGroupD = .;
   REP_ClusterGroupE = .;
   REP_ClusterGroupF = .;
   REP_ClusterGroupU = .;
end;
else do;
   length _dm1 $ 1; drop _dm1 ;
   _dm1 = put( REP_ClusterGroup , $CHAR1. );
   %DMNORMIP( _dm1 )
   _dm_find = 0; drop _dm_find;
   if _dm1 <= 'D'  then do;
      if _dm1 <= 'B'  then do;
         if _dm1 = 'A'  then do;
            REP_ClusterGroupA = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm1 = 'B'  then do;
               REP_ClusterGroupB = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm1 = 'C'  then do;
            REP_ClusterGroupC = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm1 = 'D'  then do;
               REP_ClusterGroupD = 1;
               _dm_find = 1;
            end;
         end;
      end;
   end;
   else do;
      if _dm1 <= 'F'  then do;
         if _dm1 = 'E'  then do;
            REP_ClusterGroupE = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm1 = 'F'  then do;
               REP_ClusterGroupF = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm1 = 'U'  then do;
            REP_ClusterGroupU = 1;
            _dm_find = 1;
         end;
      end;
   end;
   if not _dm_find then do;
      REP_ClusterGroupA = .;
      REP_ClusterGroupB = .;
      REP_ClusterGroupC = .;
      REP_ClusterGroupD = .;
      REP_ClusterGroupE = .;
      REP_ClusterGroupF = .;
      REP_ClusterGroupU = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for REP_Gender ;
drop REP_GenderF REP_GenderM ;
if missing( REP_Gender ) then do;
   REP_GenderF = .;
   REP_GenderM = .;
end;
else do;
   length _dm1 $ 1; drop _dm1 ;
   _dm1 = put( REP_Gender , $CHAR1. );
   %DMNORMIP( _dm1 )
   if _dm1 = 'F'  then do;
      REP_GenderF = 1;
      REP_GenderM = 0;
   end;
   else if _dm1 = 'M'  then do;
      REP_GenderF = 0;
      REP_GenderM = 1;
   end;
   else do;
      REP_GenderF = .;
      REP_GenderM = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for REP_Region ;
drop REP_RegionCentral REP_RegionNorth REP_RegionNorthEast
        REP_RegionSouth_East REP_RegionSouth_West REP_RegionU ;
*** encoding is sparse, initialize to zero;
REP_RegionCentral = 0;
REP_RegionNorth = 0;
REP_RegionNorthEast = 0;
REP_RegionSouth_East = 0;
REP_RegionSouth_West = 0;
REP_RegionU = 0;
if missing( REP_Region ) then do;
   REP_RegionCentral = .;
   REP_RegionNorth = .;
   REP_RegionNorthEast = .;
   REP_RegionSouth_East = .;
   REP_RegionSouth_West = .;
   REP_RegionU = .;
end;
else do;
   length _dm10 $ 10; drop _dm10 ;
   _dm10 = put( REP_Region , $CHAR10. );
   %DMNORMIP( _dm10 )
   _dm_find = 0; drop _dm_find;
   if _dm10 <= 'NORTHEAST'  then do;
      if _dm10 <= 'NORTH'  then do;
         if _dm10 = 'CENTRAL'  then do;
            REP_RegionCentral = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm10 = 'NORTH'  then do;
               REP_RegionNorth = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm10 = 'NORTHEAST'  then do;
            REP_RegionNorthEast = 1;
            _dm_find = 1;
         end;
      end;
   end;
   else do;
      if _dm10 <= 'SOUTH WEST'  then do;
         if _dm10 = 'SOUTH EAST'  then do;
            REP_RegionSouth_East = 1;
            _dm_find = 1;
         end;
         else do;
            if _dm10 = 'SOUTH WEST'  then do;
               REP_RegionSouth_West = 1;
               _dm_find = 1;
            end;
         end;
      end;
      else do;
         if _dm10 = 'U'  then do;
            REP_RegionU = 1;
            _dm_find = 1;
         end;
      end;
   end;
   if not _dm_find then do;
      REP_RegionCentral = .;
      REP_RegionNorth = .;
      REP_RegionNorthEast = .;
      REP_RegionSouth_East = .;
      REP_RegionSouth_West = .;
      REP_RegionU = .;
      _DM_BAD = 1;
   end;
end;

*** End Class Look-up, Standardization, Replacement ;


*** Omitted Cases;
if _dm_bad then do;
   _SEGMENT_ = .; Distance = .;
   goto CLUS2vlex ;
end; *** omitted;

*** Compute Distances and Cluster Membership;
label _SEGMENT_ = 'Segment Id' ;
label Distance = 'Distance' ;
array CLUS2vads [3] _temporary_;
drop _vqclus _vqmvar _vqnvar;
_vqmvar = 0;
do _vqclus = 1 to 3; CLUS2vads [_vqclus] = 0; end;
if not missing( T_AffluenceGrade ) then do;
   CLUS2vads [1] + ( T_AffluenceGrade - 0.27971109652002 )**2;
   CLUS2vads [2] + ( T_AffluenceGrade - 0.2727195177434 )**2;
   CLUS2vads [3] + ( T_AffluenceGrade - 0.30734058329214 )**2;
end;
else _vqmvar + 0.01646045070599;
if not missing( T_CleanserProducts ) then do;
   CLUS2vads [1] + ( T_CleanserProducts - 0.50229809586342 )**2;
   CLUS2vads [2] + ( T_CleanserProducts - 0.4920382165605 )**2;
   CLUS2vads [3] + ( T_CleanserProducts - 0.46384083044982 )**2;
end;
else _vqmvar + 0.11662215693258;
if not missing( T_DayCareProducts ) then do;
   CLUS2vads [1] + ( T_DayCareProducts - 0.50733202013569 )**2;
   CLUS2vads [2] + ( T_DayCareProducts - 0.4920382165605 )**2;
   CLUS2vads [3] + ( T_DayCareProducts - 0.50657439446366 )**2;
end;
else _vqmvar + 0.13386369815448;
if not missing( T_LotionProducts ) then do;
   CLUS2vads [1] + ( T_LotionProducts - 0.44346684175968 )**2;
   CLUS2vads [2] + ( T_LotionProducts - 0.47229299363057 )**2;
   CLUS2vads [3] + ( T_LotionProducts - 0.40664359861591 )**2;
end;
else _vqmvar + 0.10010634180426;
if not missing( T_NightRepairProducts ) then do;
   CLUS2vads [1] + ( T_NightRepairProducts - 0.48555482600131 )**2;
   CLUS2vads [2] + ( T_NightRepairProducts - 0.49044585987261 )**2;
   CLUS2vads [3] + ( T_NightRepairProducts - 0.5076124567474 )**2;
end;
else _vqmvar + 0.16750527190565;
if not missing( T_REP_Age ) then do;
   CLUS2vads [1] + ( T_REP_Age - 0.63257375972788 )**2;
   CLUS2vads [2] + ( T_REP_Age - 0.60535658348125 )**2;
   CLUS2vads [3] + ( T_REP_Age - 0.551012536162 )**2;
end;
else _vqmvar + 0.05134155937302;
if not missing( T_REP_LoyaltyTime ) then do;
   CLUS2vads [1] + ( T_REP_LoyaltyTime - 0.17998103158969 )**2;
   CLUS2vads [2] + ( T_REP_LoyaltyTime - 0.18778750884642 )**2;
   CLUS2vads [3] + ( T_REP_LoyaltyTime - 0.17310649750096 )**2;
end;
else _vqmvar + 0.02035955295737;
if not missing( T_TimeSinceLastPurchase ) then do;
   CLUS2vads [1] + ( T_TimeSinceLastPurchase - 0.08501959847987 )**2;
   CLUS2vads [2] + ( T_TimeSinceLastPurchase - 0.08979926655085 )**2;
   CLUS2vads [3] + ( T_TimeSinceLastPurchase - 0.07614553842927 )**2;
end;
else _vqmvar + 0.01501832444648;
if not missing( T_TotalSpend ) then do;
   CLUS2vads [1] + ( T_TotalSpend - 0.33186777236287 )**2;
   CLUS2vads [2] + ( T_TotalSpend - 0.18128558706104 )**2;
   CLUS2vads [3] + ( T_TotalSpend - 0.16110148499855 )**2;
end;
else _vqmvar + 0.04681105453797;
if not missing( CampaignViewedEmail0 ) then do;
   CLUS2vads [1] + ( CampaignViewedEmail0 - 0.80630334865397 )**2;
   CLUS2vads [2] + ( CampaignViewedEmail0 - 0.35270700636942 )**2;
   CLUS2vads [3] + ( CampaignViewedEmail0 - 0.36193771626297 )**2;
end;
else _vqmvar + 0.24968225051844;
if not missing( CampaignViewedEmail1 ) then do;
   CLUS2vads [1] + ( CampaignViewedEmail1 - 0.19369665134602 )**2;
   CLUS2vads [2] + ( CampaignViewedEmail1 - 0.64729299363057 )**2;
   CLUS2vads [3] + ( CampaignViewedEmail1 - 0.63806228373702 )**2;
end;
else _vqmvar + 0.24968225051844;
if not missing( LoyaltyClassGold ) then do;
   CLUS2vads [1] + ( LoyaltyClassGold - 0.35193696651346 )**2;
   CLUS2vads [2] + ( LoyaltyClassGold - 0.75716560509554 )**2;
   CLUS2vads [3] + ( LoyaltyClassGold - 0.8152249134948 )**2;
end;
else _vqmvar + 0.23291547146219;
if not missing( LoyaltyClassPlatinum ) then do;
   CLUS2vads [1] + ( LoyaltyClassPlatinum - 0.64806303348653 )**2;
   CLUS2vads [2] + ( LoyaltyClassPlatinum - 0.24283439490445 )**2;
   CLUS2vads [3] + ( LoyaltyClassPlatinum - 0.18477508650519 )**2;
end;
else _vqmvar + 0.23291547146219;
if not missing( MobileApplications0 ) then do;
   CLUS2vads [1] + ( MobileApplications0 - 0.55088640840446 )**2;
   CLUS2vads [2] + ( MobileApplications0 - 0.87261146496815 )**2;
   CLUS2vads [3] + ( MobileApplications0 - 0.2159169550173 )**2;
end;
else _vqmvar + 0.24903750161453;
if not missing( MobileApplications1 ) then do;
   CLUS2vads [1] + ( MobileApplications1 - 0.44911359159553 )**2;
   CLUS2vads [2] + ( MobileApplications1 - 0.12738853503184 )**2;
   CLUS2vads [3] + ( MobileApplications1 - 0.78408304498269 )**2;
end;
else _vqmvar + 0.24903750161453;
if not missing( PreviousCampaign0 ) then do;
   CLUS2vads [1] + ( PreviousCampaign0 - 0.82009192383453 )**2;
   CLUS2vads [2] + ( PreviousCampaign0 - 0.33837579617834 )**2;
   CLUS2vads [3] + ( PreviousCampaign0 - 0.34186851211072 )**2;
end;
else _vqmvar + 0.24988339468566;
if not missing( PreviousCampaign1 ) then do;
   CLUS2vads [1] + ( PreviousCampaign1 - 0.17990807616546 )**2;
   CLUS2vads [2] + ( PreviousCampaign1 - 0.66162420382165 )**2;
   CLUS2vads [3] + ( PreviousCampaign1 - 0.65813148788927 )**2;
end;
else _vqmvar + 0.24988339468566;
if not missing( REP_AdvertisementZBorder ) then do;
   CLUS2vads [1] + ( REP_AdvertisementZBorder - 0.01313197636244 )**2;
   CLUS2vads [2] + ( REP_AdvertisementZBorder - 0.01273885350318 )**2;
   CLUS2vads [3] + ( REP_AdvertisementZBorder - 0.00553633217993 )**2;
end;
else _vqmvar + 0.01031060067882;
if not missing( REP_AdvertisementZCentral_Z1 ) then do;
   CLUS2vads [1] + ( REP_AdvertisementZCentral_Z1 - 0.07222586999343 )**2;
   CLUS2vads [2] + ( REP_AdvertisementZCentral_Z1 - 0.09792993630573 )**2;
   CLUS2vads [3] + ( REP_AdvertisementZCentral_Z1 - 0.04013840830449 )**2;
end;
else _vqmvar + 0.064161121187;
if not missing( REP_AdvertisementZE_Central ) then do;
   CLUS2vads [1] + ( REP_AdvertisementZE_Central - 0.26526592252133 )**2;
   CLUS2vads [2] + ( REP_AdvertisementZE_Central - 0.09315286624203 )**2;
   CLUS2vads [3] + ( REP_AdvertisementZE_Central - 0.46574394463667 )**2;
end;
else _vqmvar + 0.20281588379652;
if not missing( REP_AdvertisementZN_Central ) then do;
   CLUS2vads [1] + ( REP_AdvertisementZN_Central - 0.01313197636244 )**2;
   CLUS2vads [2] + ( REP_AdvertisementZN_Central - 0.01990445859872 )**2;
   CLUS2vads [3] + ( REP_AdvertisementZN_Central - 0.00830449826989 )**2;
end;
else _vqmvar + 0.01331537387251;
if not missing( REP_AdvertisementZN_East ) then do;
   CLUS2vads [1] + ( REP_AdvertisementZN_East - 0.04136572554169 )**2;
   CLUS2vads [2] + ( REP_AdvertisementZN_East - 0.05414012738853 )**2;
   CLUS2vads [3] + ( REP_AdvertisementZN_East - 0.02422145328719 )**2;
end;
else _vqmvar + 0.03776375225137;
if not missing( REP_AdvertisementZN_West ) then do;
   CLUS2vads [1] + ( REP_AdvertisementZN_West - 0.08141825344714 )**2;
   CLUS2vads [2] + ( REP_AdvertisementZN_West - 0.13933121019108 )**2;
   CLUS2vads [3] + ( REP_AdvertisementZN_West - 0.05882352941176 )**2;
end;
else _vqmvar + 0.08266419822185;
if not missing( REP_AdvertisementZNE_Z1 ) then do;
   CLUS2vads [1] + ( REP_AdvertisementZNE_Z1 - 0.04267892317793 )**2;
   CLUS2vads [2] + ( REP_AdvertisementZNE_Z1 - 0.06289808917197 )**2;
   CLUS2vads [3] + ( REP_AdvertisementZNE_Z1 - 0.01730103806228 )**2;
end;
else _vqmvar + 0.03841780715633;
if not missing( REP_AdvertisementZNE_Z2 ) then do;
   CLUS2vads [1] + ( REP_AdvertisementZNE_Z2 - 0.01904136572554 )**2;
   CLUS2vads [2] + ( REP_AdvertisementZNE_Z2 - 0.01751592356687 )**2;
   CLUS2vads [3] + ( REP_AdvertisementZNE_Z2 - 0.00692041522491 )**2;
end;
else _vqmvar + 0.01423610737376;
if not missing( REP_AdvertisementZNE_Z3 ) then do;
   CLUS2vads [1] + ( REP_AdvertisementZNE_Z3 - 0.05778069599474 )**2;
   CLUS2vads [2] + ( REP_AdvertisementZNE_Z3 - 0.08837579617834 )**2;
   CLUS2vads [3] + ( REP_AdvertisementZNE_Z3 - 0.03391003460207 )**2;
end;
else _vqmvar + 0.05527809470504;
if not missing( REP_AdvertisementZS_Central ) then do;
   CLUS2vads [1] + ( REP_AdvertisementZS_Central - 0.1483913328956 )**2;
   CLUS2vads [2] + ( REP_AdvertisementZS_Central - 0.20063694267515 )**2;
   CLUS2vads [3] + ( REP_AdvertisementZS_Central - 0.08235294117647 )**2;
end;
else _vqmvar + 0.1213883185693;
if not missing( REP_AdvertisementZS_East ) then do;
   CLUS2vads [1] + ( REP_AdvertisementZS_East - 0.10308601444517 )**2;
   CLUS2vads [2] + ( REP_AdvertisementZS_East - 0.03025477707006 )**2;
   CLUS2vads [3] + ( REP_AdvertisementZS_East - 0.17301038062283 )**2;
end;
else _vqmvar + 0.09427399513127;
if not missing( REP_AdvertisementZS_West ) then do;
   CLUS2vads [1] + ( REP_AdvertisementZS_West - 0.0328299409061 )**2;
   CLUS2vads [2] + ( REP_AdvertisementZS_West - 0.04617834394904 )**2;
   CLUS2vads [3] + ( REP_AdvertisementZS_West - 0.0152249134948 )**2;
end;
else _vqmvar + 0.02983638480471;
if not missing( REP_AdvertisementZU ) then do;
   CLUS2vads [1] + ( REP_AdvertisementZU - 0.03151674326986 )**2;
   CLUS2vads [2] + ( REP_AdvertisementZU - 0.03105095541401 )**2;
   CLUS2vads [3] + ( REP_AdvertisementZU - 0.01730103806228 )**2;
end;
else _vqmvar + 0.02581821052102;
if not missing( REP_AdvertisementZW_Central ) then do;
   CLUS2vads [1] + ( REP_AdvertisementZW_Central - 0.07813525935653 )**2;
   CLUS2vads [2] + ( REP_AdvertisementZW_Central - 0.10589171974522 )**2;
   CLUS2vads [3] + ( REP_AdvertisementZW_Central - 0.05121107266435 )**2;
end;
else _vqmvar + 0.07123844710424;
if not missing( REP_ClusterGroupA ) then do;
   CLUS2vads [1] + ( REP_ClusterGroupA - 0.0952068286277 )**2;
   CLUS2vads [2] + ( REP_ClusterGroupA - 0.07563694267515 )**2;
   CLUS2vads [3] + ( REP_ClusterGroupA - 0.09065743944636 )**2;
end;
else _vqmvar + 0.08013604925049;
if not missing( REP_ClusterGroupB ) then do;
   CLUS2vads [1] + ( REP_ClusterGroupB - 0.2225869993434 )**2;
   CLUS2vads [2] + ( REP_ClusterGroupB - 0.18710191082802 )**2;
   CLUS2vads [3] + ( REP_ClusterGroupB - 0.20484429065743 )**2;
end;
else _vqmvar + 0.16358268034357;
if not missing( REP_ClusterGroupC ) then do;
   CLUS2vads [1] + ( REP_ClusterGroupC - 0.21470781352593 )**2;
   CLUS2vads [2] + ( REP_ClusterGroupC - 0.203025477707 )**2;
   CLUS2vads [3] + ( REP_ClusterGroupC - 0.2076124567474 )**2;
end;
else _vqmvar + 0.16524565151873;
if not missing( REP_ClusterGroupD ) then do;
   CLUS2vads [1] + ( REP_ClusterGroupD - 0.17268548916611 )**2;
   CLUS2vads [2] + ( REP_ClusterGroupD - 0.20541401273885 )**2;
   CLUS2vads [3] + ( REP_ClusterGroupD - 0.17785467128027 )**2;
end;
else _vqmvar + 0.15029685022137;
if not missing( REP_ClusterGroupE ) then do;
   CLUS2vads [1] + ( REP_ClusterGroupE - 0.11162179908076 )**2;
   CLUS2vads [2] + ( REP_ClusterGroupE - 0.1202229299363 )**2;
   CLUS2vads [3] + ( REP_ClusterGroupE - 0.1273356401384 )**2;
end;
else _vqmvar + 0.10528647010598;
if not missing( REP_ClusterGroupF ) then do;
   CLUS2vads [1] + ( REP_ClusterGroupF - 0.15495732107682 )**2;
   CLUS2vads [2] + ( REP_ClusterGroupF - 0.16799363057324 )**2;
   CLUS2vads [3] + ( REP_ClusterGroupF - 0.16055363321799 )**2;
end;
else _vqmvar + 0.13494009850458;
if not missing( REP_ClusterGroupU ) then do;
   CLUS2vads [1] + ( REP_ClusterGroupU - 0.02823374917925 )**2;
   CLUS2vads [2] + ( REP_ClusterGroupU - 0.0406050955414 )**2;
   CLUS2vads [3] + ( REP_ClusterGroupU - 0.03114186851211 )**2;
end;
else _vqmvar + 0.03183184930646;
if not missing( REP_GenderF ) then do;
   CLUS2vads [1] + ( REP_GenderF - 0.70124753775443 )**2;
   CLUS2vads [2] + ( REP_GenderF - 0.40366242038216 )**2;
   CLUS2vads [3] + ( REP_GenderF - 0.92456747404844 )**2;
end;
else _vqmvar + 0.2142702817005;
if not missing( REP_GenderM ) then do;
   CLUS2vads [1] + ( REP_GenderM - 0.29875246224556 )**2;
   CLUS2vads [2] + ( REP_GenderM - 0.59633757961783 )**2;
   CLUS2vads [3] + ( REP_GenderM - 0.07543252595155 )**2;
end;
else _vqmvar + 0.2142702817005;
if not missing( REP_RegionCentral ) then do;
   CLUS2vads [1] + ( REP_RegionCentral - 0.31188443860801 )**2;
   CLUS2vads [2] + ( REP_RegionCentral - 0.42436305732484 )**2;
   CLUS2vads [3] + ( REP_RegionCentral - 0.18200692041522 )**2;
end;
else _vqmvar + 0.21040885186819;
if not missing( REP_RegionNorth ) then do;
   CLUS2vads [1] + ( REP_RegionNorth - 0.18056467498358 )**2;
   CLUS2vads [2] + ( REP_RegionNorth - 0.28184713375796 )**2;
   CLUS2vads [3] + ( REP_RegionNorth - 0.11695501730103 )**2;
end;
else _vqmvar + 0.15326580091705;
if not missing( REP_RegionNorthEast ) then do;
   CLUS2vads [1] + ( REP_RegionNorthEast - 0.07485226526592 )**2;
   CLUS2vads [2] + ( REP_RegionNorthEast - 0.09315286624203 )**2;
   CLUS2vads [3] + ( REP_RegionNorthEast - 0.02975778546712 )**2;
end;
else _vqmvar + 0.06067400562575;
if not missing( REP_RegionSouth_East ) then do;
   CLUS2vads [1] + ( REP_RegionSouth_East - 0.36835193696651 )**2;
   CLUS2vads [2] + ( REP_RegionSouth_East - 0.1234076433121 )**2;
   CLUS2vads [3] + ( REP_RegionSouth_East - 0.63875432525951 )**2;
end;
else _vqmvar + 0.23751689655852;
if not missing( REP_RegionSouth_West ) then do;
   CLUS2vads [1] + ( REP_RegionSouth_West - 0.0328299409061 )**2;
   CLUS2vads [2] + ( REP_RegionSouth_West - 0.04617834394904 )**2;
   CLUS2vads [3] + ( REP_RegionSouth_West - 0.0152249134948 )**2;
end;
else _vqmvar + 0.02983638480471;
if not missing( REP_RegionU ) then do;
   CLUS2vads [1] + ( REP_RegionU - 0.03151674326986 )**2;
   CLUS2vads [2] + ( REP_RegionU - 0.03105095541401 )**2;
   CLUS2vads [3] + ( REP_RegionU - 0.01730103806228 )**2;
end;
else _vqmvar + 0.02581821052102;
_vqnvar = 5.47002430570084 - _vqmvar;
if _vqnvar <= 2.8606009216473E-11 then do;
   _SEGMENT_ = .; Distance = .;
end;
else do;
   _SEGMENT_ = 1; Distance = CLUS2vads [1];
   _vqfzdst = Distance * 0.99999999999988; drop _vqfzdst;
   do _vqclus = 2 to 3;
      if CLUS2vads [_vqclus] < _vqfzdst then do;
         _SEGMENT_ = _vqclus; Distance = CLUS2vads [_vqclus];
         _vqfzdst = Distance * 0.99999999999988;
      end;
   end;
   Distance = sqrt(Distance * (5.47002430570084 / _vqnvar));
end;
CLUS2vlex :;

***************************************;
*** End Scoring Code from PROC DMVQ ***;
***************************************;
*------------------------------------------------------------*;
* Clus2: Creating Segment Label;
*------------------------------------------------------------*;
length _SEGMENT_LABEL_ $80;
label _SEGMENT_LABEL_='Segment Description';
if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
else
if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
else
if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
