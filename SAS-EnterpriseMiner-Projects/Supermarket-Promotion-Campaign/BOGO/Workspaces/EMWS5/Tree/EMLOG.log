*------------------------------------------------------------*
User:                Mohamed
Date:                May 09, 2018
Time:                17:32:21
Site:                12400032
Platform:            X64_10HOME
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
*------------------------------------------------------------*
* Training Log
Date:                May 09, 2018
Time:                17:32:08
*------------------------------------------------------------*
15254  proc freq data=EMWS5.Tree_VariableSet noprint;
15255  table ROLE*LEVEL/out=WORK.TreeMETA;
15256  run;
 
NOTE: There were 14 observations read from the data set EMWS5.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
15257  proc print data=WORK.TreeMETA label noobs;
15258  var ROLE LEVEL COUNT;
15259  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
15260  title9 ' ';
15261  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
15262  run;
 
NOTE: There were 7 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
15263  title10;
 
15264  %let EMNORLEN = %DMNORLEN;
EMWS5.Part_TRAIN EMWS5.Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN EMWS5 Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN
EMWS5.Part_TRAIN EMWS5.Part_TRAIN EMWS5 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
15293  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
15294  length ORDER $20;
15295  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
15296     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15297  set EMWS5.IDS_TARGETBUY_DM( where=(_TYPE_="TARGET"));
15298  NumLevels=2;
15299  select(upcase(ORDER));
15300  when('DESC') ORDER = 'Descending';
15301  when('ASC') ORDER = 'Ascending';
15302  when('FMTDESC') ORDER = 'Formatted Descending';
15303  when('FMTASC') ORDER = 'Formatted Ascending';
15304  otherwise ORDER = 'Descending';
15305  end;
15306  output;
15307  run;
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
15308  title9 ' ';
15309  proc print data=WORK.Tree_EVENT noobs label;
15310  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
15311  title9 ' ';
15312  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
15313  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15314  title10;
 
15315  proc print data = EMWS5.Ids_TargetBuy_DD noobs label;
15316  var TargetBuy
15317  TRAINPRIOR
15318  Solicit
15319  Ignore
15320  DECPRIOR
15321  ;
15322  title9 ' ';
15323  title10 "Decision Matrix and Prior Vector";
15324  run;
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_TARGETBUY_DD.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15325  title10;
15326  proc print data = EMWS5.Ids_TargetBuy_DM noobs label;
15327  var _type_ variable label;
15328  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
15329  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
15330  title9 ' ';
15331  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
15332  run;
 
NOTE: There were 11 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
15333  title10;
 
15334  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15860  *------------------------------------------------------------*;
15861  * Tree: Generation of macros and macro variables;
15862  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15863  *------------------------------------------------------------*;
 
15864  %let EMEXCEPTIONSTRING=;
15865  *------------------------------------------------------------*;
15866  * TRAIN: Tree;
15867  *------------------------------------------------------------*;
15868  %let EM_ACTION = TRAIN;
15869  %let syscc = 0;
15870  %macro main;
15871
15872    %if %upcase(&EM_ACTION) = CREATE %then %do;
15873      filename temp catalog 'sashelp.emmodl.tree_create.source';
15874      %include temp;
15875      filename temp;
15876
15877      %em_tree_create;
15878    %end;
15879
15880     %else
15881     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15882
15883         filename temp catalog 'sashelp.emmodl.tree_train.source';
15884         %include temp;
15885         filename temp;
15886         %em_tree_train;
15887     %end;
15888
15889    %else
15890    %if %upcase(&EM_ACTION) = SCORE %then %do;
15891      filename temp catalog 'sashelp.emmodl.tree_score.source';
15892      %include temp;
15893      filename temp;
15894
15895      %em_tree_score;
15896
15897    %end;
15898
15899    %else
15900    %if %upcase(&EM_ACTION) = REPORT %then %do;
15901
15902         filename temp catalog 'sashelp.emmodl.tree_report.source';
15903         %include temp;
15904         filename temp;
15905
15906         %em_tree_report;
15907     %end;
15908
15909    %else
15910    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15911
15912         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15913         %include temp;
15914         filename temp;
15915         %EM_TREE_OPENTREEVIEWER;
15916
15917     %end;
15918
15919    %else
15920    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15921
15922         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15923         %include temp;
15924         filename temp;
15925         %EM_TREE_CLOSETREEVIEWER;
15926
15927     %end;
15928
15929
15930     %doendm:
15931  %mend main;
15932
15933  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15935 +%macro em_tree_train;
15937 +   %if &EM_IMPORT_DATA eq %then %do;
15938 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15939 +       %put &em_codebar;
15940 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15941 +       %put &errormsg;
15942 +       %put &em_codebar;
15943 +       %goto doendm;
15944 +   %end;
15945 +   %else
15946 +       %let EMEXCEPTIONSTRING =;
15948 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15949 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15950 +        %put &em_codebar;
15951 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15952 +        %put &errormsg;
15953 +        %put &em_codebar;
15954 +        %goto doendm;
15955 +   %end;
15957 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15958 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15959 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15960 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15961 +        %put &em_codebar;
15962 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15963 +        %put &errormsg;
15964 +        %put &em_codebar;
15965 +        %goto doendm;
15966 +   %end;
15968 +   /* Initialize property macro variables */
15969 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15970 +   %include temp;
15971 +   filename temp;
15973 +   %EM_SetProperties;
15975 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15976 +   %EM_GETNAME(key=EMTREE, type=DATA);
15977 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15978 +     /* if import eq Y and no importtable defined, throw an exception */
15979 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15980 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15981 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15982 +         %put &em_codebar;
15983 +         %put &errmsg;
15984 +         %put &em_codebar;
15985 +         %goto doendm;
15986 +      %end;
15987 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15988 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15989 +         %put &em_codebar;
15990 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15991 +         %put &errormsg;
15992 +         %put &em_codebar;
15993 +         %goto doendm;
15994 +      %end;
15995 +      %else %do;
15996 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15997 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15998 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15999 +         %let varnumX = %sysfunc(varnum(&dsid,X));
16000 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
16001 +         %let dsid = %sysfunc(close(&dsid));
16002 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
16003 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
16004 +            %put &em_codebar;
16005 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
16006 +            %put &errormsg;
16007 +            %put &em_codebar;
16008 +            %goto doendm;
16009 +         %end;
16010 +      %end;
16011 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
16012 +         proc delete data=&EM_USER_EMTREE;
16013 +         run;
16014 +      %end;
16015 +   %end;
16016 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
16017 +      proc delete data=&EM_USER_EMTREE;
16018 +      run;
16019 +   %end;
16021 +   /* load tree macros */
16022 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
16023 +   %include temp;
16024 +   filename temp;
16026 +   /* data sets */
16027 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
16028 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
16029 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
16031 +   /* files */
16032 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
16034 +   /* check actual num of target levels */
16035 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
16036 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
16037 +                              nLevel=_nTargetLevel );
16038 +      %if &_nTargetLevel  > 2 %then %do;
16039 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
16040 +        %put &em_codebar;
16041 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
16042 +        %put &errormsg;
16043 +        %put &em_codebar;
16044 +        %goto doendm;
16045 +      %end;
16046 +   %end;
16048 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
16049 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16050 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16051 +        %let costflag=0;
16052 +        data _null_;
16053 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
16054 +          if eof then call symput("costflag", _N_);
16055 +        run;
16056 +        %if &costflag gt 0 %then %do;
16057 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
16058 +          %put &em_codebar;
16059 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
16060 +          %put &errormsg;
16061 +          %put &em_codebar;
16062 +          %goto doendm;
16063 +       %end;
16064 +     %end;
16065 +   %end;
16067 +   /* determine if multiple targets will be processed */
16068 +   %let em_tree_multipleTargets=N;
16069 +   %let em_tree_numTarget = 1;
16070 +   %let em_tree_targetVars=;
16072 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16073 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16074 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16075 +         %let em_tree_multipleTargets=N;
16076 +      %end;
16077 +      %else %do;
16078 +         /* create macro array of targets  */
16079 +         data _null_;
16080 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16081 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16082 +           if eof then
16083 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16084 +        run;
16086 +        %if &em_tree_numTarget gt 1 %then %do;
16087 +           %let em_tree_multipleTargets=Y;
16088 +        %end;
16089 +      %end;
16090 +   %end;
16092 +   /* create view of only necessary variable for performance reasons */
16093 +   %let tempData = &EM_LIB..em_&EM_NODEID;
16094 +   data &tempData / view=&tempData;
16095 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
16096 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
16097 +       %EM_TARGET
16098 +     %end;
16099 +     %else %do;
16100 +       %if &em_tree_numTarget ne 0 %then %do;
16101 +         %do i=1 %to &em_tree_numTarget;
16102 +            &&em_tree_targetVars&i
16103 +         %end;
16104 +       %end;
16105 +     %end;
16106 +     );
16107 +   run;
16109 +   /* run Tree procedure */
16110 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
16112 +   /* Check return code and throw exception if error is detected */
16113 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
16114 +   %if &syserr %then %do;
16115 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16116 +     %goto doendm;
16117 +   %end;
16119 +   /* add decision score code if multiple targets are processed */
16120 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
16121 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
16122 +   %end;
16124 +   /* create outfit dataset if multiple score statements have been executed */
16125 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
16127 +   /* create English Rules */
16128 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
16129 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
16130 +       %em_tree_makeEnglishRules;
16132 +       /* English Rules */
16133 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
16135 +     %end;
16136 +   filename x;
16138 +   %doendm:
16139 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
16140 +%macro EM_SetProperties;
16142 +   /* train properties */
16143 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
16144 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
16145 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
16146 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
16147 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
16148 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
16149 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
16150 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
16151 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
16152 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
16153 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
16154 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
16155 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
16156 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
16157 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
16158 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
16159 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
16160 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
16161 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
16162 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
16163 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
16164 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
16165 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
16166 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
16167 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
16168 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
16169 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
16170 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
16171 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
16172 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
16173 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
16174 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
16175 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
16176 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
16177 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
16178 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
16179 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
16180 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
16181 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
16182 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
16183 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
16185 +   /* properties for interactive sample */
16186 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
16187 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
16188 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
16189 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
16191 +   /* report properties */
16192 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
16193 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
16194 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
16195 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
16196 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
16197 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
16198 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
16199 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
16200 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
16201 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
16202 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
16203 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
16204 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
16206 +   /* score properties */
16207 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
16208 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
16210 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS5.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
16212 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
16213 +  %global &nLevel;
16214 +  proc dmdb batch data=&indata
16215 +    classout=_tmp_dmdbout;
16216 +    class &target;
16217 +  run;
16218 +  data _tmp_dmdbout;
16219 +    set _tmp_dmdbout;
16220 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
16221 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
16222 +  run;
16223 +  data _null_;
16224 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
16225 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
16226 +    %let dsid = %sysfunc(close(&dsid));
16227 +     call symput("&nLevel", put(&_obs, Best12.));
16228 +  run;
16230 +  proc datasets lib=work nolist;
16231 +     delete _tmp_dmdbout;
16232 +  run;
16233 +  quit;
16234 +%Mend EM_CheckBinaryTargetLevel;
16237 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
16239 +  /* determine the number of obs in training data */
16240 +  proc sql;
16241 +    reset noprint;
16242 +    select count(*) into :em_nobs from &indata;
16243 +  quit;
16245 +  /* determine the number of input variables */
16246 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
16247 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
16249 +  /* retrieve targetEvent from decmeta */
16250 +  %let targetEvent=;
16251 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
16252 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16253 +      data _null_;
16254 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
16255 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
16256 +      run;
16257 +    %end;
16258 +  %end;
16260 +  /* create targetTable if multipleTar eq Y */
16261 +  data temptarget;
16262 +    set &EM_DATA_VARIABLESET;
16263 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
16264 +  run;
16266 + /* data sets */
16267 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
16268 + %EM_GETNAME(key=EMTREE,        type=DATA);
16269 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
16270 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
16271 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
16272 + %EM_GETNAME(key=OUTNODES,      type=DATA);
16273 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
16274 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
16275 + %EM_GETNAME(key=OUTPATH,       type=DATA);
16276 + %EM_GETNAME(key=OUTRULES,      type=DATA);
16278 + /* files */
16279 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16280 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16282 + /* turn on pmml if requested */
16283 + %let nnpmml=0;
16284 + %if %symexist(EM_PMML) %then %do;
16285 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
16286 +       %let nnpmml=1;
16288 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
16289 +   %end;
16290 +%end;
16292 +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
16294 +%if &nnpmml or &numClassTarget %then %do;
16296 +    /* create dmdb needed for pmml generation */
16297 +    %let tree_maxlevel = 512;
16298 +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
16299 +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
16300 +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
16301 +      %end;
16302 +    %end;
16303 +    %if &tree_maxlevel gt 0 %then %do;
16304 +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
16305 +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
16306 +    %end;
16308 +    %let targetOrderString =;
16309 +    %let targetString = ;
16310 +    data _null_;
16311 +       length orderString nameString $10000;
16312 +       retain orderString nameString;
16313 +       set &em_data_variableset end=eof;
16314 +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
16315 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
16316 +       %end;
16317 +       %else %do;
16318 +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
16319 +       %end;          select(order);
16320 +         when('')        order ='DESC';
16321 +         when('FMTASC')  order='ASCFMT';
16322 +         when('FMTDESC') order='DESFMT';
16323 +         otherwise;
16324 +       end;
16325 +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
16326 +       nameString = trim(nameString)!!' '!!trim(NAME);
16328 +       if eof then do;
16329 +          call symput('targetOrderString', trim(orderString));
16330 +          call symput('targetString', trim(nameString));
16331 +       end;
16332 +    run;
16334 +    %let arborkluge= "work._treeDMDB";
16336 +    proc dmdb batch data=&indata
16337 +    %if &nnpmml %then %do;
16338 +        PMML
16339 +    %end;
16340 +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
16342 +      %if &nnpmml %then %do;
16343 +           %if "%EM_ID" ne "" %then %do;
16344 +             id %EM_ID;
16345 +           %end;
16346 +           %if &EM_NUM_CLASS gt 0 %then %do;
16347 +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
16348 +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
16349 +                  &targetOrderString;
16350 +           %end;
16351 +           %if &EM_NUM_INTERVAL gt 0 %then %do;
16352 +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
16353 +           %end;
16354 +           target &targetString %EM_INTERVAL_TARGET;
16355 +           %if "%EM_FREQ" ne "" %then %do;
16356 +             freq %EM_FREQ;
16357 +           %end;
16358 +      %end;
16359 +      %else %do;
16360 +         class  &targetOrderString;
16361 +         target &targetString %EM_INTERVAL_TARGET;
16362 +      %end;
16363 +    run;
16364 +    quit;
16366 +    proc datasets lib=work nolist;
16367 +       delete classout varout;
16368 +    run;
16369 +    quit;
16371 + %end;
16374 + /* run Arbor procedure */
16375 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16376 +  proc arbor data=&INDATA
16378 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
16379 +    Leafsize = &EM_PROPERTY_LEAFSIZE
16380 +  %end;
16382 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
16383 +    Splitsize = &EM_PROPERTY_SPLITSIZE
16384 +  %end;
16386 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
16387 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
16388 +  %end;
16390 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
16391 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
16392 +  %end;
16394 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
16395 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
16396 +  %end;
16398 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
16399 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
16400 +  %end;
16401 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16402 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
16403 +  %end;
16404 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16405 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
16406 +  %end;
16408 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
16409 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
16410 +      alpha = &EM_PROPERTY_SIGLEVEL
16411 +    %end;
16412 +  %end;
16414 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
16415 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16416 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
16417 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
16418 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
16420 +        padjust =
16421 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
16422 +          &chaid
16423 +        %end;
16424 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
16425 +          DEPTH
16426 +        %end;
16427 +      %end;
16428 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
16429 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
16430 +         pvars = &num_inputs
16431 +      %end;
16432 +    %end;
16433 +  %end;
16434 +  %else %do;
16435 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
16436 +         padjust = NONE
16437 +      %end;
16438 +  %end;
16440 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
16441 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
16442 +    Maxrules = &num_nrules
16443 +  %end;
16445 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
16446 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
16447 +    Maxsurrs = &num_nsurrs
16448 +  %end;
16450 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
16451 +     Missing=&EM_PROPERTY_MISSINGVALUE
16452 +  %end;
16454 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
16455 +     USEVARONCE
16456 +  %end;
16458 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
16459 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
16460 +  %end;
16463 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16464 +    event = "&targetEvent"
16465 +  %end;
16467 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
16468 +     DECSEARCH
16469 +  %end;
16471 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
16472 +     PRIORSSEARCH
16473 +  %end;
16475 +  %if &arbor_1 ne %then %do;
16476 +    &arbor_1
16477 +  %end;
16479 +  %if &em_arbor ne %then %do;
16480 +     &em_arbor
16481 +  %end;
16482 +  ;
16483 + %end;
16484 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
16485 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
16486 +       Performance &EM_PROPERTY_PERFORMANCE
16487 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16488 +         nodesize=&EM_PROPERTY_NODESAMPLE
16489 +       %end;
16490 +       ;
16491 +       interact;
16492 + %end;
16493 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
16494 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
16495 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16496 +    %put &em_codebar;
16497 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16498 +    %put &errormsg;
16499 +    %put &em_codebar;
16500 +    %goto doendm;
16501 +   %end;
16502 +   %else %do;
16503 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16504 +       Performance &EM_PROPERTY_PERFORMANCE
16505 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16506 +         nodesize=&EM_PROPERTY_NODESAMPLE
16507 +       %end;
16508 +       ;
16509 +       interact;
16510 +   %end;
16511 + %end;
16513 + %else %do;
16514 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16515 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16516 +    %put &em_codebar;
16517 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16518 +    %put &errormsg;
16519 +    %put &em_codebar;
16520 +    %goto doendm;
16521 +   %end;
16522 +   %else %do;
16523 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16524 +       Performance &EM_PROPERTY_PERFORMANCE
16525 +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16526 +         nodesize=&EM_PROPERTY_NODESAMPLE
16527 +       %end;
16528 +       ;
16529 +        interact;
16530 +   %end;
16531 + %end;
16533 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16534 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16535 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16536 +    %end;
16538 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16539 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16540 +    %end;
16542 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16543 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16544 +    %end;
16546 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16547 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16548 +    %end;
16550 +    %if "%EM_FREQ" ne "" %then %do;
16551 +       freq %EM_FREQ;
16552 +    %end;
16554 +    %if "&multipleTar" eq "Y" %then %do;
16555 +       /* cycle through all target vars in variableset */
16556 +       %let tdsid = %sysfunc(open(temptarget));
16557 +       %if &tdsid %then %do;
16558 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16559 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16560 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16561 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16562 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16563 +             target &var / level = &lvl
16564 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16565 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16566 +             %end;
16567 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16568 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16569 +             %end;
16570 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16571 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16572 +             %end;
16573 +          %end;
16574 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16575 +       %end;
16576 +       useTarget variable = %EM_TARGET;
16577 +    %end;
16578 +    %else %do;
16579 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16580 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16581 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16582 +      %end;
16583 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16584 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16585 +      %end;
16586 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16587 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16588 +      %end;
16589 +    %end;
16591 +    %if "&multipleTar" eq "N" %then %do;
16592 +      &EM_DEC_STATEMENT;
16593 +    %end;
16595 +    Performance &EM_PROPERTY_PERFORMANCE
16596 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16597 +      nodesize=&EM_PROPERTY_NODESAMPLE
16598 +    %end;
16599 +    ;
16601 +    %if "&intFlag" eq "Y" %then %do;
16602 +       INTERACT Largest;
16603 +       Train maxnewdepth=0;
16604 +    %end;
16606 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16607 +         Assess
16608 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16609 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16610 +              %put &em_codebar;
16611 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16612 +              %put &errormsg;
16613 +              %put &em_codebar;
16614 +            %end;
16615 +            %else %do;
16616 +               Validata=&EM_IMPORT_VALIDATE
16617 +            %end;
16618 +         %end;
16619 +         %else %do;
16620 +           NoValidata
16621 +         %end;
16622 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16623 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16624 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16625 +               %if &dsid %then %do;
16626 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16627 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16628 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16629 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16630 +                   %else %do;
16631 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16632 +                      %else %let measure= MISC;
16633 +                   %end;
16634 +                 %end;
16635 +               %end;
16636 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16637 +            %end;
16638 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16639 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16640 +                 %let measure=ASE;
16641 +              %end;
16642 +              %else %do;
16643 +                 %let measure=MISC;
16644 +              %end;
16645 +            %end;
16646 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16647 +              %let measure=ASE;
16648 +            %end;
16649 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16650 +               %let measure = LIFT;
16651 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16652 +               %if &dsid %then %do;
16653 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16654 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16655 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16656 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16657 +                 %end;
16658 +               %end;
16659 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16660 +            %end;
16661 +            measure=&measure
16662 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16663 +               event = "&targetEvent"
16664 +            %end;
16665 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16666 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16667 +            %end;
16668 +         %end;
16669 +         %if "&multipleTar" eq "N" %then %do;
16670 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16671 +               CV
16672 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16673 +                 CVNITer = &EM_PROPERTY_CVNITER
16674 +               %end;
16675 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16676 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16677 +               %end;
16678 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16679 +                 CVSeed = &EM_PROPERTY_CVSEED
16680 +               %end;
16681 +            %end;
16682 +         %end;
16683 +       %end;
16684 +      ;
16686 +      %if "&intFlag" ne "Y" %then %do;
16687 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16688 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16689 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16690 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16692 +          SUBTREE &subtree
16693 +          %if "&subtree" eq "NLEAVES" %then %do;
16694 +            =&EM_PROPERTY_NSUBTREE
16695 +          %end;
16696 +          ;
16697 +        %end;
16699 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16700 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16701 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16702 +          %end;
16703 +       %end;
16704 +      %end;
16705 + %end;
16708 + MakeMacro nleaves = nleaves;
16709 + save
16710 + %if "&EM_USER_EMTREE" ne "" %then %do;
16711 +   MODEL=&EM_USER_EMTREE
16712 + %end;
16713 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16714 +   SEQUENCE=&EM_USER_OUTSEQ
16715 + %end;
16716 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16717 +   IMPORTANCE=&EM_USER_OUTIMPORT
16718 + %end;
16719 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16720 +   NODESTAT=&EM_USER_OUTNODES
16721 + %end;
16722 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16723 +   SUMMARY=&EM_USER_OUTSUMMARY
16724 + %end;
16725 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16726 +   STATSBYNODE=&EM_USER_OUTSTATS
16727 + %end;
16728 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16729 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16730 + %end;
16731 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16732 +   Pathlistnonmissing=&EM_USER_OUTPATH
16733 + %end;
16734 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16735 +   RULES = &EM_USER_OUTRULES
16736 + %end;
16737 + ;
16739 + %if "&intFlag" ne "Y" %then %do;
16741 +   %let lookupString = ;
16742 +   %if ^%symexist(EM_OPTION) %then
16743 +      %let EM_OPTION=;
16745 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16746 +      %let lookupString = LOOKUP=SELECT;
16747 +   %end;
16749 +   %let codetext=;
16750 +   %let norescodetxt=;
16752 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16753 +     %let codetext=&codetext DUMMY;
16754 +     %let norescodetxt=&norescodetxt DUMMY;
16755 +   %end;
16756 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16757 +     %let codetext=&codetext NOLEAFID;
16758 +     %let norescodetxt=&norescodetxt NOLEAFID;
16759 +   %end;
16760 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16761 +     %let norescodetxt=&norescodetxt NOPRED;
16762 +   %end;
16764 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16765 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16767 +   %if &nnpmml %then %do;
16768 +     code pmml;
16769 +   %end;
16771 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16772 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16773 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16774 +   %end;
16775 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16776 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16777 +   %end;
16778 + %end;
16780 + run;
16781 + quit;
16783 + /*%em_checkerror(); */
16784 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16785 +   /* Delete DMDB catalog */
16786 +   proc datasets lib=work nolist;
16787 +       delete _treeDMDB / mt=cat;
16788 +  run;
16789 +  %end;
16791 + %if &nnpmml %then %do;
16792 +    ods pmml close;
16793 + %end;
16795 +  %doendm:
16797 +%mend em_tree_runTreeProcedure;
16799 +%macro em_tree_createFitStats( multipleTar= );
16802 +  /* create targetTable is multipleTar eq Y */
16803 +  data temptarget;
16804 +    set &EM_DATA_VARIABLESET;
16805 +    where ROLE="TARGET";
16806 +  run;
16808 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16809 +   data &EM_USER_EMOUTFIT;
16810 +     length target $32;
16811 +     merge work.fit_train
16812 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16813 +       work.fit_valid
16814 +     %end;
16815 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16816 +       work.fit_test
16817 +     %end;
16818 +     ;
16819 +     %if "&multipleTar" eq "N" %then %do;
16820 +       target="%EM_TARGET";
16821 +     %end;
16822 +     %else %do;
16823 +       target = _TARGET_;
16824 +     %end;
16825 +     drop _NW_ _SUMW_
16826 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16827 +        _VSUMW_
16828 +     %end;
16829 +     ;
16830 +   run;
16832 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16833 +     proc datasets library=work nolist;
16834 +       delete fit_valid;
16835 +     run;
16836 +   %end;
16837 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16838 +     proc datasets library=work nolist;
16839 +       delete fit_test;
16840 +     run;
16841 +   %end;
16843 +%mend em_tree_createFitStats;
16846 +%macro em_tree_makeEnglishRules;
16848 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16849 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16851 +  /* verify that necessary tables exist and if not, skip processing */
16852 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16853 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16854 +    %goto doendm;
16855 +  %end;
16856 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16857 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16858 +    %goto doendm;
16859 +  %end;
16861 +  /* determine length of variable in outpath dataset */
16862 +  %let vlength= ;
16863 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16864 +  %if &dsid ne %then %do;
16865 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16866 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16867 +  %end;
16868 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16870 +  data tempoutpath;
16871 +    length varname $&vlength;
16872 +    retain varname;
16873 +    set &EM_USER_OUTPATH;
16875 +    if ^missing(variable) then varname=variable;
16876 +    else if ^missing(var_name) then varname=var_name;
16877 +    output;
16878 +  run;
16880 +  /* create an array of generated predicted variable names */
16881 +  %let tree_pred_vars = ;
16882 +  %let tree_pred_label = ;
16883 +  %let numpred= 0;
16884 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16886 +    data _null_;
16887 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16888 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16889 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16890 +     if eof then
16891 +       call symput('numpred', strip(put(_N_, BEST.)));
16892 +    run;
16893 +  %end;
16895 +  /* determine if NPRIORS exists in outnodes  */
16896 +  %local nprior_flag;
16897 +  data _null_;
16898 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16899 +    if eof then do;
16900 +      call symput('nprior_flag', strip(put(npriors, best.)));
16901 +    end;
16902 +  run;
16904 +  proc sort data=tempoutpath; by node; run;
16905 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16907 +  data tempoutpath;
16908 +    merge tempoutpath(in=_a) outnodes(keep= node
16909 +    %if "&nprior_flag" ne "." %then %do;
16910 +      NPRIORS
16911 +    %end;
16912 +    %else %do;
16913 +      N
16914 +    %end;
16915 +    %if &numpred gt 0 %then %do;
16916 +      %do i=1 %to &numpred;
16917 +        &&tree_pred_vars&i
16918 +      %end;
16919 +    %end;
16920 +    );
16921 +    by node;
16922 +    if _a;
16923 +  run;
16925 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16927 +  data _null_;
16928 +    file x;
16929 +    set tempoutpath;
16930 +    by node descending varname;
16931 +    retain origvar oldnode string;
16932 +    length origvar $32 oldnode 8 string $200;
16934 +    if _N_ = 1 then do;
16935 +      origvar = varname;
16936 +      oldnode = node;
16937 +    end;
16939 +    if first.node then do;
16940 +       put "&EM_CODEBAR";
16941 +       put " Node = " node;
16942 +       put "&EM_CODEBAR";
16943 +    end;
16945 +      if first.varname then do;
16946 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16947 +            if MISSING(CHARACTER_VALUE) then do;
16948 +             if NUMERIC_VALUE ne .  then do;
16949 +              if ^first.node then do;
16950 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16951 +              end;
16952 +              else do;
16953 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16954 +              end;
16955 +             end;
16956 +            end;
16957 +            else do;
16958 +              if ^first.node then do;
16959 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16960 +              end;
16961 +              else do;
16962 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16963 +              end;
16964 +             end;
16965 +         end;
16966 +         else if RELATION in ("=") then do;
16967 +            if ^first.node then do;
16968 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16969 +            end;
16970 +            else do;
16971 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16972 +            end;
16973 +         end;
16974 +         else if RELATION in ("ISMISSING") then do;
16975 +            if ^first.node then do;
16976 +              string = " AND "|| strip(varname) || " equals Missing";
16977 +            end;
16978 +            else do;
16979 +              string = "if "|| strip(varname) ||" equals Missing";
16980 +            end;
16981 +         end;
16982 +         else if RELATION in ("ISNOTMISSING") then do;
16983 +            if ^first.node then do;
16984 +              string = " AND "|| strip(varname) || " equals All Values";
16985 +            end;
16986 +            else do;
16987 +              string = "if "|| strip(varname) ||" equals All Values";
16988 +            end;
16989 +         end;
16990 +         if ^missing(varname) then origvar = varname;
16991 +         oldnode=node;
16993 +      end;
16994 +      else do;
16995 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16996 +          if MISSING(CHARACTER_VALUE) then do;
16997 +           if  NUMERIC_VALUE ne .  then do;
16998 +            if ^MISSING(string) then
16999 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
17000 +            else
17001 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
17002 +           end;
17003 +          end;
17004 +          else do;
17005 +            if ^MISSING(string) then
17006 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17007 +            else
17008 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
17009 +          end;
17011 +         end;
17012 +         else if RELATION in ("=") then do;
17013 +           string = strip(string)||", "||strip(character_value);
17014 +         end;
17015 +         else if RELATION in ("ISMISSING") then do;
17017 +         end;
17018 +         if ^missing(varname) then origvar = varname;
17019 +         oldnode=node;
17020 +      end;
17021 +      if last.varname then do;
17022 +         if RELATION in ("ISMISSING") then do;
17023 +           if ^first.varname then do;
17024 +             string = strip(string) || " or MISSING";
17025 +           end;
17026 +         end;
17027 +         put string;
17028 +         if ^missing(varname) then origvar = varname;
17029 +         oldnode=node;
17030 +      end;
17032 +      if last.node then do;
17033 +         put "then ";
17034 +         put " Tree Node Identifier   = " node;
17036 +         %if "&nprior_flag" ne "." %then %do;
17037 +           put " Number of Observations = " NPRIORS;
17038 +         %end;
17039 +         %else %do;
17040 +           put " Number of Observations = " N;
17041 +         %end;
17043 +         %if &numpred gt 0 %then %do;
17044 +           %do i=1 %to &numpred;
17045 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
17046 +           %end;
17047 +         %end;
17049 +         put " ";
17050 +         if ^missing(varname) then origvar = varname;
17051 +         oldnode=node;
17052 +      end;
17054 +  run;
17056 +  proc datasets lib=work nolist;
17057 +    delete tempoutpath outnodes;
17058 +  run;
17060 +  %doendm:
17061 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 11112   Memory used = 511K.
NOTE: There were 11112 observations read from the data set EMWS5.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS5.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 11112 observations read from the data set EMWS5.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 11112   Memory used = 511K.
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
NOTE: There were 11112 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS5.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1596677 kilobytes of physical memory.
NOTE: Will use 11112 out of 11112 training cases.
NOTE: Using memory pool with 176443392 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 2853968 bytes of work memory.
NOTE: The subtree sequence contains 29 subtrees. The largest has 57 nodes and 29 leaves.
NOTE: Using subtree with 23 nodes and 12 leaves.
NOTE: Using subtree with 23 nodes and 12 leaves.
NOTE: Created macro variable NLEAVES equal to 12.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS5.TREE_EMTREE has 1542 observations and 4 variables.
NOTE: The data set EMWS5.TREE_OUTNODES has 23 observations and 24 variables.
NOTE: The data set EMWS5.TREE_OUTPATH has 79 observations and 7 variables.
NOTE: The data set EMWS5.TREE_OUTRULES has 303 observations and 6 variables.
NOTE: The data set EMWS5.TREE_OUTSEQ has 29 observations and 28 variables.
NOTE: The data set EMWS5.TREE_OUTSTATS has 391 observations and 5 variables.
NOTE: The data set EMWS5.TREE_OUTSUMMARY has 48 observations and 7 variables.
NOTE: The data set EMWS5.TREE_OUTTOPOLOGY has 23 observations and 5 variables.
NOTE: External file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\TREEFLOW.sas opened.
NOTE: External file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 14 variables.
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
NOTE: There were 11112 observations read from the data set EMWS5.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 12 variables.
 
 
NOTE: View EMWS5.EM_TREE.VIEW used (Total process time):
      real time           1.20 seconds
      cpu time            1.18 seconds
 
NOTE: There were 11112 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS5.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.21 seconds
      cpu time            1.20 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS5.TREE_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 79 observations read from the data set EMWS5.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 79 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 79 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 23 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 23 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 79 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 79 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 79 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=09May2018:17:32:11,
      Create Time=09May2018:17:32:11
 
NOTE: 142 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: There were 79 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
NOTE: Fileref X has been deassigned.
17063
17064  *------------------------------------------------------------*;
17065  * End TRAIN: Tree;
17066  *------------------------------------------------------------*;
 
17067  *------------------------------------------------------------*;
17068  * Close any missing semi colons;
17069  *------------------------------------------------------------*;
17070  ;
17071  ;
17072  ;
17073  ;
17074  quit;
17075  *------------------------------------------------------------*;
17076  * Close any unbalanced quotes;
17077  *------------------------------------------------------------*;
17078  /*; *"; *'; */
17079  ;
17080  run;
17081  quit;
17082  /* Reset EM Options */
17083  options formchar="|----|+|---+=|-/\<>*";
17084  options nocenter ls=256 ps=10000;
17085  goptions reset=all device=GIF NODISPLAY;
 
17086  proc sort data=WORK.EM_USER_REPORT;
17087  by ID VIEW;
17088  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                May 09, 2018
Time:                17:32:12
*------------------------------------------------------------*
17190  %let EMEXCEPTIONSTRING=;
17191  *------------------------------------------------------------*;
17192  * SCORE: Tree;
17193  *------------------------------------------------------------*;
17194  %let EM_ACTION = SCORE;
17195  %let syscc = 0;
17196  %macro main;
17197
17198    %if %upcase(&EM_ACTION) = CREATE %then %do;
17199      filename temp catalog 'sashelp.emmodl.tree_create.source';
17200      %include temp;
17201      filename temp;
17202
17203      %em_tree_create;
17204    %end;
17205
17206     %else
17207     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17208
17209         filename temp catalog 'sashelp.emmodl.tree_train.source';
17210         %include temp;
17211         filename temp;
17212         %em_tree_train;
17213     %end;
17214
17215    %else
17216    %if %upcase(&EM_ACTION) = SCORE %then %do;
17217      filename temp catalog 'sashelp.emmodl.tree_score.source';
17218      %include temp;
17219      filename temp;
17220
17221      %em_tree_score;
17222
17223    %end;
17224
17225    %else
17226    %if %upcase(&EM_ACTION) = REPORT %then %do;
17227
17228         filename temp catalog 'sashelp.emmodl.tree_report.source';
17229         %include temp;
17230         filename temp;
17231
17232         %em_tree_report;
17233     %end;
17234
17235    %else
17236    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17237
17238         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17239         %include temp;
17240         filename temp;
17241         %EM_TREE_OPENTREEVIEWER;
17242
17243     %end;
17244
17245    %else
17246    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17247
17248         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17249         %include temp;
17250         filename temp;
17251         %EM_TREE_CLOSETREEVIEWER;
17252
17253     %end;
17254
17255
17256     %doendm:
17257  %mend main;
17258
17259  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
17261 +%macro em_tree_score;
17263 +   /* determine if multiple targets will be processed */
17264 +   %let em_tree_multipleTargets=N;
17265 +   %let em_tree_numTarget=1;
17266 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17267 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17268 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17269 +         %let em_tree_multipleTargets=N;
17270 +      %end;
17271 +      %else %do;
17272 +         /* create macro array of targets  */
17273 +         data _null_;
17274 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17275 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
17276 +           if eof then
17277 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17278 +        run;
17280 +        %if &em_tree_numTarget gt 1 %then %do;
17281 +           %let em_tree_multipleTargets=Y;
17282 +        %end;
17283 +      %end;
17284 +   %end;
17286 +   /* build flow and publish scoring code */
17287 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
17288 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
17290 +   filename treeflow "&EM_USER_TREEFLOW";
17291 +   filename treepub "&EM_USER_TREEPUBLISH";
17293 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
17294 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
17296 +   %em_copyfile(infref=treeflow, outfref=flowref);
17297 +   %em_copyfile(infref=treepub, outfref=pubref);
17299 +   filename treeflow;
17300 +   filename treepub;
17302 +   /* if priors are used, add code to generate unadjusted residuals in export */
17303 +   %let useAdjPriors = N;
17304 +   data _null_;
17305 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
17306 +     if USE="Y" then call symput('useAdjPriors', 'Y');
17307 +   run;
17308 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
17309 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
17310 +      %include temp;
17311 +      filename temp;
17313 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
17314 +      filename adjref "&EM_USER_adjResidualCode";
17315 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
17317 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
17319 +      filename adjref;
17320 +   %end;
17322 +   /* LEAF */
17323 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17324 +      data _null_;
17325 +        file flowref mod;
17326 +        put 'drop _LEAF_;';
17327 +      run;
17329 +      data _null_;
17330 +        file pubref mod;
17331 +        put 'drop _LEAF_;';
17332 +      run;
17334 +   %end;
17336 +   filename flowref;
17337 +   filename pubref;
17339 +   /* em_metachange code */
17340 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
17341 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
17342 +   %end;
17344 +   /* variable selection based on importance stat    */
17345 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
17346 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
17347 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
17348 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
17349 +     %let obs = %sysfunc(fetch(&dsid));
17350 +     %do %while(&obs=0);
17351 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
17352 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
17353 +       %EM_METACHANGE(name=&varname, role=REJECTED);
17354 +       %let obs = %sysfunc(fetch(&dsid));
17355 +     %end;
17356 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
17357 +   %end;
17359 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
17360 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
17361 +    %let tree_pred_vars = ;
17362 +    %let tree_pred_lvl =;
17363 +    %let numpred= 0;
17365 +    data _null_;
17366 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
17367 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
17368 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
17369 +     if eof then
17370 +       call symput('numpred', strip(put(_N_, BEST.)));
17371 +    run;
17372 +   %end;
17374 +   %if &numpred ne 0 %then %do;
17375 +    %do i=1 %to &numpred;
17376 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
17377 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
17378 +    %end;
17379 +   %end;
17381 +   /* determine if multiple targets will be processed */
17382 +   %let em_tree_multipleTargets=N;
17383 +   %let em_tree_numTarget=1;
17384 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
17385 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
17386 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
17387 +         %let em_tree_multipleTargets=N;
17388 +      %end;
17389 +      %else %do;
17390 +        data _null_;
17391 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
17392 +          if eof then
17393 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
17394 +        run;
17396 +        %if &em_tree_numTarget gt 1 %then %do;
17397 +           %let em_tree_multipleTargets=Y;
17398 +        %end;
17399 +     %end;
17400 +   %end;
17402 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
17403 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
17405 +      /* variable importance */
17406 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
17407 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
17409 +         %let validexist=0;
17410 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
17411 +           %let validexist=1;
17412 +         %end;
17414 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
17415 +         /* and the columns may not be generated                                                                                 */
17416 +         %let em_tree_cvexists=;
17417 +         %let em_tree_surrexists=.;
17418 +         data _null_;
17419 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
17420 +            if eof then do ;
17421 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
17422 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
17423 +            end;
17424 +         run;
17426 +         data &EM_USER_OUTIMPORT;
17427 +            set &EM_USER_OUTIMPORT;
17429 +            /* format columns based on Precison value specified */
17430 +            format importance 15.&EM_PROPERTY_PRECISION
17431 +                 %if &validexist %then %do;
17432 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
17433 +                 %end;
17434 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
17435 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
17436 +                 %end;
17437 +            ;
17438 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
17439 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
17440 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
17441 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
17442 +                 %if "&em_tree_surrexists" ne "" %then %do;
17443 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
17444 +                 %end;
17445 +                 %if &validexist %then %do;
17446 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17447 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17448 +                 %end;
17449 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
17450 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
17451 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
17452 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
17453 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
17454 +                 %end;
17455 +            ;
17456 +         run;
17458 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
17459 +      %end;
17460 +   %end;
17462 +   %doendm:
17463 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=09May2018:17:32:12,
      Create Time=09May2018:17:32:12
 
NOTE: 288 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=09May2018:17:32:12,
      Create Time=09May2018:17:32:12
 
NOTE: 239 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_MAKEUNADJUSTEDRESIDUALVARS.SOURCE.
17464 +%macro makeUnadjustedResidualVars(target=, decmeta=, fref=);
17465 +    %local from_var target_level pred_level res_var res_label res_vars res_levels pred_var numLevels;
17466 +    %let from_var  =;
17467 +    %let res_var   =;
17468 +    %let res_label =;
17469 +    %let res_vars = ;
17470 +    %let res_levels =;
17471 +    %let pred_var  =;
17472 +    %let pred_level =;
17473 +    %let numLevels =;
17474 +    %let target_level =;
17475 +
17476 +    %if (&target eq ) or ^%sysfunc(exist(&decmeta)) or (&fref eq ) %then %goto doendm;
17477 +
17478 +    data _null_;
17479 +       set &decmeta end=eof;
17480 +       where _TYPE_ in('TARGET', 'FROM');
17481 +       if _TYPE_='TARGET' then
17482 +          call symput('target_level', strip(LEVEL));
17483 +       else
17484 +          call symput('from_var', strip(VARIABLE));
17485 +    run;
17486 +    %if &target_level = INTERVAL %then %do;
17487 +        data _null_;
17488 +           set &decmeta end=eof;
17489 +           where _TYPE_ in('PREDICTED', 'RESIDUAL');
17490 +           if _TYPE_ eq 'PREDICTED' then do;
17491 +               call symput('pred_var',   strip(Variable));
17492 +           end;
17493 +           else do;
17494 +              call symput('res_var',   strip(Variable));
17495 +              call symput('res_label', strip(tranwrd(LABEL,"'","''")));
17496 +           end;
17497 +        run;
17498 +    %end;
17499 +    %else %do;
17500 +        data _null_;
17501 +           set &decmeta;
17502 +           where _TYPE_ ='PREDICTED';
17503 +           call symput('pred_vars'!!strip(put(_N_,BEST.)),   strip(Variable));
17504 +        run;
17505 +        data _null_;
17506 +           set &decmeta end=eof;
17507 +           where _TYPE_ ='RESIDUAL';
17508 +           call symput('res_vars'!!strip(put(_N_,BEST.)),   strip(Variable));
17509 +           call symput('res_labels'!!strip(put(_N_,BEST.)), strip(tranwrd(LABEL,"'","''")));
17510 +           call symput('res_levels'!!strip(put(_N_,BEST.)), strip(tranwrd(LEVEL,"'","''")));
17511 +           if eof then
17512 +              call symput('numLevels', strip(put(_N_,BEST.)));
17513 +        run;
17514 +    %end;
17515 +
17516 +    data _null_;
17517 +        file &fref;
17518 +
17519 +    put "&EM_codebar;";
17520 +    put "*Computing Unadjusted Residual Vars: &Target;";
17521 +    put "&EM_codebar;";
17522 +
17523 +    %if &target_level eq INTERVAL %then %do;
17524 +        %if &res_label ne %then %do;
17525 +            put "Label &res_var = '&res_label';";
17526 +        %end;
17527 +         put "&res_var = &target - &pred_var;";
17528 +    %end;
17529 +    %else %do;
17530 +       %do i= 1 %to &numLevels;
17531 +           %let res_var =  &&res_vars&i;
17532 +           %let string = %nrbquote(Label &res_var='&&res_labels&i');
17533 +           put "&string;";
17534 +        %end;
17535 +
17536 +        put "if ";
17537 +
17538 +        %do i= 1 %to &numLevels;
17539 +            %let and = ;
17540 +            %if &i>1 %then
17541 +                %let and = and;
17542 +            %let string = %nrbquote(&and &from_var ne '&&res_levels&i');
17543 +                 put "&string";
17544 +        %end;
17545 +
17546 +        put " then do;";
17547 +
17548 +        %do i= 1 %to &numLevels;
17549 +            put "&&res_vars&i=.;";
17550 +        %end;
17551 +
17552 +        put "end;";
17553 +        put "else do;";
17554 +
17555 +        %do i= 1 %to &numLevels;
17556 +           %let qvar =  &&res_vars&i;
17557 +            %let qvar = %substr(&qvar, 2);
17558 +            %let qvar = Q&qvar;
17559 +            put "&&res_vars&i= - &qvar;";
17560 +        %end;
17561 +
17562 +         put "select(&from_var);";
17563 +
17564 +         %do i= 1 %to &numLevels;
17565 +            %let string = %nrbquote(when('&&res_levels&i')&&res_vars&i= &&res_vars&i+1);
17566 +            put "&string;";
17567 +        %end;
17568 +         put 'otherwise;';
17569 +         put 'end;';
17570 +         put 'end;';
17571 +    %end;
17572 +    run;
17573 +    %doendm:
17574 +%mend;
17575 +
17576 +
17577 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file ADJREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\adjResidualCode.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=09May2018:17:32:12,
      Create Time=09May2018:17:32:12
 
NOTE: 21 records were written to the file ADJREF.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=10078,
      Last Modified=09May2018:17:32:12,
      Create Time=09May2018:17:32:12
 
NOTE: 21 records were written to the file FLOWREF.
      The minimum record length was 2.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref ADJREF has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10645,
      Last Modified=09May2018:17:32:12,
      Create Time=09May2018:17:32:12
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=8708,
      Last Modified=09May2018:17:32:12,
      Create Time=09May2018:17:32:12
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
17578
17579  *------------------------------------------------------------*;
17580  * End SCORE: Tree;
17581  *------------------------------------------------------------*;
 
17582  proc sort data=WORK.EM_METACHANGE;
17583  by key uname;
17584  run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17585  filename x "D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\CDELTA_TRAIN.sas";
17586  data _null_;
17587  file x;
17588  put 'if upcase(NAME) = "DEMCLUSTERGROUP" then do;';
17589  put 'ROLE = "REJECTED";';
17590  put 'end;';
17591  put 'else ';
17592  put 'if upcase(NAME) = "DEMREG" then do;';
17593  put 'ROLE = "REJECTED";';
17594  put 'end;';
17595  put 'else ';
17596  put 'if upcase(NAME) = "DEMTVREG" then do;';
17597  put 'ROLE = "REJECTED";';
17598  put 'end;';
17599  put 'else ';
17600  put 'if upcase(NAME) = "PROMCLASS" then do;';
17601  put 'ROLE = "REJECTED";';
17602  put 'end;';
17603  put 'else ';
17604  put 'if upcase(NAME) = "PROMSPEND" then do;';
17605  put 'ROLE = "REJECTED";';
17606  put 'end;';
17607  put 'else ';
17608  put 'if upcase(NAME) = "PROMTIME" then do;';
17609  put 'ROLE = "REJECTED";';
17610  put 'end;';
17611  put 'else ';
17612  put 'if upcase(NAME) = "Q_TARGETBUY0" then do;';
17613  put 'ROLE = "ASSESS";';
17614  put 'end;';
17615  put 'else ';
17616  put 'if upcase(NAME) = "Q_TARGETBUY1" then do;';
17617  put 'ROLE = "ASSESS";';
17618  put 'end;';
17619  put 'else ';
17620  put 'if upcase(NAME) = "_NODE_" then do;';
17621  put 'ROLE = "SEGMENT";';
17622  put 'LEVEL = "NOMINAL";';
17623  put 'end;';
17624  run;
 
NOTE: The file X is:
      Filename=D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=09May2018:17:32:12,
      Create Time=09May2018:17:10:17
 
NOTE: 36 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 44.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17625  filename x;
NOTE: Fileref X has been deassigned.
 
17626  filename emflow "D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
17627  *------------------------------------------------------------*;
17628  * Tree: Scoring DATA data;
17629  *------------------------------------------------------------*;
17630  data EMWS5.Tree_TRAIN
17631  / view=EMWS5.Tree_TRAIN
17632  ;
17633  set EMWS5.Part_TRAIN
17634  ;
17635  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas.
17636 +****************************************************************;
17637 +******             DECISION TREE SCORING CODE             ******;
17638 +****************************************************************;
17639 +
17640 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17641 +LENGTH F_TargetBuy  $   12;
17642 +LENGTH I_TargetBuy  $   12;
17643 +LENGTH _WARN_  $    4;
17644 +
17645 +******              LABELS FOR NEW VARIABLES              ******;
17646 +label _NODE_ = 'Node' ;
17647 +label _LEAF_ = 'Leaf' ;
17648 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17649 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17650 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17651 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17652 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17653 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17654 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17655 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17656 +label F_TargetBuy = 'From: TargetBuy' ;
17657 +label I_TargetBuy = 'Into: TargetBuy' ;
17658 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17659 +label _WARN_ = 'Warnings' ;
17660 +
17661 +
17662 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17663 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17664 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17665 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17666 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17667 +
17668 +
17669 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17670 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17671 +
17672 +******             ASSIGN OBSERVATION TO NODE             ******;
17673 +IF  NOT MISSING(DemAge ) AND
17674 +  DemAge  <                 44.5 THEN DO;
17675 +  IF  NOT MISSING(DemAffl ) AND
17676 +    DemAffl  <                  9.5 THEN DO;
17677 +    _ARBFMT_1 = PUT( DemGender , $1.);
17678 +     %DMNORMIP( _ARBFMT_1);
17679 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17680 +      _NODE_  =                    8;
17681 +      _LEAF_  =                    1;
17682 +      P_TargetBuy1  =     0.12521449273075;
17683 +      P_TargetBuy0  =     0.87478550726924;
17684 +      Q_TargetBuy1  =     0.47248803827751;
17685 +      Q_TargetBuy0  =     0.52751196172248;
17686 +      V_TargetBuy1  =     0.13702490437956;
17687 +      V_TargetBuy0  =     0.86297509562043;
17688 +      I_TargetBuy  = '0' ;
17689 +      U_TargetBuy  =                    0;
17690 +      END;
17691 +    ELSE DO;
17692 +      _NODE_  =                    9;
17693 +      _LEAF_  =                    2;
17694 +      P_TargetBuy1  =     0.04596958753774;
17695 +      P_TargetBuy0  =     0.95403041246225;
17696 +      Q_TargetBuy1  =     0.23166666666666;
17697 +      Q_TargetBuy0  =     0.76833333333333;
17698 +      V_TargetBuy1  =     0.03897680789004;
17699 +      V_TargetBuy0  =     0.96102319210995;
17700 +      I_TargetBuy  = '0' ;
17701 +      U_TargetBuy  =                    0;
17702 +      END;
17703 +    END;
17704 +  ELSE DO;
17705 +    _NODE_  =                    5;
17706 +    _LEAF_  =                    3;
17707 +    P_TargetBuy1  =     0.26804610070088;
17708 +    P_TargetBuy0  =     0.73195389929911;
17709 +    Q_TargetBuy1  =     0.69619269619269;
17710 +    Q_TargetBuy0  =      0.3038073038073;
17711 +    V_TargetBuy1  =     0.25142381122388;
17712 +    V_TargetBuy0  =     0.74857618877611;
17713 +    I_TargetBuy  = '0' ;
17714 +    U_TargetBuy  =                    0;
17715 +    END;
17716 +  END;
17717 +ELSE DO;
17718 +  IF  NOT MISSING(DemAffl ) AND
17719 +                    12.5 <= DemAffl  THEN DO;
17720 +    IF  NOT MISSING(DemAffl ) AND
17721 +                      16.5 <= DemAffl  THEN DO;
17722 +      IF  NOT MISSING(DemAffl ) AND
17723 +                        19.5 <= DemAffl  THEN DO;
17724 +        _NODE_  =                   31;
17725 +        _LEAF_  =                   12;
17726 +        P_TargetBuy1  =                    1;
17727 +        P_TargetBuy0  =                    0;
17728 +        Q_TargetBuy1  =                    1;
17729 +        Q_TargetBuy0  =                    0;
17730 +        V_TargetBuy1  =     0.79324961250118;
17731 +        V_TargetBuy0  =     0.20675038749881;
17732 +        I_TargetBuy  = '1' ;
17733 +        U_TargetBuy  =                    1;
17734 +        END;
17735 +      ELSE DO;
17736 +        _ARBFMT_1 = PUT( DemGender , $1.);
17737 +         %DMNORMIP( _ARBFMT_1);
17738 +        IF _ARBFMT_1 IN ('M' ,'F' ) THEN DO;
17739 +          _NODE_  =                   50;
17740 +          _LEAF_  =                   10;
17741 +          P_TargetBuy1  =     0.30985946464877;
17742 +          P_TargetBuy0  =     0.69014053535122;
17743 +          Q_TargetBuy1  =               0.7375;
17744 +          Q_TargetBuy0  =               0.2625;
17745 +          V_TargetBuy1  =     0.28959851746079;
17746 +          V_TargetBuy0  =      0.7104014825392;
17747 +          I_TargetBuy  = '0' ;
17748 +          U_TargetBuy  =                    0;
17749 +          END;
17750 +        ELSE DO;
17751 +          _NODE_  =                   51;
17752 +          _LEAF_  =                   11;
17753 +          P_TargetBuy1  =      0.0565391977598;
17754 +          P_TargetBuy0  =     0.94346080224019;
17755 +          Q_TargetBuy1  =     0.27272727272727;
17756 +          Q_TargetBuy0  =     0.72727272727272;
17757 +          V_TargetBuy1  =       0.017452724809;
17758 +          V_TargetBuy0  =     0.98254727519099;
17759 +          I_TargetBuy  = '0' ;
17760 +          U_TargetBuy  =                    0;
17761 +          END;
17762 +        END;
17763 +      END;
17764 +    ELSE DO;
17765 +      _ARBFMT_1 = PUT( DemGender , $1.);
17766 +       %DMNORMIP( _ARBFMT_1);
17767 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
17768 +        _NODE_  =                   29;
17769 +        _LEAF_  =                    9;
17770 +        P_TargetBuy1  =     0.12315910342352;
17771 +        P_TargetBuy0  =     0.87684089657647;
17772 +        Q_TargetBuy1  =     0.46778042959427;
17773 +        Q_TargetBuy0  =     0.53221957040572;
17774 +        V_TargetBuy1  =     0.15708995374012;
17775 +        V_TargetBuy0  =     0.84291004625987;
17776 +        I_TargetBuy  = '0' ;
17777 +        U_TargetBuy  =                    0;
17778 +        END;
17779 +      ELSE DO;
17780 +        _NODE_  =                   28;
17781 +        _LEAF_  =                    8;
17782 +        P_TargetBuy1  =       0.047965727085;
17783 +        P_TargetBuy0  =     0.95203427291499;
17784 +        Q_TargetBuy1  =     0.23970037453183;
17785 +        Q_TargetBuy0  =     0.76029962546816;
17786 +        V_TargetBuy1  =      0.0432988312629;
17787 +        V_TargetBuy0  =     0.95670116873709;
17788 +        I_TargetBuy  = '0' ;
17789 +        U_TargetBuy  =                    0;
17790 +        END;
17791 +      END;
17792 +    END;
17793 +  ELSE DO;
17794 +    _ARBFMT_1 = PUT( DemGender , $1.);
17795 +     %DMNORMIP( _ARBFMT_1);
17796 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
17797 +      IF  NOT MISSING(DemAffl ) AND
17798 +        DemAffl  <                  8.5 THEN DO;
17799 +        _NODE_  =                   24;
17800 +        _LEAF_  =                    4;
17801 +        P_TargetBuy1  =     0.02329606909838;
17802 +        P_TargetBuy0  =     0.97670393090161;
17803 +        Q_TargetBuy1  =     0.12987012987012;
17804 +        Q_TargetBuy0  =     0.87012987012987;
17805 +        V_TargetBuy1  =     0.02191427031849;
17806 +        V_TargetBuy0  =     0.97808572968151;
17807 +        I_TargetBuy  = '0' ;
17808 +        U_TargetBuy  =                    0;
17809 +        END;
17810 +      ELSE DO;
17811 +        IF  NOT MISSING(DemAge ) THEN DO;
17812 +          _NODE_  =                   44;
17813 +          _LEAF_  =                    5;
17814 +          P_TargetBuy1  =     0.04782994233658;
17815 +          P_TargetBuy0  =     0.95217005766341;
17816 +          Q_TargetBuy1  =      0.2391581632653;
17817 +          Q_TargetBuy0  =     0.76084183673469;
17818 +          V_TargetBuy1  =     0.05246968439508;
17819 +          V_TargetBuy0  =     0.94753031560491;
17820 +          I_TargetBuy  = '0' ;
17821 +          U_TargetBuy  =                    0;
17822 +          END;
17823 +        ELSE DO;
17824 +          _NODE_  =                   45;
17825 +          _LEAF_  =                    6;
17826 +          P_TargetBuy1  =     0.11442142510043;
17827 +          P_TargetBuy0  =     0.88557857489956;
17828 +          Q_TargetBuy1  =     0.44705882352941;
17829 +          Q_TargetBuy0  =     0.55294117647058;
17830 +          V_TargetBuy1  =     0.11529822686159;
17831 +          V_TargetBuy0  =      0.8847017731384;
17832 +          I_TargetBuy  = '0' ;
17833 +          U_TargetBuy  =                    0;
17834 +          END;
17835 +        END;
17836 +      END;
17837 +    ELSE DO;
17838 +      _NODE_  =                   13;
17839 +      _LEAF_  =                    7;
17840 +      P_TargetBuy1  =     0.01095571920199;
17841 +      P_TargetBuy0  =       0.989044280798;
17842 +      Q_TargetBuy1  =     0.06482234879305;
17843 +      Q_TargetBuy0  =     0.93517765120694;
17844 +      V_TargetBuy1  =     0.01039029633862;
17845 +      V_TargetBuy0  =     0.98960970366137;
17846 +      I_TargetBuy  = '0' ;
17847 +      U_TargetBuy  =                    0;
17848 +      END;
17849 +    END;
17850 +  END;
17851 +
17852 +*****  RESIDUALS R_ *************;
17853 +IF  F_TargetBuy  NE '1'
17854 +AND F_TargetBuy  NE '0'  THEN DO;
17855 +        R_TargetBuy1  = .;
17856 +        R_TargetBuy0  = .;
17857 + END;
17858 + ELSE DO;
17859 +       R_TargetBuy1  =  -P_TargetBuy1 ;
17860 +       R_TargetBuy0  =  -P_TargetBuy0 ;
17861 +       SELECT( F_TargetBuy  );
17862 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
17863 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
17864 +       END;
17865 + END;
17866 +
17867 +*****  DECISION VARIABLES *******;
17868 +
17869 +*** Decision Processing;
17870 +label D_TARGETBUY = 'Decision: TargetBuy' ;
17871 +label EP_TARGETBUY = 'Expected Profit: TargetBuy' ;
17872 +label BP_TARGETBUY = 'Best Profit: TargetBuy' ;
17873 +label CP_TARGETBUY = 'Computed Profit: TargetBuy' ;
17874 +
17875 +length D_TARGETBUY $ 7;
17876 +
17877 +D_TARGETBUY = ' ';
17878 +EP_TARGETBUY = .;
17879 +BP_TARGETBUY = .;
17880 +CP_TARGETBUY = .;
17881 +
17882 +*** Compute Expected Consequences and Choose Decision;
17883 +_decnum = 1; drop _decnum;
17884 +
17885 +D_TARGETBUY = '1' ;
17886 +EP_TARGETBUY = P_TargetBuy1 * 15 + P_TargetBuy0 * -1.5;
17887 +drop _sum;
17888 +_sum = P_TargetBuy1 * 0 + P_TargetBuy0 * 0;
17889 +if _sum > EP_TARGETBUY + 6.82121E-12 then do;
17890 +   EP_TARGETBUY = _sum; _decnum = 2;
17891 +   D_TARGETBUY = '0' ;
17892 +end;
17893 +
17894 +*** Decision Matrix;
17895 +array TREEdema [2,2] _temporary_ (
17896 +/* row 1 */  15 0
17897 +/* row 2 */  -1.5 0
17898 +);
17899 +
17900 +*** Find Index of Target Category;
17901 +drop _tarnum; select( F_TargetBuy );
17902 +   when('1' ) _tarnum = 1;
17903 +   when('0' ) _tarnum = 2;
17904 +   otherwise _tarnum = 0;
17905 +end;
17906 +if _tarnum <= 0 then goto TREEdeex;
17907 +
17908 +*** Computed Consequence of Chosen Decision;
17909 +CP_TARGETBUY = TREEdema [_tarnum,_decnum];
17910 +
17911 +*** Best Possible Consequence of Any Decision without Cost;
17912 +array TREEdebe [2] _temporary_ ( 15 0);
17913 +BP_TARGETBUY = TREEdebe [_tarnum];
17914 +
17915 +
17916 +TREEdeex:;
17917 +
17918 +*** End Decision Processing ;
17919 +
17920 +****************************************************************;
17921 +******          END OF DECISION TREE SCORING CODE         ******;
17922 +****************************************************************;
17923 +
17924 +*------------------------------------------------------------*;
17925 +*Computing Unadjusted Residual Vars: TargetBuy;
17926 +*------------------------------------------------------------*;
17927 +Label R_TargetBuy1='Residual: TargetBuy=1';
17928 +Label R_TargetBuy0='Residual: TargetBuy=0';
17929 +if
17930 + F_TargetBuy ne '1'
17931 +and F_TargetBuy ne '0'
17932 + then do;
17933 +R_TargetBuy1=.;
17934 +R_TargetBuy0=.;
17935 +end;
17936 +else do;
17937 +R_TargetBuy1= - Q_TargetBuy1;
17938 +R_TargetBuy0= - Q_TargetBuy0;
17939 +select(F_TargetBuy);
17940 +when('1')R_TargetBuy1= R_TargetBuy1+1;
17941 +when('0')R_TargetBuy0= R_TargetBuy0+1;
17942 +otherwise;
17943 +end;
17944 +end;
17945 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17946  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
17947  quit;
17948  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17949  filename emflow "D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
17950  *------------------------------------------------------------*;
17951  * Tree: Scoring VALIDATE data;
17952  *------------------------------------------------------------*;
17953  data EMWS5.Tree_VALIDATE
17954  / view=EMWS5.Tree_VALIDATE
17955  ;
17956  set EMWS5.Part_VALIDATE
17957  ;
17958  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\Nida\Data mining\datamining\BOGO\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas.
17959 +****************************************************************;
17960 +******             DECISION TREE SCORING CODE             ******;
17961 +****************************************************************;
17962 +
17963 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17964 +LENGTH F_TargetBuy  $   12;
17965 +LENGTH I_TargetBuy  $   12;
17966 +LENGTH _WARN_  $    4;
17967 +
17968 +******              LABELS FOR NEW VARIABLES              ******;
17969 +label _NODE_ = 'Node' ;
17970 +label _LEAF_ = 'Leaf' ;
17971 +label P_TargetBuy1 = 'Predicted: TargetBuy=1' ;
17972 +label P_TargetBuy0 = 'Predicted: TargetBuy=0' ;
17973 +label Q_TargetBuy1 = 'Unadjusted P: TargetBuy=1' ;
17974 +label Q_TargetBuy0 = 'Unadjusted P: TargetBuy=0' ;
17975 +label V_TargetBuy1 = 'Validated: TargetBuy=1' ;
17976 +label V_TargetBuy0 = 'Validated: TargetBuy=0' ;
17977 +label R_TargetBuy1 = 'Residual: TargetBuy=1' ;
17978 +label R_TargetBuy0 = 'Residual: TargetBuy=0' ;
17979 +label F_TargetBuy = 'From: TargetBuy' ;
17980 +label I_TargetBuy = 'Into: TargetBuy' ;
17981 +label U_TargetBuy = 'Unnormalized Into: TargetBuy' ;
17982 +label _WARN_ = 'Warnings' ;
17983 +
17984 +
17985 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17986 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17987 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17988 +LENGTH _ARBFMT_1 $      1; DROP _ARBFMT_1;
17989 +_ARBFMT_1 = ' '; /* Initialize to avoid warning. */
17990 +
17991 +
17992 +_ARBFMT_12 = PUT( TargetBuy , BEST12.);
17993 + %DMNORMCP( _ARBFMT_12, F_TargetBuy );
17994 +
17995 +******             ASSIGN OBSERVATION TO NODE             ******;
17996 +IF  NOT MISSING(DemAge ) AND
17997 +  DemAge  <                 44.5 THEN DO;
17998 +  IF  NOT MISSING(DemAffl ) AND
17999 +    DemAffl  <                  9.5 THEN DO;
18000 +    _ARBFMT_1 = PUT( DemGender , $1.);
18001 +     %DMNORMIP( _ARBFMT_1);
18002 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
18003 +      _NODE_  =                    8;
18004 +      _LEAF_  =                    1;
18005 +      P_TargetBuy1  =     0.12521449273075;
18006 +      P_TargetBuy0  =     0.87478550726924;
18007 +      Q_TargetBuy1  =     0.47248803827751;
18008 +      Q_TargetBuy0  =     0.52751196172248;
18009 +      V_TargetBuy1  =     0.13702490437956;
18010 +      V_TargetBuy0  =     0.86297509562043;
18011 +      I_TargetBuy  = '0' ;
18012 +      U_TargetBuy  =                    0;
18013 +      END;
18014 +    ELSE DO;
18015 +      _NODE_  =                    9;
18016 +      _LEAF_  =                    2;
18017 +      P_TargetBuy1  =     0.04596958753774;
18018 +      P_TargetBuy0  =     0.95403041246225;
18019 +      Q_TargetBuy1  =     0.23166666666666;
18020 +      Q_TargetBuy0  =     0.76833333333333;
18021 +      V_TargetBuy1  =     0.03897680789004;
18022 +      V_TargetBuy0  =     0.96102319210995;
18023 +      I_TargetBuy  = '0' ;
18024 +      U_TargetBuy  =                    0;
18025 +      END;
18026 +    END;
18027 +  ELSE DO;
18028 +    _NODE_  =                    5;
18029 +    _LEAF_  =                    3;
18030 +    P_TargetBuy1  =     0.26804610070088;
18031 +    P_TargetBuy0  =     0.73195389929911;
18032 +    Q_TargetBuy1  =     0.69619269619269;
18033 +    Q_TargetBuy0  =      0.3038073038073;
18034 +    V_TargetBuy1  =     0.25142381122388;
18035 +    V_TargetBuy0  =     0.74857618877611;
18036 +    I_TargetBuy  = '0' ;
18037 +    U_TargetBuy  =                    0;
18038 +    END;
18039 +  END;
18040 +ELSE DO;
18041 +  IF  NOT MISSING(DemAffl ) AND
18042 +                    12.5 <= DemAffl  THEN DO;
18043 +    IF  NOT MISSING(DemAffl ) AND
18044 +                      16.5 <= DemAffl  THEN DO;
18045 +      IF  NOT MISSING(DemAffl ) AND
18046 +                        19.5 <= DemAffl  THEN DO;
18047 +        _NODE_  =                   31;
18048 +        _LEAF_  =                   12;
18049 +        P_TargetBuy1  =                    1;
18050 +        P_TargetBuy0  =                    0;
18051 +        Q_TargetBuy1  =                    1;
18052 +        Q_TargetBuy0  =                    0;
18053 +        V_TargetBuy1  =     0.79324961250118;
18054 +        V_TargetBuy0  =     0.20675038749881;
18055 +        I_TargetBuy  = '1' ;
18056 +        U_TargetBuy  =                    1;
18057 +        END;
18058 +      ELSE DO;
18059 +        _ARBFMT_1 = PUT( DemGender , $1.);
18060 +         %DMNORMIP( _ARBFMT_1);
18061 +        IF _ARBFMT_1 IN ('M' ,'F' ) THEN DO;
18062 +          _NODE_  =                   50;
18063 +          _LEAF_  =                   10;
18064 +          P_TargetBuy1  =     0.30985946464877;
18065 +          P_TargetBuy0  =     0.69014053535122;
18066 +          Q_TargetBuy1  =               0.7375;
18067 +          Q_TargetBuy0  =               0.2625;
18068 +          V_TargetBuy1  =     0.28959851746079;
18069 +          V_TargetBuy0  =      0.7104014825392;
18070 +          I_TargetBuy  = '0' ;
18071 +          U_TargetBuy  =                    0;
18072 +          END;
18073 +        ELSE DO;
18074 +          _NODE_  =                   51;
18075 +          _LEAF_  =                   11;
18076 +          P_TargetBuy1  =      0.0565391977598;
18077 +          P_TargetBuy0  =     0.94346080224019;
18078 +          Q_TargetBuy1  =     0.27272727272727;
18079 +          Q_TargetBuy0  =     0.72727272727272;
18080 +          V_TargetBuy1  =       0.017452724809;
18081 +          V_TargetBuy0  =     0.98254727519099;
18082 +          I_TargetBuy  = '0' ;
18083 +          U_TargetBuy  =                    0;
18084 +          END;
18085 +        END;
18086 +      END;
18087 +    ELSE DO;
18088 +      _ARBFMT_1 = PUT( DemGender , $1.);
18089 +       %DMNORMIP( _ARBFMT_1);
18090 +      IF _ARBFMT_1 IN ('F' ) THEN DO;
18091 +        _NODE_  =                   29;
18092 +        _LEAF_  =                    9;
18093 +        P_TargetBuy1  =     0.12315910342352;
18094 +        P_TargetBuy0  =     0.87684089657647;
18095 +        Q_TargetBuy1  =     0.46778042959427;
18096 +        Q_TargetBuy0  =     0.53221957040572;
18097 +        V_TargetBuy1  =     0.15708995374012;
18098 +        V_TargetBuy0  =     0.84291004625987;
18099 +        I_TargetBuy  = '0' ;
18100 +        U_TargetBuy  =                    0;
18101 +        END;
18102 +      ELSE DO;
18103 +        _NODE_  =                   28;
18104 +        _LEAF_  =                    8;
18105 +        P_TargetBuy1  =       0.047965727085;
18106 +        P_TargetBuy0  =     0.95203427291499;
18107 +        Q_TargetBuy1  =     0.23970037453183;
18108 +        Q_TargetBuy0  =     0.76029962546816;
18109 +        V_TargetBuy1  =      0.0432988312629;
18110 +        V_TargetBuy0  =     0.95670116873709;
18111 +        I_TargetBuy  = '0' ;
18112 +        U_TargetBuy  =                    0;
18113 +        END;
18114 +      END;
18115 +    END;
18116 +  ELSE DO;
18117 +    _ARBFMT_1 = PUT( DemGender , $1.);
18118 +     %DMNORMIP( _ARBFMT_1);
18119 +    IF _ARBFMT_1 IN ('F' ) THEN DO;
18120 +      IF  NOT MISSING(DemAffl ) AND
18121 +        DemAffl  <                  8.5 THEN DO;
18122 +        _NODE_  =                   24;
18123 +        _LEAF_  =                    4;
18124 +        P_TargetBuy1  =     0.02329606909838;
18125 +        P_TargetBuy0  =     0.97670393090161;
18126 +        Q_TargetBuy1  =     0.12987012987012;
18127 +        Q_TargetBuy0  =     0.87012987012987;
18128 +        V_TargetBuy1  =     0.02191427031849;
18129 +        V_TargetBuy0  =     0.97808572968151;
18130 +        I_TargetBuy  = '0' ;
18131 +        U_TargetBuy  =                    0;
18132 +        END;
18133 +      ELSE DO;
18134 +        IF  NOT MISSING(DemAge ) THEN DO;
18135 +          _NODE_  =                   44;
18136 +          _LEAF_  =                    5;
18137 +          P_TargetBuy1  =     0.04782994233658;
18138 +          P_TargetBuy0  =     0.95217005766341;
18139 +          Q_TargetBuy1  =      0.2391581632653;
18140 +          Q_TargetBuy0  =     0.76084183673469;
18141 +          V_TargetBuy1  =     0.05246968439508;
18142 +          V_TargetBuy0  =     0.94753031560491;
18143 +          I_TargetBuy  = '0' ;
18144 +          U_TargetBuy  =                    0;
18145 +          END;
18146 +        ELSE DO;
18147 +          _NODE_  =                   45;
18148 +          _LEAF_  =                    6;
18149 +          P_TargetBuy1  =     0.11442142510043;
18150 +          P_TargetBuy0  =     0.88557857489956;
18151 +          Q_TargetBuy1  =     0.44705882352941;
18152 +          Q_TargetBuy0  =     0.55294117647058;
18153 +          V_TargetBuy1  =     0.11529822686159;
18154 +          V_TargetBuy0  =      0.8847017731384;
18155 +          I_TargetBuy  = '0' ;
18156 +          U_TargetBuy  =                    0;
18157 +          END;
18158 +        END;
18159 +      END;
18160 +    ELSE DO;
18161 +      _NODE_  =                   13;
18162 +      _LEAF_  =                    7;
18163 +      P_TargetBuy1  =     0.01095571920199;
18164 +      P_TargetBuy0  =       0.989044280798;
18165 +      Q_TargetBuy1  =     0.06482234879305;
18166 +      Q_TargetBuy0  =     0.93517765120694;
18167 +      V_TargetBuy1  =     0.01039029633862;
18168 +      V_TargetBuy0  =     0.98960970366137;
18169 +      I_TargetBuy  = '0' ;
18170 +      U_TargetBuy  =                    0;
18171 +      END;
18172 +    END;
18173 +  END;
18174 +
18175 +*****  RESIDUALS R_ *************;
18176 +IF  F_TargetBuy  NE '1'
18177 +AND F_TargetBuy  NE '0'  THEN DO;
18178 +        R_TargetBuy1  = .;
18179 +        R_TargetBuy0  = .;
18180 + END;
18181 + ELSE DO;
18182 +       R_TargetBuy1  =  -P_TargetBuy1 ;
18183 +       R_TargetBuy0  =  -P_TargetBuy0 ;
18184 +       SELECT( F_TargetBuy  );
18185 +          WHEN( '1'  ) R_TargetBuy1  = R_TargetBuy1  +1;
18186 +          WHEN( '0'  ) R_TargetBuy0  = R_TargetBuy0  +1;
18187 +       END;
18188 + END;
18189 +
18190 +*****  DECISION VARIABLES *******;
18191 +
18192 +*** Decision Processing;
18193 +label D_TARGETBUY = 'Decision: TargetBuy' ;
18194 +label EP_TARGETBUY = 'Expected Profit: TargetBuy' ;
18195 +label BP_TARGETBUY = 'Best Profit: TargetBuy' ;
18196 +label CP_TARGETBUY = 'Computed Profit: TargetBuy' ;
18197 +
18198 +length D_TARGETBUY $ 7;
18199 +
18200 +D_TARGETBUY = ' ';
18201 +EP_TARGETBUY = .;
18202 +BP_TARGETBUY = .;
18203 +CP_TARGETBUY = .;
18204 +
18205 +*** Compute Expected Consequences and Choose Decision;
18206 +_decnum = 1; drop _decnum;
18207 +
18208 +D_TARGETBUY = '1' ;
18209 +EP_TARGETBUY = P_TargetBuy1 * 15 + P_TargetBuy0 * -1.5;
18210 +drop _sum;
18211 +_sum = P_TargetBuy1 * 0 + P_TargetBuy0 * 0;
18212 +if _sum > EP_TARGETBUY + 6.82121E-12 then do;
18213 +   EP_TARGETBUY = _sum; _decnum = 2;
18214 +   D_TARGETBUY = '0' ;
18215 +end;
18216 +
18217 +*** Decision Matrix;
18218 +array TREEdema [2,2] _temporary_ (
18219 +/* row 1 */  15 0
18220 +/* row 2 */  -1.5 0
18221 +);
18222 +
18223 +*** Find Index of Target Category;
18224 +drop _tarnum; select( F_TargetBuy );
18225 +   when('1' ) _tarnum = 1;
18226 +   when('0' ) _tarnum = 2;
18227 +   otherwise _tarnum = 0;
18228 +end;
18229 +if _tarnum <= 0 then goto TREEdeex;
18230 +
18231 +*** Computed Consequence of Chosen Decision;
18232 +CP_TARGETBUY = TREEdema [_tarnum,_decnum];
18233 +
18234 +*** Best Possible Consequence of Any Decision without Cost;
18235 +array TREEdebe [2] _temporary_ ( 15 0);
18236 +BP_TARGETBUY = TREEdebe [_tarnum];
18237 +
18238 +
18239 +TREEdeex:;
18240 +
18241 +*** End Decision Processing ;
18242 +
18243 +****************************************************************;
18244 +******          END OF DECISION TREE SCORING CODE         ******;
18245 +****************************************************************;
18246 +
18247 +*------------------------------------------------------------*;
18248 +*Computing Unadjusted Residual Vars: TargetBuy;
18249 +*------------------------------------------------------------*;
18250 +Label R_TargetBuy1='Residual: TargetBuy=1';
18251 +Label R_TargetBuy0='Residual: TargetBuy=0';
18252 +if
18253 + F_TargetBuy ne '1'
18254 +and F_TargetBuy ne '0'
18255 + then do;
18256 +R_TargetBuy1=.;
18257 +R_TargetBuy0=.;
18258 +end;
18259 +else do;
18260 +R_TargetBuy1= - Q_TargetBuy1;
18261 +R_TargetBuy0= - Q_TargetBuy0;
18262 +select(F_TargetBuy);
18263 +when('1')R_TargetBuy1= R_TargetBuy1+1;
18264 +when('0')R_TargetBuy0= R_TargetBuy0+1;
18265 +otherwise;
18266 +end;
18267 +end;
18268 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
18269  run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
18270  quit;
18271  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
18273  proc sort data=WORK.EM_USER_REPORT;
18274  by ID VIEW;
18275  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18276  *------------------------------------------------------------*;
18277  * Tree: Computing metadata for TRAIN data;
18278  *------------------------------------------------------------*;
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18662  data WORK.MODELTEMP_INFO;
18663  set EMWS5.Tree_EMINFO;
18664  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18665  run;
 
NOTE: There were 0 observations read from the data set EMWS5.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18666  data EMWS5.Tree_EMINFO;
18667  length TARGET KEY $32 DATA $43;
18668  input TARGET KEY DATA $;
18669  cards;
 
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18673  run;
18674  data EMWS5.Tree_EMINFO;
18675  set EMWS5.Tree_EMINFO WORK.MODELTEMP_INFO;
18676  run;
 
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18677  proc sort data = EMWS5.Tree_EMINFO NOTHREADS;
18678  by TARGET KEY;
18679  run;
 
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18680  proc sort data = EMWS5.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18681  by TARGET KEY;
18682  run;
 
NOTE: There were 3 observations read from the data set EMWS5.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18683  proc sort data = EMWS5.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18684  by TARGET KEY;
18685  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18686  data EMWS5.Tree_EMINFO;
18687  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18688  by TARGET KEY;
18689  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS5.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18690  proc datasets lib=work nolist;
18691  delete TEMP_INFO SORTEDEMINFO;
18692  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18693  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS5.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                May 09, 2018
Time:                17:32:14
*------------------------------------------------------------*
18717  data EMWS5.Tree_EMOUTFIT;
18718  set EMWS5.Tree_EMOUTFIT;
18719  length TargetLabel $200;
18720  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18721  if upcase(TARGET) eq "TARGETBUY" then TargetLabel = 'Organics Purchase Indicator';
18722  run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_EMOUTFIT.
NOTE: The data set EMWS5.TREE_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18723  proc sort data=EMWS5.Tree_EMREPORTFIT nothreads;
18724  by TARGET;
18725  run;
 
NOTE: There were 12 observations read from the data set EMWS5.TREE_EMREPORTFIT.
NOTE: The data set EMWS5.TREE_EMREPORTFIT has 12 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18726  %let _EMwarndup = 0;
18727  %let _EMtargetdup =;
18728  %let _EMASEtargetdup =;
18729  data _null_;
18730  set EMWS5.Tree_EMOUTFIT;
18731  if .<_ASE_<0.000001 then do;
18732  call symput('_EMwarndup', '1');
18733  call symput('_EMtargetdup', target);
18734  call symput('_EMASEtargetdup', put(_ASE_, best.));
18735  end;
18736  run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18737  %let EMEXCEPTIONSTRING=;
18738  *------------------------------------------------------------*;
18739  * REPORT: Tree;
18740  *------------------------------------------------------------*;
18741  %let EM_ACTION = REPORT;
18742  %let syscc = 0;
18743  %macro main;
18744
18745    %if %upcase(&EM_ACTION) = CREATE %then %do;
18746      filename temp catalog 'sashelp.emmodl.tree_create.source';
18747      %include temp;
18748      filename temp;
18749
18750      %em_tree_create;
18751    %end;
18752
18753     %else
18754     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18755
18756         filename temp catalog 'sashelp.emmodl.tree_train.source';
18757         %include temp;
18758         filename temp;
18759         %em_tree_train;
18760     %end;
18761
18762    %else
18763    %if %upcase(&EM_ACTION) = SCORE %then %do;
18764      filename temp catalog 'sashelp.emmodl.tree_score.source';
18765      %include temp;
18766      filename temp;
18767
18768      %em_tree_score;
18769
18770    %end;
18771
18772    %else
18773    %if %upcase(&EM_ACTION) = REPORT %then %do;
18774
18775         filename temp catalog 'sashelp.emmodl.tree_report.source';
18776         %include temp;
18777         filename temp;
18778
18779         %em_tree_report;
18780     %end;
18781
18782    %else
18783    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18784
18785         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18786         %include temp;
18787         filename temp;
18788         %EM_TREE_OPENTREEVIEWER;
18789
18790     %end;
18791
18792    %else
18793    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18794
18795         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18796         %include temp;
18797         filename temp;
18798         %EM_TREE_CLOSETREEVIEWER;
18799
18800     %end;
18801
18802
18803     %doendm:
18804  %mend main;
18805
18806  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18808 +%macro em_tree_makePlotDs( multipleTar= );
18810 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18811 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18812 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18813 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18815 +  /* determine if validation statistics will be displayed */
18816 +  %let validflag=N;
18817 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18818 +    /* determine if validation data exists */
18819 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18820 +      %let validflag=Y;
18821 +    %end;
18822 +  %end;
18824 +   /* retrieve name of decmeta even in presence of multiple targets */
18825 +   %let decmeta = ;
18826 +   %if &EM_DEC_DECMETA eq %then %do;
18827 +     data _Target;
18828 +       set &em_data_variableset;
18829 +       where ROLE='TARGET' and USE in('D', 'Y');
18830 +       keep NAME;
18831 +     run;
18832 +     proc sort data=_Target;
18833 +       by NAME;
18834 +     run;
18835 +     proc sort data=EM_TARGETDECINFO;
18836 +       by TARGET;
18837 +     run;
18838 +     data _Target;
18839 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18840 +       by NAME;
18841 +       if _a then do;
18842 +         call symput('decmeta', trim(DECMETA));
18843 +       end;
18844 +     run;
18845 +     proc delete data=_Target;run;
18846 +   %end;
18847 +   %else %let decmeta = &EM_DEC_DECMETA;
18850 +  /* retrieve targetEvent from decmeta */
18851 +  %let targetEvent=;
18852 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18853 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18854 +      data _null_;
18855 +       set &DECMETA(where=(_TYPE_="TARGET"));
18856 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18857 +      run;
18858 +    %end;
18859 +  %end;
18861 +  /* retrieve predicted var for targetEvent from decmeta */
18862 +  %let predTarget=;
18863 +  %let predLvl=;
18864 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18865 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18866 +      data _null_;
18867 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18868 +       call symput('predTarget', strip(VARIABLE));
18869 +       call symput('predLvl', strip(LEVEL));
18870 +      run;
18871 +    %end;
18872 +  %end;
18873 +  %else %do;
18874 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18875 +      data _null_;
18876 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18877 +       call symput('predTarget', strip(VARIABLE));
18878 +      run;
18879 +    %end;
18880 +  %end;
18882 +  /* create BelowText value */
18883 +  data belowtext;
18884 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18885 +    keep node belowtext;
18886 +  run;
18888 +  /* replace belowtext with variable label if it exists */
18889 +  data belowtext2;
18890 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18891 +    keep node belowtextlbl;
18892 +  run;
18894 +  proc sort data=belowtext; by node; run;
18895 +  proc sort data=belowtext2; by node; run;
18897 +  data belowtext;
18898 +    merge belowtext belowtext2(in=_a);
18899 +    by node;
18900 +    if _a then belowtext=belowtextlbl;
18901 +    keep node belowtext;
18902 +  run;
18904 +  /* create AboveText value */
18905 +  data abovetext;
18906 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18907 +  run;
18908 +  proc sort data=abovetext; by node numeric_value; run;
18910 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18911 +  data abovetext;
18912 +    set abovetext(rename=(node=parent));
18913 +    by parent numeric_value;
18914 +    retain abovetext tempstring flag branch origval origchar ;
18915 +    length abovetext $256;
18916 +    length tempstring origchar $64;
18918 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18919 +      if first.parent then do;
18920 +        if missing(character_value) then do;
18921 +          numeric_value = round(numeric_value, &sp_precision);
18922 +          abovetext = "< "||strip(NUMERIC_VALUE);
18923 +          branch = 1;
18924 +          origval = numeric_value;
18925 +          output;
18926 +        end;
18927 +        else do;
18928 +          abovetext = "< "||strip(CHARACTER_VALUE);
18929 +          branch = 1;
18930 +          origchar = character_value;
18931 +          output;
18932 +        end;
18934 +        if first.parent AND last.parent then do;
18935 +          if missing(character_value) then do;
18936 +            numeric_value = round(numeric_value, &sp_precision);
18937 +            branch = branch + 1;
18938 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18939 +            output;
18940 +          end;
18941 +          else do;
18942 +            branch = branch + 1;
18943 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18944 +            output;
18945 +          end;
18946 +        end;
18947 +      end;
18948 +      else if last.parent then do;
18949 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18950 +          if missing(character_value) then do;
18951 +            numeric_value = round(numeric_value, &sp_precision);
18952 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18953 +          end;
18954 +          else do;
18955 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18956 +          end;
18957 +          branch = branch + 1;
18958 +          output;
18960 +          if missing(character_value) then do;
18961 +            numeric_value = round(numeric_value, &sp_precision);
18962 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18963 +          end;
18964 +          else do;
18965 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18966 +          end;
18967 +          branch = branch + 1;
18968 +          output;
18969 +        end;
18970 +        else do;
18971 +          if missing(character_value) then do;
18972 +            numeric_value = round(numeric_value, &sp_precision);
18973 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18974 +          end;
18975 +          else do;
18976 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18977 +          end;
18978 +          branch = branch + 1;
18979 +          output;
18980 +        end;
18981 +      end;
18982 +      else do;
18983 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18984 +          if missing(character_value) then do;
18985 +            numeric_value = round(numeric_value,&sp_precision);
18986 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18987 +            origval = numeric_value;
18988 +          end;
18989 +          else do;
18990 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18991 +            origchar = character_value;
18992 +          end;
18993 +          branch = branch + 1;
18994 +          output;
18996 +        end;
18997 +        else do;
18998 +          if missing(character_value) then do;
18999 +            numeric_value = round(numeric_value, &sp_precision);
19000 +            abovetext = ">= "||strip(NUMERIC_VALUE);
19001 +            origval = numeric_value;
19002 +          end;
19003 +          else do;
19004 +            abovetext = ">= "||strip(CHARACTER_VALUE);
19005 +            origval = character_value;
19006 +          end;
19007 +          branch = branch + 1;
19008 +          output;
19009 +        end;
19010 +      end;
19011 +    end;
19012 +    else do;
19013 +       if first.numeric_value then do;
19014 +         flag = 0;
19015 +         abovetext = strip(CHARACTER_VALUE);
19016 +         branch = numeric_value;
19017 +         if first.numeric_value AND last.numeric_value then do;
19018 +           output;
19019 +         end;
19020 +       end;
19021 +       else if last.numeric_value then do;
19022 +         if flag=0 then do;
19023 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19024 +           length = length(strip(tempstring));
19025 +           if length < 32 then do;
19026 +             abovetext = strip(tempstring);
19027 +           end;
19028 +           else do;
19029 +             abovetext = strip(abovetext)||", ...";
19030 +             flag = 1;
19031 +           end;
19032 +         end;
19033 +         branch = numeric_value;
19034 +         output;
19035 +       end;
19036 +       else do;
19037 +         if flag=0 then do;
19038 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
19039 +           length = length(strip(tempstring));
19040 +           if length < 32 then do;
19041 +             abovetext = strip(tempstring);
19042 +           end;
19043 +           else do;
19044 +             abovetext = strip(abovetext)||", ...";
19045 +             flag=1;
19046 +           end;
19047 +         end;
19048 +         branch = numeric_value;
19049 +       end;
19050 +    end;
19051 +    keep parent branch abovetext;
19052 +  run;
19054 +  /* Missing value to abovetext */
19055 +  data tempmissing;
19056 +    set &EM_USER_OUTRULES;
19057 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
19058 +    rename node=parent numeric_value=branch character_value=misschar;
19059 +  run;
19062 +  proc sort data=abovetext; by parent branch; run;
19063 +  proc sort data=tempmissing; by parent branch; run;
19064 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
19066 +  data tempoutnodes;
19067 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
19068 +    by parent branch;
19069 +    length traintotal validtotal 8;
19070 +    retain traintotal validtotal;
19072 +    if _a then do;
19073 +      if ^MISSING(abovetext) then do;
19074 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
19075 +      end;
19076 +      else do;
19077 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
19078 +      end;
19079 +    end;
19080 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
19082 +    if node=1 then do;
19083 +      traintotal = N;
19084 +      validtotal=VN;
19085 +    end;
19087 +    drop role rank stat misschar belowtext;
19088 +  run;
19089 +  proc sort data=tempoutnodes; by node; run;
19090 +  proc sort data=belowtext; by node; run;
19092 +  data tempoutnodes;
19093 +    merge tempoutnodes belowtext;
19094 +    by node;
19096 +  run;
19098 +  /* determine if adjusted counts exists; if so, use these vs true counts */
19099 +  %let adjusted = N;
19100 +  %let npriors = 0;
19101 +  data _null_ ;
19102 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
19103 +    if eof then do ;
19104 +      call symput("npriors" , strip(put(_N_,best.))) ;
19105 +    end;
19106 +  run;
19107 +  %if &npriors gt 0 %then %let adjusted=Y;
19110 +  /* create a table with targetUsed and targetLevel columns for each node */
19111 +  data temptarmeta;
19112 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
19113 +    %if &multipleTar eq N %then %do;
19114 +      AND USE in ('D', 'Y')
19115 +    %end;
19116 +    ));
19117 +    length TARGET $32;
19118 +    Target=name;
19119 +    keep target level;
19120 +  run;
19122 +  %if &multipleTar eq Y %then %do;
19123 +    data temptargetused;
19124 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
19125 +      keep node target;
19126 +    run;
19127 +    proc sort data=temptargetused; by target; run;
19128 +    proc sort data=temptarmeta; by target; run;
19129 +    data temptargetused;
19130 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
19131 +      by target;
19132 +      if _a and _b;
19133 +    run;
19134 +  %end;
19135 +  %else %do;
19136 +    data temptargetused;
19137 +      set &EM_USER_OUTSTATS;
19138 +      length target $32 tarlevel $10;
19139 +      target="%EM_TARGET";
19140 +      tarlevel="%EM_TARGET_LEVEL";
19141 +      keep node target tarlevel;
19142 +    run;
19143 +    proc sort data=temptargetused nodupkey; by node; run;
19144 +  %end;
19146 +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
19147 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
19148 +  proc sort data=temptargetused; by node; run;
19151 +  /* create tables for all interval targets as well as all class targets */
19152 +  data tempinterval tempclass;
19153 +    merge tempoutstats temptargetused( rename=(target=targetused));
19154 +    by node;
19155 +    %if "&multipleTar" eq "Y" %then %do;
19156 +      if ((missing(Target)) OR (target=targetused ));
19157 +    %end;
19159 +    if tarlevel="INTERVAL" then output tempinterval;
19160 +    else output tempclass;
19161 +  run;
19163 +  /* initialize intTarget and classTarget flags */
19164 +  %let em_intNobs =0;
19165 +  %let em_classNobs = 0;
19166 +  %let em_intTarget= N;
19167 +  %let em_classTarget= N;
19169 +  proc sql;
19170 +    reset noprint;
19171 +    select count(*) into :em_intNobs from tempinterval;
19172 +  quit;
19173 +  proc sql;
19174 +    reset noprint;
19175 +    select count(*) into :em_classNobs from tempclass;
19176 +  quit;
19178 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
19179 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
19181 +  /* retrieve all information for interval targets */
19182 +  %if &em_intTarget eq Y %then %do;
19184 +    /* determine if leaf variable exists */
19185 +    %let dsid=%sysfunc(open(tempinterval,i));
19186 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
19187 +    %let rc=%sysfunc(close(&dsid));
19189 +    proc transpose data=tempinterval
19190 +      %if &leafexists %then %do;
19191 +        (drop=leaf)
19192 +      %end;
19193 +      %if &validexist %then %do;
19194 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
19195 +      %end;
19196 +      %else %do;
19197 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
19198 +      %end;
19199 +      by node;
19200 +      id statname;
19201 +    run;
19202 +    data tempinterval;
19203 +      set tempinterval;
19204 +      if missing(N) then delete;
19205 +    run;
19206 +  %end;
19208 +  /* retrieve all information for class targets */
19209 +  %if &em_classTarget eq Y %then %do;
19210 +    proc sort data=tempclass; by node category; run;
19211 +    %if &validflag eq N %then %do;
19212 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
19213 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
19214 +    %end;
19215 +    %else %do;
19216 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
19217 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
19218 +    %end;
19219 +      set tempclass;
19221 +      %if &validflag eq N %then %do;
19222 +        %if "&adjusted" eq "N" %then %do;
19223 +          if statname="N" then output tempn;
19224 +        %end;
19225 +        %else %do;
19226 +          if statname="NPRIORS" then output tempn;
19227 +        %end;
19228 +        else if statname="PREDICTION" then output temppredict;
19229 +        else if statname="PROBABILITY" then output tempprob;
19230 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
19231 +        else if statname="ALTERNATIVE LOSS" then output temploss;
19232 +      %end;
19233 +      %else %do;
19234 +        %if "&adjusted" eq "N" %then %do;
19235 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
19236 +        %end;
19237 +        %else %do;
19238 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
19239 +        %end;
19240 +        else if statname="PREDICTION" then output temppredict;
19241 +        else if statname="PROBABILITY" then output tempprob;
19242 +        else if statname="VALID: PROBABILITY" then output tempvprob;
19243 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
19244 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
19245 +      %end;
19246 +    run;
19249 +    /* determine if profit/loss exists in tempprofit */
19250 +    %let em_profitflag=0;
19251 +    %let em_lossflag=0;
19252 +    proc sql;
19253 +      reset noprint;
19254 +      select count(*) into :em_profitflag from tempprofit;
19255 +    quit;
19256 +    proc sql;
19257 +      reset noprint;
19258 +      select count(*) into :em_lossflag from temploss;
19259 +    quit;
19261 +    %if &validFlag eq Y %then %do;
19262 +      proc transpose data=tempn
19263 +        %if "&adjusted" eq "N" %then %do;
19264 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
19265 +        %end;
19266 +        %else %do;
19267 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
19268 +        %end;
19269 +        by node;
19270 +        id statname;
19271 +      run;
19272 +      %if &em_profitflag ne 0 %then %do;
19273 +        proc transpose data=tempprofit out=tempprofit;
19274 +          by node category;
19275 +          id statname ;
19276 +        run;
19277 +      %end;
19278 +      %if &em_lossflag ne 0 %then %do;
19279 +        proc transpose data=temploss out=temploss;
19280 +          by node category;
19281 +          id statname ;
19282 +        run;
19283 +      %end;
19284 +      data tempprob;
19285 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
19286 +        by node
19287 +        %if &multipleTar eq Y %then %do;
19288 +          target
19289 +        %end;
19290 +        category;
19291 +      run;
19292 +    %end;
19294 +    /* store percentcorrect value */
19295 +    data temppredict;
19296 +      merge tempprob temppredict(in=_a);
19297 +      by node category;
19298 +      if _a then do;
19299 +        percentCorrect = statvalue;
19300 +        %if &validFlag eq Y %then %do;
19301 +          vpercentCorrect= vstatvalue;
19302 +        %end;
19303 +      end;
19304 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
19305 +      %if &validFlag eq Y %then %do;
19306 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
19307 +      %end;
19308 +      ;
19309 +      if missing(percentCorrect) then delete;
19310 +      drop target;
19311 +    run;
19313 +    /* build profittext */
19314 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19315 +      data tempprofittext(keep= node profittext profitloss);
19316 +        length profittext $800 profitloss 8.;
19317 +        retain profittext profitloss;
19319 +        merge tempprob
19320 +        %if &em_profitflag ne 0 %then %do;
19321 +          tempprofit
19322 +        %end;
19323 +        %else %if &em_lossflag ne 0 %then %do;
19324 +          temploss
19325 +        %end;
19326 +        ;
19327 +        by node category;
19329 +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19330 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
19331 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
19332 +          %let profittype = ALL;
19333 +        %end;
19335 +        /* create the profitloss variable for nodecolor if selected */
19336 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
19338 +        %if "&profittype" eq "ALL" %then %do;
19339 +          if strip(CATEGORY)="&targetEvent" then do;
19340 +            profitloss=statvalue;
19341 +          end;
19342 +          if first.node then do;
19343 +            %if &validFlag eq N %then %do;
19344 +             %if &em_profitflag ne 0 %then %do;
19345 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19346 +             %end;
19347 +             %if &em_lossflag ne 0 %then %do;
19348 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19349 +             %end;
19350 +            %end;
19351 +            %else %do;
19352 +             %if &em_profitflag ne 0 %then %do;
19353 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19353!+;
19354 +             %end;
19355 +             %if &em_lossflag ne 0 %then %do;
19356 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19357 +             %end;
19358 +            %end;
19359 +          end;
19360 +          else if last.node then do;
19361 +            %if &validFlag eq N %then %do;
19362 +             %if &em_profitflag ne 0 %then %do;
19363 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19364 +             %end;
19365 +             %if &em_lossflag ne 0 %then %do;
19366 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19367 +             %end;
19368 +             /*if CATEGORY="&targetEvent" then do;
19369 +               profitloss=statvalue;
19370 +             end;*/
19371 +            %end;
19372 +            %else %do;
19373 +             %if &em_profitflag ne 0 %then %do;
19374 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19374!+14.&EM_PROPERTY_SPLITPRECISION);
19375 +                if CATEGORY="&targetEvent" then do;
19376 +                 profitloss=ALTERNATIVE_PROFIT;
19377 +                end;
19378 +             %end;
19379 +             %if &em_lossflag ne 0 %then %do;
19380 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19380!+14.&EM_PROPERTY_SPLITPRECISION);
19381 +                if CATEGORY="&targetEvent" then do;
19382 +                  profitloss=ALTERNATIVE_LOSS;
19383 +                end;
19384 +             %end;
19385 +            %end;
19386 +            output;
19387 +          end;
19388 +          else do;
19389 +            %if &validFlag eq N %then %do;
19390 +             %if &em_profitflag ne 0 %then %do;
19391 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19392 +             %end;
19393 +             %if &em_lossflag ne 0 %then %do;
19394 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19395 +             %end;
19396 +            %end;
19397 +            %else %do;
19398 +             %if &em_profitflag ne 0 %then %do;
19399 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19399!+14.&EM_PROPERTY_SPLITPRECISION);
19400 +             %end;
19401 +             %if &em_lossflag ne 0 %then %do;
19402 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19402!+14.&EM_PROPERTY_SPLITPRECISION);
19403 +             %end;
19404 +            %end;
19405 +          end;
19406 +        %end;
19407 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19408 +          if strip(CATEGORY) = "&targetevent" then do;
19409 +            %if &validFlag eq N %then %do;
19410 +             %if &em_profitflag ne 0 %then %do;
19411 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19412 +             %end;
19413 +             %if &em_lossflag ne 0 %then %do;
19414 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19415 +             %end;
19416 +             profitloss=statvalue;
19417 +            %end;
19418 +            %else %do;
19419 +             %if &em_profitflag ne 0 %then %do;
19420 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19420!+;
19421 +                profitloss=ALTERNATIVE_PROFIT;
19422 +             %end;
19423 +             %if &em_lossflag ne 0 %then %do;
19424 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19425 +                profitloss=ALTERNATIVE_LOSS;
19426 +             %end;
19427 +            %end;
19428 +            output;
19429 +          end;
19430 +        %end;
19431 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19432 +          if strip(CATEGORY) = "&targetevent" then do;
19433 +            %if &validFlag eq N %then %do;
19434 +             profitloss=statvalue;
19435 +            %end;
19436 +            %else %do;
19437 +             %if &em_profitflag ne 0 %then %do;
19438 +                profitloss=ALTERNATIVE_PROFIT;
19439 +             %end;
19440 +             %if &em_lossflag ne 0 %then %do;
19441 +                profitloss=ALTERNATIVE_LOSS;
19442 +             %end;
19443 +            %end;
19444 +            output;
19445 +          end;
19446 +        %end;
19447 +      run;
19448 +    %end;
19450 +    data tempprob(keep= node probtext);
19451 +      length probtext $800;
19452 +      retain probtext;
19453 +      set tempprob ;
19454 +      by node;
19456 +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19457 +      %let probtype = &EM_PROPERTY_TARGET;
19458 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19459 +        %let probtype = ALL;
19460 +      %end;
19462 +      %if "&probtype" eq "ALL" %then %do;
19463 +        if first.node then do;
19464 +          %if &validFlag eq N %then %do;
19465 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19466 +          %end;
19467 +          %else %do;
19468 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19469 +          %end;
19470 +        end;
19471 +        else if last.node then do;
19472 +          %if &validFlag eq N %then %do;
19473 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19474 +          %end;
19475 +          %else %do;
19476 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19477 +          %end;
19478 +          output;
19479 +        end;
19480 +        else do;
19481 +          %if &validFlag eq N %then %do;
19482 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19483 +          %end;
19484 +          %else %do;
19485 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19486 +          %end;
19487 +        end;
19488 +      %end;
19489 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19490 +        if strip(CATEGORY) = "&targetevent" then do;
19491 +          %if &validFlag eq N %then %do;
19492 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19493 +          %end;
19494 +          %else %do;
19495 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19496 +          %end;
19497 +          output;
19498 +        end;
19499 +      %end;
19500 +      %else %if "&probtype" eq "NONE" %then %do;
19501 +        if last.node then do;
19502 +          output;
19503 +        end;
19504 +      %end;
19505 +    run;
19506 +  %end;
19508 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19510 +  %let oldexists=0;
19511 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19512 +     data old_tree_plot;
19513 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19514 +        rename nodecolor=oldnodecolor;
19515 +     run;
19517 +     proc sort data=old_tree_plot;
19518 +        by node;
19519 +     run;
19521 +     %let oldexists=1;
19522 +  %end;
19524 +  data &EM_USER_TREE_PLOT;
19525 +    length textall $800;
19526 +    merge tempoutnodes temptargetused
19528 +    %if &em_intTarget eq Y %then %do;
19529 +      tempinterval
19530 +    %end;
19532 +    %if &em_classTarget eq Y %then %do;
19534 +      %if &validFlag eq N %then %do;
19535 +        tempn(rename=(statvalue=N))
19536 +      %end;
19537 +      %else %do;
19538 +        tempn
19539 +      %end;
19541 +      temppredict tempprob
19543 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19544 +        tempprofittext
19545 +      %end;
19546 +    %end;
19547 +    ;
19548 +    by node;
19550 +    /* build nodetext based on user selection */
19551 +    textall="";
19553 +    %if &em_intTarget eq Y %then %do;
19554 +    if tarlevel="INTERVAL" then do;
19555 +      /* Nodeid */
19556 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19557 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19558 +      %end;
19560 +      /* Target identifier if multiple targets are used */
19561 +      %if "&multipleTar" eq "Y" %then %do;
19562 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19563 +      %end;
19565 +      %if &validFlag eq Y %then %do;
19566 +         /* Column labels displayed in validflag eq Y only */
19567 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19568 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19568!+noquote ))";
19569 +         %end;
19571 +         /* Average values */
19572 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19573 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19574 +         %end;
19576 +         /* RASE */
19577 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19578 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19579 +         %end;
19581 +         /* Count */
19582 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19583 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19584 +         %end;
19585 +      %end;
19586 +      %else %do;
19587 +         /* Average values */
19588 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19589 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19590 +         %end;
19592 +         /* RASE */
19593 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19594 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19595 +         %end;
19597 +         /* Count */
19598 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19599 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19600 +         %end;
19601 +      %end;
19603 +      /* nodecolor */
19604 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19605 +        nodecolor=PREDICTION;
19606 +      %end;
19607 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19608 +        nodecolor=RASE;
19609 +      %end;
19610 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19611 +        nodecolor=1;
19612 +      %end;
19614 +    end;
19615 +    %end;
19616 +    %if &em_classTarget eq Y %then %do;
19617 +    if tarlevel^="INTERVAL" then  do;
19619 +      /* Nodeid */
19620 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19621 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19622 +      %end;
19623 +      /* Target identifier if multiple targets are used */
19624 +      %if "&multipleTar" eq "Y" %then %do;
19625 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19626 +      %end;
19628 +      /* Predicted values */
19629 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19630 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19631 +      %end;
19633 +      /* Column labels displayed in validflag eq Y only */
19634 +      %if "&ValidFlag" eq "Y" %then %do;
19635 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19636 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19636!+noquote ))";
19637 +        %end;
19638 +      %end;
19640 +      /* Target Values */
19641 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19642 +        textall=strip(textall)||"0A"x||strip(probtext);
19643 +      %end;
19645 +      /* include profit or loss for all target levels */
19646 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19647 +        textall=strip(textall)||"0A"x||strip(profittext);
19648 +      %end;
19650 +      %if &validFlag eq N %then %do;
19651 +        /* Percent Correct */
19652 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19653 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19654 +        %end;
19656 +         /* Count */
19657 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19658 +          %if "&adjusted" eq "N" %then %do;
19659 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19660 +          %end;
19661 +          %else %do;
19662 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19663 +          %end;
19664 +         %end;
19665 +      %end;
19666 +      %else %do;
19667 +        /* Percent Correct */
19668 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19669 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19670 +        %end;
19672 +         /* Count */
19673 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19674 +          %if "&adjusted" eq "N" %then %do;
19675 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19676 +          %end;
19677 +          %else %do;
19678 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19679 +          %end;
19680 +         %end;
19681 +      %end;
19683 +      /* nodecolor */
19684 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19685 +       %if &multipleTar ne Y %then %do;
19686 +        nodecolor=&predTarget;
19687 +       %end;
19688 +       %else %do;
19689 +         nodecolor=percentcorrect;
19690 +       %end;
19691 +      %end;
19692 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19693 +        nodecolor=percentcorrect;
19694 +      %end;
19695 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19696 +        nodecolor=1;
19697 +      %end;
19698 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19699 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19700 +          nodecolor=percentcorrect;
19701 +        %end;
19702 +        %else %do;
19703 +          nodecolor=profitloss;
19704 +        %end;
19705 +      %end;
19707 +    end;
19708 +    %end;
19709 +    %if &em_intTarget eq Y %then %do;
19710 +     drop  PREDICTION  TARGET TARLEVEL
19711 +     %if &ValidFlag eq Y %then %do;
19712 +         VPREDICTION
19713 +     %end;
19714 +     ;
19715 +    %end;
19716 +    %if &em_classTarget eq Y %then %do;
19717 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19718 +     %if &ValidFlag eq Y %then %do;
19719 +         VSTATVALUE
19720 +     %end;
19721 +     ;
19722 +    %end;
19724 +  run;
19726 +  /* add leaf index information to plotds - based on primary target only*/
19727 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19728 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19729 +      set &EM_USER_OUTSTATS;
19730 +      if ((statname="PROBABILITY"
19731 +      %if &validexist %then %do;
19732 +       or statname="VALID: PROBABILITY"
19733 +      %end;
19734 +      ) AND (CATEGORY="&TARGETEVENT")
19735 +      %if "&multipleTar" eq "Y" %then %do;
19736 +        AND (Target="%EM_TARGET")
19737 +      %end;
19738 +      );
19739 +    run;
19741 +    %if &validexist %then %do;
19742 +      proc sort data=tempprob; by node; run;
19743 +      %let vpredTarget = V%substr(&predTarget, 2);
19744 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19745 +         by node;
19746 +         id statname;
19747 +      run;
19748 +    %end;
19749 +  %end;
19750 +  %else %do;
19751 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19752 +      set &EM_USER_OUTSTATS;
19753 +      if ((statname="PREDICTION"
19754 +      %if &validexist %then %do;
19755 +       or statname="VALID: PREDICTION"
19756 +      %end;
19757 +      )
19758 +      %if "&multipleTar" eq "Y" %then %do;
19759 +        AND (Target="%EM_TARGET")
19760 +      %end;
19761 +      );
19762 +    run;
19763 +    %if &validexist %then %do;
19764 +      proc sort data=tempprob; by node; run;
19765 +      %let vpredTarget = V%substr(&predTarget, 2);
19766 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19767 +         by node;
19768 +         id statname;
19769 +      run;
19770 +    %end;
19771 +  %end;
19773 +  proc sort data=tempprob; by node; run;
19774 +  data tempoutnodes;
19775 +    merge tempoutnodes tempprob;
19776 +    by node;
19777 +  run;
19779 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19780 +  data tempnodes;
19781 +    retain traintotal validtotal;
19782 +    set tempnodes(where=(leaf ne . ));
19783 +    tprob=round(&predTarget, .01);
19784 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19785 +      percevent_train=round(tprob*100, .01);
19786 +    %end;
19787 +    %else %do;
19788 +      percevent_train=tprob;
19789 +    %end;
19791 +    perc_train=round((n/traintotal)*100, 0.01);
19792 +    /* leafwidth already has a *10 multiplier */
19793 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19795 +    %if &validexist %then %do;
19796 +      %let vpredTarget = V%substr(&predTarget,2);
19797 +      vprob=round(&vpredTarget, .01);
19798 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19799 +        percevent_valid=round(vprob*100, .01);
19800 +      %end;
19801 +      %else %do;
19802 +        percevent_valid=vprob;
19803 +      %end;
19804 +      perc_valid=round((vn/validtotal)*100, .01);
19805 +    %end;
19807 +    index=_N_;
19808 +    keep node index tprob perc_train percevent_train
19809 +    %if &validexist %then %do;
19810 +        vprob percevent_valid perc_valid
19811 +    %end;
19812 +    ;
19813 +  run;
19814 +  proc sort data=tempnodes; by node; run;
19815 +  data &EM_USER_TREE_PLOT;
19816 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19817 +    by node;
19818 +    if missing(node) then delete;
19819 +    %if &oldexists %then %do;
19820 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19821 +      drop oldnodecolor;
19822 +    %end;
19823 +    abovetext = compbl(abovetext);
19825 +    /* add variable labels */
19826 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19827 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19828 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19829 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19830 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19831 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19833 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19834 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19835 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19836 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19837 +          %end;
19838 +          %else %do;
19839 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19840 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19841 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19842 +          %end;
19843 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19845 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19846 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19847 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19848 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19849 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19850 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19851 +          %end;
19852 +          %else %do;
19853 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19854 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19855 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19856 +          %end;
19857 +    ;
19858 +  run;
19860 +  /* delete temporary tables */
19861 +  proc datasets lib=work nolist;
19862 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19863 +  run;
19865 +%mend em_tree_makePlotDs;
19869 +%macro em_tree_report;
19871 +   /* report properties */
19872 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19873 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19874 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19875 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19876 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19877 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19878 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19879 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19880 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19881 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19882 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19883 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19884 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19886 +   %let validexist=0;
19887 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19888 +     %let validexist=1;
19889 +   %end;
19891 +   /* determine if multiple targets will be processed */
19892 +   %let em_tree_multipleTargets=N;
19893 +   %let em_tree_numTarget=1;
19894 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19895 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19896 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19897 +         %let em_tree_multipleTargets=N;
19898 +      %end;
19899 +      %else %do;
19900 +        data _null_;
19901 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19902 +          if eof then
19903 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19904 +        run;
19906 +        %if &em_tree_numTarget gt 1 %then %do;
19907 +           %let em_tree_multipleTargets=Y;
19908 +        %end;
19909 +     %end;
19910 +   %end;
19912 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19914 +   /* variable importance */
19915 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19916 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19918 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19919 +     /* and the columns may not be generated                                                                                 */
19920 +     %let em_tree_cvexists=;
19921 +     %let em_tree_surrexists=.;
19922 +     data _null_;
19923 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19924 +       if eof then do ;
19925 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19926 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19927 +       end;
19928 +     run;
19930 +     data &EM_USER_OUTIMPORT;
19931 +         set &EM_USER_OUTIMPORT;
19932 +         /* format columns based on Precison value specified */
19933 +         format importance 15.&EM_PROPERTY_PRECISION
19934 +              %if &validexist %then %do;
19935 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19936 +              %end;
19937 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19938 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19939 +              %end;
19940 +         ;
19941 +     run;
19943 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19944 +     proc print data=&EM_USER_OUTIMPORT
19945 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19946 +          (where=((nrules>0) OR (nsurrogates>0)))
19947 +        %end;
19948 +        %else %do;
19949 +           (where=(nrules>0))
19950 +        %end;
19951 +        label noobs
19952 +        ;
19953 +     run;
19954 +     title10;
19956 +   %end;
19958 +   /* Sequence */
19959 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19960 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19961 +   data _null_ ;
19962 +      set &EM_USER_outseq (obs=2) end=eof ;
19963 +      if eof then do ;
19964 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19965 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19966 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19967 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19968 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19969 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19970 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19971 +      end;
19972 +    run;
19974 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19975 +      data &EM_USER_OUTSEQ;
19976 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19977 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19978 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19979 +           _XMISC_=_VMISC_
19980 +        %end;
19981 +        %if "&em_tree_aprof" ne "."  %then %do;
19982 +           _XAPROF_=_VAPROF_
19983 +           _XPROF_ = _VPROF_
19984 +        %end;
19985 +        %if "&em_tree_aloss" ne "."  %then %do;
19986 +           _XALOSS_=_VALOSS_
19987 +        %end;
19988 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19989 +           _XPASE_ = _VPASE_
19990 +           _XPMISC_ = _VPMISC_
19991 +        %end;
19993 +        ));
19994 +     %end;
19995 +     %else %do;
19996 +        set &EM_USER_OUTSEQ;
19997 +     %end;
19999 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
20000 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20001 +            _MISC_   15.&EM_PROPERTY_PRECISION
20002 +         %end;
20003 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
20004 +            _PASE_  15.&EM_PROPERTY_PRECISION
20005 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
20006 +         %end;
20007 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
20008 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
20009 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20010 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20011 +            %end;
20012 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
20013 +              _VPASE_  15.&EM_PROPERTY_PRECISION
20014 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
20015 +            %end;
20016 +         %end;
20017 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
20018 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
20019 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20020 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
20021 +            %end;
20022 +         %end;
20023 +         %if "&em_tree_seq" ne "." %then %do;
20024 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
20025 +         %end;
20026 +         %if "&em_tree_vseq" ne "." %then %do;
20027 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
20028 +         %end;
20029 +         %if "&em_tree_aprof" ne "." %then %do;
20030 +           _APROF_ 15.&EM_PROPERTY_PRECISION
20031 +           _PROF_ 15.&EM_PROPERTY_PRECISION
20032 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20033 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
20034 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
20035 +           %end;
20036 +         %end;
20037 +         %else %if "&em_tree_aloss" ne "." %then %do;
20038 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
20039 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
20040 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
20041 +           %end;
20042 +         %end;
20043 +      ;
20044 +    run;
20045 +   %end;
20047 +   /* Observation Based Importance */
20048 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
20050 +      /* need to check for 0 obs */
20051 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
20052 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
20053 +      %let rc=%sysfunc(close(&dsid));
20055 +      %if &onobs %then %do;
20056 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
20057 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
20059 +         data &EM_USER_OUTOBSIMP;
20060 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
20061 +           if _a;
20062 +           by _INPUT1_;
20063 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
20064 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
20065 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
20066 +                   %end;
20067 +                   ;
20068 +         run;
20069 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
20070 +      %end;
20071 +   %end;
20073 +  %end;
20075 +  /* create dataset to support tree diagram and icicle plot */
20076 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
20077 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
20079 +  /* display tree diagram */
20080 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
20081 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
20083 +  /* display icicle diagram */
20084 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
20085 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
20087 +  /* Leaf Statistics Plot */
20088 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
20090 +  /* print leaf information to output window */
20091 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
20093 +     proc sort data=&EM_USER_TREE_PLOT out=t;
20094 +       by descending N;
20095 +     run;
20097 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
20098 +     %local vn;
20099 +     data _null_;
20100 +       set t (obs=2) end=eof;
20101 +       if eof then do;
20102 +         call symput("vn", strip(put(vn, best.)));
20103 +       end;
20104 +     run;
20106 +     data t;
20107 +       set t;
20108 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
20109 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
20110 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20111 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
20112 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
20113 +       %end;
20114 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20115 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
20116 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20117 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
20118 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
20119 +          %end;
20120 +       %end;
20121 +       ;
20122 +     run;
20124 +     /* determine if rase is found in t */
20125 +    %let dsid=%sysfunc(open(t,i));
20126 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
20127 +    %let rc=%sysfunc(close(&dsid));
20129 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
20130 +     proc print data=t noobs label;
20131 +       where tprob ne .;
20132 +       var node depth N tprob
20133 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
20134 +         %if "&vn" ne "." %then %do;
20135 +           VN
20136 +         %end;
20137 +         vprob
20138 +       %end;
20139 +       %if &raseexists %then %do;
20140 +            RASE
20141 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
20142 +              VRASE
20143 +            %end;
20144 +       %end;
20145 +       ;
20146 +     run;
20147 +     title10;
20148 +  %end;
20150 +  /* create plots that are done during training of node */
20151 +  /* display iterative plot, including reference line */
20152 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
20153 +   /* %if &nleaves eq  %then %do; */
20154 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
20155 +      data _null_;
20156 +        set &EM_USER_OUTTOPOLOGY end=eof;
20157 +        if eof then do;
20158 +          call symput('nleaves', LEAF);
20159 +        end;
20160 +      run;
20161 +   /* %end; */
20163 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
20164 +    /*%EM_REPORT(view=1, Y=_ASE_); */
20165 +  %end;
20167 +  /* display leaf statistics */
20168 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
20170 +  /* stats by node if multiple targets = Y */
20171 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
20172 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
20173 +    data &EM_USER_OUTSTATS;
20174 +      set &EM_USER_OUTSTATS;
20176 +     * if STATNAME="TARGET" then delete;
20177 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
20178 +      drop leaf;
20179 +    run;
20180 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
20182 +  %end;
20183 +  %else %do;
20184 +    /* add outstats and outdescribe to spk but not results */
20185 +    %EM_REPORT(viewtype=, key=OUTSTATS);
20186 +  %end;
20188 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS5.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set EMWS5.TREE_OUTSEQ.
NOTE: The data set EMWS5.TREE_OUTSEQ has 29 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_TARGETBUY_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set EMWS5.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 17 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 17 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 17 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 19 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 303 observations read from the data set EMWS5.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 19 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 11 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS5.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 11 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 11 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS5.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS5.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 391 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 391 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 391 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 368 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 391 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 391 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 391 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 23 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 391 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 391 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 391 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 391 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 46 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 23 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 46 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 46 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 92 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 23 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 92 observations read from the data set WORK.TEMPPROFIT.
NOTE: The data set WORK.TEMPPROFIT has 46 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: There were 46 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 46 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: There were 23 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 23 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable profittext is uninitialized.
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: There were 46 observations read from the data set WORK.TEMPPROFIT.
NOTE: The data set WORK.TEMPPROFITTEXT has 23 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 23 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1213:196
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 23 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 23 observations read from the data set WORK.TEMPN.
NOTE: There were 23 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: There were 23 observations read from the data set WORK.TEMPPROFITTEXT.
NOTE: The data set EMWS5.TREE_TREE_PLOT has 23 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 391 observations read from the data set EMWS5.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 46 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 46 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 46 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 23 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 23 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 23 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 23 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 12 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS5.TREE_TREE_PLOT.
NOTE: There were 12 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS5.TREE_TREE_PLOT has 23 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS5.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 23 observations and 39 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 23 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      327:141
NOTE: There were 23 observations read from the data set EMWS5.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
20189
20190  *------------------------------------------------------------*;
20191  * End REPORT: Tree;
20192  *------------------------------------------------------------*;
 
20193  /* Reset EM Options */
20194  options formchar="|----|+|---+=|-/\<>*";
20195  options nocenter ls=256 ps=10000;
20196  goptions reset=all device=GIF NODISPLAY;
 
20197  proc sort data=WORK.EM_USER_REPORT;
20198  by ID VIEW;
20199  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20200  proc sort data=EMWS5.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
20201  by NAME;
20202  run;
 
NOTE: There were 14 observations read from the data set EMWS5.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20203  proc sort data=EMWS5.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
20204  by NAME;
20205  run;
 
NOTE: There were 14 observations read from the data set EMWS5.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20206  data WORK.ASSESS_META;
20207  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
20208  by NAME;
20209  run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20210  data EM_temp_assessMeta;
20211  set EMWS5.Tree_CMeta_TRAIN;
20212  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
20213  run;
 
NOTE: There were 16 observations read from the data set EMWS5.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
20214  data EM_temp_assessdata;
20215  set EMWS5.Tree_TRAIN(keep=
20216  BP_TARGETBUY
20217  CP_TARGETBUY
20218  D_TARGETBUY
20219  EP_TARGETBUY
20220  F_TargetBuy
20221  I_TargetBuy
20222  P_TargetBuy0
20223  P_TargetBuy1
20224  Q_TargetBuy0
20225  Q_TargetBuy1
20226  R_TargetBuy0
20227  R_TargetBuy1
20228  U_TargetBuy
20229  V_TargetBuy0
20230  V_TargetBuy1
20231  _WARN_
20232  TargetBuy
20233  );
20234  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 11112 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 11112 observations read from the data set EMWS5.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 11112 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24596   data EM_temp_assessMeta;
24597   set EMWS5.Tree_CMeta_TRAIN;
24598   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24599   run;
 
NOTE: There were 16 observations read from the data set EMWS5.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24600   data EM_temp_assessdata;
24601   set EMWS5.Tree_VALIDATE(keep=
24602   BP_TARGETBUY
24603   CP_TARGETBUY
24604   D_TARGETBUY
24605   EP_TARGETBUY
24606   F_TargetBuy
24607   I_TargetBuy
24608   P_TargetBuy0
24609   P_TargetBuy1
24610   Q_TargetBuy0
24611   Q_TargetBuy1
24612   R_TargetBuy0
24613   R_TargetBuy1
24614   U_TargetBuy
24615   V_TargetBuy0
24616   V_TargetBuy1
24617   _WARN_
24618   TargetBuy
24619   );
24620   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS5.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 11111 observations read from the data set EMWS5.PART_VALIDATE.
NOTE: There were 11111 observations read from the data set EMWS5.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 11111 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28971   %let _cn = %sysfunc(getoption(CENTER));
28972   options nocenter;
28973   proc print data=EMWS5.Tree_EMREPORTFIT noobs label;
28974   var STAT LABEL TRAIN
28975   VALIDATE
28976   ;
28977   by TARGET TARGETLABEL;
28978   title9 ' ';
28979   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28980   run;
 
NOTE: There were 12 observations read from the data set EMWS5.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28981   title10;
28982   options &_cn;
 
28983   proc sort data=EMWS5.Tree_EMCLASSIFICATION nothreads;
28984   by DATAROLE TARGET TARGETLABEL;
28985   run;
 
NOTE: There were 15 observations read from the data set EMWS5.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS5.TREE_EMCLASSIFICATION has 15 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28986   %let _cn = %sysfunc(getoption(CENTER));
28987   options nocenter;
28988   proc print data=EMWS5.Tree_EMCLASSIFICATION noobs label;
28989   var from into pct_row pct_col count percent
28990   Adjustedpercent
28991   ;
28992   by DATAROLE TARGET TARGETLABEL;
28993   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28994   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28995   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28996   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28997   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28998   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28999   where _TYPE_='PREDICTION';
29000   title9 ' ';
29001   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
29002   run;
 
NOTE: There were 7 observations read from the data set EMWS5.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
29003   proc print data=EMWS5.Tree_EMCLASSIFICATION noobs label;
29004   var from into pct_row pct_col count percent
29005   Adjustedpercent
29006   ;
29007   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
29008   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
29009   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
29010   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
29011   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
29012   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
29013   where _TYPE_='DECISION';
29014   by DATAROLE TARGET TARGETLABEL;
29015   title9 ' ';
29016   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_decisiontable_title    , NOQUOTE))";
29017   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='DECISION';
NOTE: The PROCEDURE PRINT printed page 10.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
29018   title9;
29019   title10;
29020   options &_cn;
 
29021   %let _cn = %sysfunc(getoption(CENTER));
29022   options nocenter;
29023   data EMWS5.Tree_EMEVENTREPORT;
29024   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
29024 !  8;
29025   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
29025 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
29025 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
29025 ! FALSEEVENT
29026   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
29026 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
29026 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
29027      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
29028   FALSEEVENT=0;
29029   FALSENEVENT=0;
29030   TRUEEVENT=0;
29031   TRUENEVENT=0;
29032   set EMWS5.Tree_EMEVENTREPORT;
29033   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_EMEVENTREPORT.
NOTE: The data set EMWS5.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
29034   proc print data=EMWS5.Tree_EMEVENTREPORT noobs label;
29035   title9 ' ';
29036   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
29037   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
29038   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 11.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29039   title10;
29040   options &_cn;
 
29041   proc datasets library=EMWS5 nolist;
29042   modify Tree_EMRANK;
29043   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
29044   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29045   run;
 
NOTE: MODIFY was successful for EMWS5.TREE_EMRANK.DATA.
29046   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
29047   %let _cn = %sysfunc(getoption(CENTER));
29048   options nocenter;
29049   proc print data=EMWS5.Tree_EMRANK label noobs;
29050   var
29051   decile gain lift liftc resp respc N _meanP_;
29052   by
29053   notsorted DATAROLE
29054   notsorted TARGET
29055   notsorted TARGETLABEL
29056   ;
29057   title9 ' ';
29058   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
29059   run;
 
NOTE: There were 40 observations read from the data set EMWS5.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 12.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29060   title10;
29061   options &_cn;
 
29062   proc datasets library=EMWS5 nolist;
29063   modify Tree_EMSCOREDIST;
29064   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
29065   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
29066   run;
 
NOTE: MODIFY was successful for EMWS5.TREE_EMSCOREDIST.DATA.
29067   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
